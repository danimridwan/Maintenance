@page "/EmployeeEdit/{Id}"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using UploadFilesLibrary
@using Microsoft.Data.SqlClient
@inject IDbContextFactory<DataContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

@* Form Edit Employee *@
@if (employee == null)
{
	<p><em>Memuat data employee...</em></p>
	<div class="spinner-border text-primary" role="status">
		<span class="sr-only">Loading...</span>
	</div>
}
else
{
	<EditForm Model="employee" OnSubmit="UpdateEmployee">
		<DataAnnotationsValidator />
		<div class="card">
			<div class="card-header bg-light border-primary">
				<ul class="nav nav-tabs card-header-tabs">
					<li class="nav-item">
						@* Tombol kembali ke daftar employee *@
						<a href="EmployeeList" class="nav-link" aria-label="Kembali ke Daftar Employee">
							<span class="oi oi-chevron-left"></span>
						</a>
					</li>
				</ul>
			</div>
			<div class="card-body">
				<div class="form-group row">
					<div class="col-sm-12">
						<label for="FullName" class="col-sm-2 col-form-label">Full Name</label>
						<InputText id="FullName" @bind-Value="employee.FullName" class="form-control" />
						<ValidationMessage For="@(() => employee.FullName)" />
					</div>
					<div class="col-sm-12">
						<label for="Email" class="col-sm-2 col-form-label">Email</label>
						<InputText id="Email" @bind-Value="employee.Email" class="form-control" />
						<ValidationMessage For="@(() => employee.Email)" />
					</div>
					<div class="col-sm-12">
						<label for="PhoneNumber" class="col-sm-2 col-form-label">Phone Number</label>
						<InputText id="PhoneNumber" @bind-Value="employee.PhoneNumber" class="form-control" />
						<ValidationMessage For="@(() => employee.PhoneNumber)" />
					</div>
					<div class="col-sm-12">
						<label for="Section" class="col-sm-2 col-form-label">Section</label>
						<InputSelect id="Section" @bind-Value="employee.Section" class="form-control col-sm-10" placeholder="Please Select Section..">
							<option value="">-</option>
							<option value="Operation">Operation</option>
							<option value="Formalities">Formalities</option>
							<option value="HSE">HSE</option>
							<option value="HRGA">HRGA</option>
							<option value="Security">Security</option>
						</InputSelect>
						<ValidationMessage For="@(() => employee.Section)" />
					</div>
					<div class="col-sm-12">
						<label for="RoleCategory" class="col-sm-2 col-form-label">Role Category </label>
						<InputSelect id="RoleCategory" @bind-Value="employee.RoleCategory" class="form-control col-sm-10" placeholder="Please Select Role Category..">
							<option value=""></option>
							<option value="Electrical">Electrical</option>
							<option value="Mechanical">Mechanical</option>
							<option value="IT">IT</option>
							<option value="Civil">Civil</option>
						</InputSelect>
						<ValidationMessage For="@(() => employee.RoleCategory)" />
					</div>
				</div>
				<button type="button" class="btn btn-danger" onclick="history.back();">Back</button>
				<button type="submit" class="btn btn-success">Simpan</button>
			</div>
		</div>
			
	</EditForm>
}

@code {
	private Employee employee;
	[Parameter]
	public string Id { get; set; }
	private int CurrentStep { get; set; } = 1;
	private Dictionary<string, string> validationErrors = new();
	private const long MaxFileSize = 3 * 1024 * 1024; // 3MB in bytes

	protected override async Task OnInitializedAsync()
	{
		await using var dbContext = await DbContextFactory.CreateDbContextAsync();
		employee = await dbContext.Employees.FindAsync(Id);

		if (employee == null)
		{
			NavigationManager.NavigateTo("/EmployeeList", forceLoad: true);
		}
	}

	private async Task HandleFileUpload(InputFileChangeEventArgs e)
	{
		var file = e.File;

		if (file == null)
		{
			System.IO.File.Delete(Path.Combine("wwwroot/uploads/images/inventories/", employee.UserPhoto));
			ShowAlert(employee.UserPhoto);
			employee.UserPhoto = null; // Photo di-reset jika file dihapus/tidak dipilih
			return;
		}

		if (file != null)
		{

			if (file.Size > MaxFileSize)
			{
				validationErrors["File"] = $"Ukuran file melebihi batas maksimum {MaxFileSize / (1024 * 1024)}MB.";
				await ShowAlert(string.Join("\n", validationErrors.Values));
				employee.UserPhoto = null; // path foto tidak disimpan jika validasi gagal
				return;
			}

			try
			{
				var basePath = Configuration["FileStorageInventories"];
				const string folderName = "Employee";
				var directoryPath = Path.Combine(basePath, folderName);

				// Membuat direktori
				Directory.CreateDirectory(directoryPath);

				// Membuat nama file yang aman dan unik
				var fileExtension = Path.GetExtension(file.Name).ToLowerInvariant(); // Ambil ekstensi dan jadikan huruf kecil
																						// Filter ekstensi
				if (!new[] { ".jpg", ".jpeg", ".png" }.Contains(fileExtension))
				{
					validationErrors["File"] = "Format file tidak didukung. Harap unggah file JPG, JPEG, atau PNG.";
					await ShowAlert(string.Join("\n", validationErrors.Values));
					employee.UserPhoto = null;
					return;
				}

				var newFileName = $"{Guid.NewGuid()}{fileExtension}";
				var fullFilePath = Path.Combine(directoryPath, newFileName);

				System.IO.File.Delete(Path.Combine("wwwroot/uploads/images/inventories/", employee.UserPhoto));

				await using (var stream = file.OpenReadStream(MaxFileSize))
				{
					await using (var fileStream = new FileStream(fullFilePath, FileMode.Create, FileAccess.Write, FileShare.None, 4096, useAsync: true))
					{
						await stream.CopyToAsync(fileStream);
					}
				}

				employee.UserPhoto = Path.Combine(folderName, newFileName).Replace("\\", "/");

			}
			catch (IOException ioEx)
			{
				Console.WriteLine($"File system error: {ioEx.Message}");
				validationErrors["File"] = "Terjadi masalah saat menyimpan file. Periksa izin folder atau ruang disk.";
				await ShowAlert(string.Join("\n", validationErrors.Values));
				employee.UserPhoto = null;
			}
			catch (UnauthorizedAccessException uaEx)
			{
				Console.WriteLine($"Access denied error: {uaEx.Message}");
				validationErrors["File"] = "Akses ditolak saat mencoba menyimpan file. Periksa izin folder.";
				await ShowAlert(string.Join("\n", validationErrors.Values));
				employee.UserPhoto = null;
			}
			catch (Exception ex)
			{
				Console.WriteLine($"File upload error: {ex.Message}");
				validationErrors["File"] = "Gagal mengunggah file. Silakan coba lagi. Detail: " + ex.Message;
				await ShowAlert(string.Join("\n", validationErrors.Values));
				employee.UserPhoto = null;
			}
		}
	}

	private async Task UpdateEmployee()
	{
		try
		{
			await using var dbContext = await DbContextFactory.CreateDbContextAsync();
			dbContext.Employees.Update(employee);
			await dbContext.SaveChangesAsync();

			NavigationManager.NavigateTo("/EmployeeList");
		}
		catch (DbUpdateException ex)
		{
			// Ekstraksi pesan error yang lebih relevan untuk pengguna
			var userFriendlyMessage = "Terjadi kesalahan database. Mohon coba lagi atau hubungi Administrator.";
			if (ex.InnerException is SqlException sqlEx)
			{
				userFriendlyMessage = $"Kesalahan SQL: {sqlEx.Message}";
			}
			else if (ex.InnerException != null)
			{
				userFriendlyMessage = $"Terjadi kesalahan internal: {ex.InnerException.Message}";
			}

			Console.Error.WriteLine($"Database error during employee update: {ex.ToString()}");
			await ShowAlert($"Gagal menyimpan data employee.\n{userFriendlyMessage}");
		}
		catch (Exception ex)
		{
			Console.Error.WriteLine($"General error during employee update: {ex.ToString()}");
			await ShowAlert($"Gagal menyimpan data employee.\nTerjadi kesalahan tak terduga. Silakan coba lagi.");
		}
	}

	private async Task ShowAlert(string message)
	{
		if (!string.IsNullOrWhiteSpace(message))
		{
			await JSRuntime.InvokeVoidAsync("alert", message);
		}
	}
}
