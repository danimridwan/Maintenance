@page "/EmployeeInfo/{Id}"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@inject DataContext DataContext
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IConfiguration Configuration

<div class="card">

	@if (employee != null)
	{
		<div class="card-header bg-light border-primary">
			<ul class="nav nav-tabs card-header-tabs">
				<li class="nav-item">
					@* Tombol kembali ke daftar employee *@
					<a href="EmployeeList" class="nav-link" aria-label="Kembali ke Daftar Employee">
						<span class="oi oi-chevron-left"></span>
					</a>
				</li>
				<li class="nav-item">
					@* Informasi Pompa *@
					<a class="nav-link active" aria-label="Informasi Pompa">Informasi Employee</a>
				</li>
			</ul>
		</div>
		<div class="card-body">
			<div class="form-group row">

				<div class="col-sm-5">

					@if (string.IsNullOrWhiteSpace(employee.UserPhoto) == false)
					{
						<img style="align-content:center;" width="100%" src="@CreateWebPath(employee.UserPhoto)" alt="Employee Photo" class="pt-5">
					}
					else
					{
						<div class="icon">
							<span class="oi oi-image"></span><br>
							No Image Available
						</div>
					}
				</div>

				<div class="col-sm-7">
					<h5 class="display-6">@employee.FullName</h5><hr />
					<table width="100%">
						<tr>
							<td class="td-first">Email Address</td>
							<td> : </td>
							<td class="td-last">@employee.Email</td>
						</tr>
						<tr>
							<td class="td-first">Phone Number</td>
							<td> : </td>
							<td class="td-last">@employee.PhoneNumber</td>
						</tr>
						<tr>
							<td class="td-first">Role Category</td>
							<td> : </td>
							<td class="td-last">@employee.RoleCategory</td>
						</tr>
						<tr>
							<td class="td-first">Section</td>
							<td> : </td>
							<td class="td-last">@employee.Section</td>
						</tr>
					</table>
				</div>

			</div>

		</div>
	}
	else
	{
		<p>Loading employee information...</p>
	}
</div>

@code {
	private Employee employee;
	private string rootStorage;
	[Parameter]
	public string Id { get; set; }

	private string CreateWebPath(string relativePath)
	{
		rootStorage = Configuration.GetValue<string>("WebStorageRoot") + "/" + relativePath;

		return rootStorage;
	}

	protected override async Task OnInitializedAsync()
	{

		employee = await DataContext.Employees.FindAsync(Id);

		if (employee == null)
		{
			NavigationManager.NavigateTo("/Employee", forceLoad: true);
		}
	}
}
