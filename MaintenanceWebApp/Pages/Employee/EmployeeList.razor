
@page "/EmployeeList"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject DataContext DataContext
@inject NavigationManager NavigationManager
@implements IDisposable

@attribute [Authorize(Roles = "Admin")]

<div class="card">
    <div class="row px-3">
        <div class="col-sm-5 form-group">
            <h5 class="display-6">Users</h5>
            @if (HasEmployees)
            {
                @if (EmployeeCount > 5)
                {
                    <div class="page-size-chooser my-2">
                        Items per page:
                        <select @bind="@Pagination.ItemsPerPage">
                            <option>5</option>
                            @if (EmployeeCount > 10)
                            {
                                <option>10</option>
                            }
                            @if (EmployeeCount > 20)
                            {
                                <option>20</option>
                            }
                        </select>
                    </div>
                }
            }
        </div>
        <div class="col-sm-4"></div>
        <div class="col-sm-3 d-flex align-items-center justify-content-end">
            <button class="btn btn-primary" @onclick="NavigateToAddEmployee">
                Add Employee
            </button>
        </div>
    </div>

    <div class="px-3">
        @if (_isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading Pump Data...</p>
            </div>
        }
        else if (!HasEmployees)
        {
            <hr />
            <div class="text-center py-3">
                <p>No Employee Found.</p>
                @if (!string.IsNullOrEmpty(employeeFilter))
                {
                    <button class="btn btn-link" @onclick="ClearFilter">Clear Filter</button>
                }
            </div>
        }
        else
        {
            <QuickGrid Items="FilteredEmployees" Virtualize="false" Pagination="@Pagination"
                       Class="table table-striped table-hover table-bordered">
                <TemplateColumn Title="User Name" SortBy="@sortByName">
                    <a style="text-decoration: none;" href="" @onclick="@(() => NavigateToEmployeeInfo(context))">
                        @context.UserName
                    </a>
                </TemplateColumn>

                <PropertyColumn Property="@(emp => emp.Email)" Title="Email Address" Sortable="true" />
                <PropertyColumn Property="@(emp => emp.PhoneNumber)" Title="Phone Number" Sortable="true" />
                <PropertyColumn Property="@(emp => emp.Section)" Title="Section" Sortable="true" />
                <PropertyColumn Property="@(emp => emp.RoleCategory)" Title="Role Category" Sortable="true" />
                <PropertyColumn Property="@(emp => emp.FullName)" Title="Full Name" Sortable="true" />
                <TemplateColumn Title="Actions" Class="td-action">
                    <button @onclick="@(() => NavigateToEditEmployee(context))" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button @onclick="@(() => NavigateToDeleteEmployee (context))" class="btn btn-danger">
                        <span class="oi oi-trash"></span>
                    </button>
                </TemplateColumn> 
            </QuickGrid>

            <Paginator State="@Pagination" />
        }
    </div>
</div>

@code {
    #region Fields and Properties

    private IQueryable<Employee>? _allEmployees;
    private string _employeeFilter = string.Empty;
    private Timer? _filterDebounceTimer;
    private const int DebounceInterval = 300; // milliseconds
    private bool _isLoading = true;

    private readonly int[] PageSizeOptions = new[] { 1, 5, 10, 20 };

    public PaginationState Pagination { get; } = new() { ItemsPerPage = 5 };

    public bool HasEmployees => !_isLoading && (_allEmployees?.Any() ?? false);
    public int EmployeeCount => _allEmployees?.Count() ?? 0;

    public string employeeFilter
    {
        get => _employeeFilter;
        set
        {
            if (_employeeFilter != value)
            {
                _employeeFilter = value;
                _filterDebounceTimer?.Dispose();
                _filterDebounceTimer = new Timer(OnFilterDebounced, null, DebounceInterval, Timeout.Infinite);
            }
        }
    }

    public int ItemsPerPage
    {
        get => Pagination.ItemsPerPage;
        set
        {
            if (Pagination.ItemsPerPage != value)
            {
                Pagination.ItemsPerPage = value;
                StateHasChanged();
            }
        }
    }

    public IQueryable<Employee> FilteredEmployees =>
        string.IsNullOrWhiteSpace(_employeeFilter)
            ? _allEmployees ?? Enumerable.Empty<Employee>().AsQueryable()
            : (_allEmployees?.Where(p => p.UserName.Contains(_employeeFilter, StringComparison.OrdinalIgnoreCase))
              ?? Enumerable.Empty<Employee>().AsQueryable());

    GridSort<Employee> sortByName = GridSort<Employee>
        .ByAscending(p => p.UserName);

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        _isLoading = false;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _filterDebounceTimer?.Dispose();
        GC.SuppressFinalize(this);
    }

    #endregion

    #region Data Methods

    private async Task LoadEmployees()
    {
        try
        {
            // First get the list asynchronously
            var employeesList = await DataContext.Employees
                .AsNoTracking()
                .OrderBy(p => p.UserName)
                .ToListAsync();

            // Then convert to IQueryable
            _allEmployees = employeesList.AsQueryable();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error loading employees: {ex.Message}");
            // Consider adding error state handling in the UI
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnFilterDebounced(object? state)
    {
        InvokeAsync(StateHasChanged);
    }

    private void ClearFilter()
    {
        employeeFilter = string.Empty;
    }

    #endregion

    #region Navigation Methods

    private void NavigateToAddEmployee()
    {
        NavigationManager.NavigateTo("/EmployeeAdd");
    }

    private void NavigateToEmployeeInfo(Employee employee)
    {
        NavigationManager.NavigateTo($"/EmployeeInfo/{employee.Id}");
    }

    private void NavigateToEditEmployee(Employee employee)
    {
        NavigationManager.NavigateTo($"/EmployeeEdit/{employee.Id}");
    }

    private void NavigateToDeleteEmployee(Employee employee)
    {
        NavigationManager.NavigateTo($"/EmployeeDelete/{employee.Id}");
    }

    #endregion
}