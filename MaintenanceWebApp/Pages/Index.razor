@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using ChartJs.Blazor.PieChart

@inject CRUDService CRUDService

@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<PageTitle>Index</PageTitle>

@if (authenticationState != null && authenticationState.User.Identity.IsAuthenticated)
{
<h5>Hello, @authenticationState.User.Identity.Name !</h5>
<div class="row">
    <div class="card col-sm-6">
        <div class="card-body">
            <h5 class="card-title">PPM Performance</h5>
                <select id="flt-ppm-year" class="form-control" @bind="ddlYear">
                </select>
            <ChartJs.Blazor.Chart Config="_pieConfig"></ChartJs.Blazor.Chart>
        </div>
    </div>
    <div class="card col-sm-6">
        <div class="card-body">
            <h5 class="card-title">PPM Performance</h5>
        </div>
    </div>
</div>

}
else
{
<p>You are not logged in.</p>
}

@code{
    private AuthenticationState authenticationState;
    private IQueryable<PPMStatusByYear>? _ppmStatusByYear;
    private PieConfig _pieConfig;
    private bool firstRender = true;
    private int ddlYear = DateTime.Now.Year;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        await LoadPumps();
        ConfigurePieConfig();
    }

    private async Task LoadPumps()
    {
        try
        {
            // Get All Data using CRUD Service
            var tasksList = await CRUDService.ReadAllAsync<PPMStatusByYear>(orderBy: q => q.OrderBy(p => p.RowNum));
            _ppmStatusByYear = tasksList.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pumps: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ConfigurePieConfig()
    {
        _pieConfig = new PieConfig();
        _pieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "PPM Status"
                }
            };
        foreach (var status in new[] { "Request", "Approved by Manager", "Approved by Terminal Manager", "On Progress", "Checking", "Completed", "Rejected" })
        {
            _pieConfig.Data.Labels.Add(status);
        }
        //var dataset = new PieDataset<int>(new[] { 35, 50, 16 })
        List<int> tasks = _ppmStatusByYear.Where(e => e.Year == ddlYear).Select(e => e.Tasks).ToList();
        var dataset = new PieDataset<int>(tasks)
        {
            BackgroundColor = new []{
                ColorUtil.FromDrawingColor(System.Drawing.Color.Navy),
                ColorUtil.FromDrawingColor(System.Drawing.Color.Maroon),
                ColorUtil.FromDrawingColor(System.Drawing.Color.Khaki),
                ColorUtil.FromDrawingColor(System.Drawing.Color.Aquamarine),
                ColorUtil.FromDrawingColor(System.Drawing.Color.DarkMagenta),
                ColorUtil.FromDrawingColor(System.Drawing.Color.ForestGreen),
                ColorUtil.FromDrawingColor(System.Drawing.Color.Crimson)
            }
        };
        _pieConfig.Data.Datasets.Add(dataset);
    }
}
<script type="text/javascript">
    window.onload = function() {
        jQuery(document).ready(function () {
         //render year filter
         var d = new Date();
         var year = d.getFullYear();
         $("#flt-ppm-year").val(year).change();
         for (i = 2024; i <= year; i++) {
             var option = document.createElement("option");
             option.text = i;
             option.value = i;
             $("#flt-ppm-year").append(option);
         };
         $("#flt-ppm-year").val(year).change();
     });
    };
</script>
