@page "/users"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MaintenanceWebApp.Data

<h3>User Management</h3>

<!-- Filtering controls -->
<div class="mb-3">
    <input @bind="searchTerm" class="form-control" placeholder="Search by Name, Email, Designation, or Salary" />
</div>

<!-- Users table -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Designation</th>
            <th>Salary</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in filteredUsers)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.FullName</td>
                <td>@user.Email</td>
                <td>
                    @if (IsUserAdmin())
                    {
                        <button class="btn btn-primary" @onclick="() => UpdateUser(user)">Update</button>
                        <button class="btn btn-success" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                    }
                    else if (IsUserManager())
                    {
                        <button class="btn btn-primary" @onclick="() => UpdateUser(user)">Update</button>
                        <button class="btn btn-success" @onclick="() => EditUser(user)">Edit</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<MaintenanceWebApp.Data.User> users;
    private List<MaintenanceWebApp.Data.User> filteredUsers;
    private string searchTerm = "";
    private AuthenticationState authenticationState; 

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        filteredUsers = users;
    }

    private bool IsUserAdmin()
    {
        return UserIsInRole("Admin");
    }

    private bool IsUserManager()
    {
        return UserIsInRole("Manager");
    }

    private bool UserIsInRole(string role)
    {
        //return authenticationState.User.IsInRole(role);
        return authenticationState?.User?.IsInRole(role) ?? false;
    }

    private void UpdateUser(MaintenanceWebApp.Data.User user)
    {
    }

    private void EditUser(MaintenanceWebApp.Data.User user)
    {
    }

    private void DeleteUser(MaintenanceWebApp.Data.User user)
    {
    }
}
