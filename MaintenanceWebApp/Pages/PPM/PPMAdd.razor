@page "/PPMAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.IO
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService
@inject UrlStatusService UrlStatusService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Supervisor")]

<div class="card">
    <div class="card-header bg-light border-primary">
        <h5 class="display-6">Tambah PPM</h5>
    </div>
    <div class="card-body">
        <EditForm Model="ppmTask" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group row mb-3">
                <label for="JobCategory" class="col-sm-3 col-form-label">Jenis Pekerjaan<span class="required">*</span></label>
                <div class="col-sm-9">
                    <InputSelect id="JobCategory" @bind-Value="ppmTask.JobCategory" class="form-control" required>
                        <option value="">...</option>
                        @foreach (var category in jobCategories)
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => ppmTask.JobCategory)" />
                </div>
            </div>

            <div class="form-group row mb-3">
                <label for="JobDescription" class="col-sm-3 col-form-label">Deskripsi Pekerjaan<span class="required">*</span></label>
                <div class="col-sm-9">
                    <InputTextArea id="JobDescription" @bind-Value="ppmTask.JobDescription" class="form-control" required />
                    <ValidationMessage For="@(() => ppmTask.JobDescription)" />
                </div>
            </div>

            <div class="form-group row mb-3">
                <label for="ImageBefore" class="col-sm-3 col-form-label">Foto Kondisi Awal<span class="required">*</span></label>
                <div class="col-sm-9">
                    @if (string.IsNullOrWhiteSpace(ppmTask.ImageBefore))
                    {
                        <InputFile id="ImageBefore" class="form-control"
                        accept=".jpg,.jpeg,.png"
                        OnChange="HandleFileUpload" />
                        <ValidationMessage For="@(() => ppmTask.ImageBefore)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(ppmTask.ImageBefore)" alt="Image Before"><br />
                            <button @onclick="HandleImageChange" type="button" class="btn btn-secondary btn-sm ms-3">Ubah Foto</button>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                        {
                            <div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
                        }
                    }
                </div>
            </div>

            <div class="form-group row mb-3">
                <label for="Document" class="col-sm-3 col-form-label">Dokumen (Optional)</label>
                <div class="col-sm-9">
                    @if (string.IsNullOrWhiteSpace(ppmTask.Document))
                    {
                        <InputFile id="Document" class="form-control"
                        accept=".pdf,.doc,.docx,.xls,.xlsx"
                        OnChange="HandleDocumentUpload" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <a href="@CreateFilePath(ppmTask.Document)" target="_blank">Lihat Dokumen</a>
                            <button @onclick="HandleDocumentChange" type="button" class="btn btn-secondary btn-sm ms-3">Ubah Dokumen</button>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                        {
                            <div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
                        }
                    }
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-12 text-end">
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <a href="/PPMList" class="btn btn-secondary ms-2">Kembali</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private PPMTask ppmTask = new PPMTask();
    private PPMTaskHistory ppmTaskHistory = new PPMTaskHistory();
    private User? userInfo;
    private List<string> jobCategories = new() { "Perbaikan", "Modifikasi", "Pemasangan Baru", "Verifikasi/Testing" };
    private string _webPPMRoot = string.Empty;
    private int PPMCount;

    // File upload related
    private string subFolderName = "PPM";
    private string imageFileCategory = "img";
    private string documentFileCategory = "doc";
    private string imageFolderName = "Image";
    private string documentFolderName = "Document";

    // Notification related
    private string? alertMessage;
    private string? logMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();

        try
        {
            _webPPMRoot = Configuration.GetValue<string>("WebPPMRoot") ?? "/";
        }
        catch (Exception ex)
        {
            alertMessage = "Gagal memuat konfigurasi '_webPPMRoot'. Hubungi administrator.";
            logMessage = $"Gagal memuat konfigurasi '_webPPMRoot'\nDetail :\n{ex}";
            ShowNotification(alertMessage, logMessage);
        }
    }

    private async Task LoadUserInfo()
    {
        if (authenticationStateTask != null)
        {
            var authenticationState = await authenticationStateTask;
            var user = authenticationState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("Id")?.Value;
                if (string.IsNullOrEmpty(userId))
                {
                    NavigationManager.NavigateTo("/"); // Redirect jika ID user tidak ditemukan
                    return;
                }

                try
                {
                    userInfo = await CRUDService.ReadSingleAsync<User, string>(userId);
                    if (userInfo != null)
                    {
                        ppmTask.CreatedBy = userInfo.Id;
                        ppmTask.PPMSection = userInfo.Section;
                    }
                    else
                    {
                        alertMessage = "Data pengguna tidak ditemukan. Harap login kembali.";
                        logMessage = $"User info for ID {userId} not found in DB.";
                        ShowNotification(alertMessage, logMessage);
                        NavigationManager.NavigateTo("/"); // Redirect jika userInfo null
                    }
                }
                catch (Exception ex)
                {
                    alertMessage = "Gagal memuat data pengguna. Hubungi administrator.";
                    logMessage = $"Error loading User: {ex.Message}";
                    ShowNotification(alertMessage, logMessage);
                    NavigationManager.NavigateTo("/"); // Redirect on error
                }
            }
            else
            {
                NavigationManager.NavigateTo("/"); // Redirect jika tidak terautentikasi
            }
        }
    }

    private async Task GetPPMTotal()
    {
        try
        {
            // Get All Data using CRUD Service
            var ppmList = await CRUDService.ReadAllAsync<PPMTask>(orderBy: q => q.OrderBy(p => p.TaskID));
            PPMCount = ppmList.Count();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading PPM: {ex.Message}");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await UploadService.FilesUpload(e.File, imageFolderName, subFolderName, imageFileCategory);
        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";
            ShowNotification(alertMessage, logMessage);
            return;
        }
        ppmTask.ImageBefore = UploadService.FilePath;
        // Notify EditContext that ImageBefore field has changed
        // This is crucial for validation to re-evaluate
        var fieldIdentifier = FieldIdentifier.Create(() => ppmTask.ImageBefore);
        EditContext? editContext = new EditContext(ppmTask); // Temporary EditContext for notification
        editContext.NotifyFieldChanged(fieldIdentifier);
    }

    private async Task HandleImageChange()
    {
        if (!string.IsNullOrWhiteSpace(ppmTask.ImageBefore))
        {
            // Logic to change file. This usually means allowing re-upload and deleting old one.
            // For simplicity here, we clear the path to re-enable InputFile
            ppmTask.ImageBefore = string.Empty;
            var fieldIdentifier = FieldIdentifier.Create(() => ppmTask.ImageBefore);
            EditContext? editContext = new EditContext(ppmTask);
            editContext.NotifyFieldChanged(fieldIdentifier);
            StateHasChanged(); // Force re-render to show InputFile
        }
    }

    private async Task HandleDocumentUpload(InputFileChangeEventArgs e)
    {
        await UploadService.FilesUpload(e.File, documentFolderName, subFolderName, documentFileCategory);
        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = $"Gagal upload dokumen.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload dokumen\nDetail :\n{UploadService.UploadErrorMessage}";
            ShowNotification(alertMessage, logMessage);
            return;
        }
        ppmTask.Document = UploadService.FilePath;
    }

    private async Task HandleDocumentChange()
    {
        if (!string.IsNullOrWhiteSpace(ppmTask.Document))
        {
            // Similar to image change, clear path to re-enable InputFile
            ppmTask.Document = string.Empty;
            StateHasChanged(); // Force re-render
        }
    }

    private string GetMonthRomansNumeral(int monthNumber)
    {
        switch (monthNumber)
        {
            case 1: return "I";
            case 2: return "II";
            case 3: return "III";
            case 4: return "IV";
            case 5: return "V";
            case 6: return "VI";
            case 7: return "VII";
            case 8: return "VIII";
            case 9: return "IX";
            case 10: return "X";
            case 11: return "XI";
            case 12: return "XII";
            default: return string.Empty; // Return Empty String
        }
    }


    private string GetRoleAbbreviation(string role)
    {
        switch (role)
        {
            case "Operation": return "OPS";
            case "Formalities": return "FRM";
            case "Security": return "SEC";
            case "HSE": return "HSE";
            case "HR/GA": return "HR-GA";
            default: return string.Empty; // Return Empty String
        }
    }

    private async Task HandleValidSubmit()
    {

        await GetPPMTotal();
        PPMCount = ++PPMCount;

        // Initialize PPMID
        ppmTask.PPMID = $"{PPMCount}/{GetRoleAbbreviation(ppmTask.PPMSection)}/{GetMonthRomansNumeral(DateTime.Now.Month)}/{DateTime.Now.ToString("yyyy")}";

        if (ppmTask.PPMSection == "Operation" || ppmTask.PPMSection == "HSE")
        {
            ppmTask.Level = PPMStatusLevel.Request; // Set Level 0
            
        }
        
        if (ppmTask.PPMSection == "Formalities" || ppmTask.PPMSection == "Security" || ppmTask.PPMSection == "HR/GA")
        {
            ppmTask.Level = PPMStatusLevel.ApprovedByManager; // Set Level 1

        }

        await CRUDService.CreateAsync(ppmTask);

        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            alertMessage = "Gagal menyimpan data PPM. Hubungi administrator.";
            logMessage = $"Gagal menyimpan data PPM\nDetail :\n{CRUDService.CRUDErrorMessage}";
            ShowNotification(alertMessage, logMessage);
            return;
        }

        // Create PPM Task History
        ppmTaskHistory.PPMID = ppmTask.PPMID;
        ppmTaskHistory.UpdateBy = userInfo.FullName;
        ppmTaskHistory.UpdateType = PPMStatus.Request.ToString();
        ppmTaskHistory.Description = $"{userInfo.FullName} membuat request PPM pada {DateTime.Now.ToString("dd-MMMM-yyyy")} pukul {DateTime.Now.ToString("HH:mm")}.";
        ppmTaskHistory.DateUpdated = DateTime.Now;

        await CRUDService.CreateAsync(ppmTaskHistory);

        NavigationManager.NavigateTo("/PPMList?status=CreateSuccess");
    }

    private void HandleInvalidSubmit()
    {
        alertMessage = "Validasi gagal. Harap periksa input Anda.";
        logMessage = "Form PPMAdd invalid.";
        ShowNotification(alertMessage, logMessage);
    }

    private string CreateFilePath(string relativePath)
    {
        if (relativePath != null)
        {
            return Path.Combine(_webPPMRoot, relativePath).Replace("\\", "/");
        }
        return string.Empty; // Return empty string instead of null for consistency
    }

    private async Task ShowNotification(string alert, string log)
    {
        await NotificationService.AlertMessage(alert);
        NotificationService.LogMessage(log);
    }
}