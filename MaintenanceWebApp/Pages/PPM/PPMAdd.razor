@page "/PPMAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.IO
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Supervisor")]

<div class="card">
    @* Header Formulir *@
    <div class="card-header bg-light border-primary">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a style="cursor: pointer;" @onclick="CancelAsync" class="nav-link" aria-label="Kembali">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Tambah PPM</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <EditForm Model="ppmTask" OnValidSubmit="HandleCreatePPM" OnInvalidSubmit="HandleInvalidSubmitAsync">
            <DataAnnotationsValidator />
            
            <div class="row">
                <div class="col-sm-12 mb-3">
                    <label for="JobCategory" class="col-form-label">Jenis Pekerjaan<span class="required">*</span></label>
                    <InputSelect id="JobCategory" @bind-Value="ppmTask.JobCategory" class="form-control">
                        <option value="">...</option>
                        @foreach (var category in JOB_CATEGORIES)
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                    @if (validationMessages.ContainsKey("JobCategory"))
                    {
                        <div class="text-danger mt-2">@validationMessages["JobCategory"]</div>
                    }
                </div>
                <div class="col-sm-12 mb-3">
                    <label for="JobDescription" class="col-form-label">Deskripsi Pekerjaan<span class="required">*</span></label>
                    <InputTextArea id="JobDescription" @bind-Value="ppmTask.JobDescription" class="form-control" />
                    @if (validationMessages.ContainsKey("JobDescription"))
                    {
                        <div class="text-danger mt-2">@validationMessages["JobDescription"]</div>
                    }
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12 mb-3">
                    <label for="ImageBefore" class="col-form-label">Foto Kondisi Awal<span class="required">*</span></label>
                    @if (string.IsNullOrWhiteSpace(ppmTask.ImageBefore))
                    {
                        <InputFile id="ImageBefore" class="form-control" accept=".jpg,.jpeg,.png" OnChange="HandleImageUploadAsync" />
                        <small class="form-text text-muted">Unggah foto kondisi awal (JPG, JPEG, PNG).</small>
                        <ValidationMessage For="@(() => ppmTask.ImageBefore)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(ppmTask.ImageBefore)" alt="Foto Kondisi Awal">
                            <button @onclick="HandleImageChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                    @if (validationMessages.ContainsKey("ImageBefore"))
                    {
                        <div class="text-danger mt-2">@validationMessages["ImageBefore"]</div>
                    }
                </div>
                <div class="col-sm-12 mb-3">
                    <label for="Document" class="col-form-label">Dokumen Pendukung</label>
                    @if (string.IsNullOrWhiteSpace(ppmTask.Document))
                    {
                        <InputFile id="Document" class="form-control" accept=".pdf,.doc,.docx,.xls,.xlsx" OnChange="HandleDocumentUploadAsync" />
                        <small class="form-text text-muted">Opsional: Unggah dokumen pendukung (Doc, XLS, PPT, PDF).</small>
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <a href="@CreateFilePath(ppmTask.Document)" target="_blank">Lihat Dokumen</a>
                            <button @onclick="HandleDocumentChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Dokumen</button>
                        </div>
                    }
                </div>
            </div>
            
            @* Tombol Aksi Formulir *@
            <div class="float-end mt-3">
                <button type="button" class="btn btn-secondary me-2" @onclick="CancelAsync">Batal</button>
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // State Halaman
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private PPMTask ppmTask = new();
    private User? userInfo;
    private DotNetObjectReference<PPMAdd> dotNetHelper = default!;
    private Dictionary<string, string> validationMessages = new();

    // Konstanta
    private const string SUB_FOLDER_NAME = "PPM";
    private const string IMAGE_FILE_CATEGORY = "img";
    private const string DOCUMENT_FILE_CATEGORY = "doc";
    private const string IMAGE_FOLDER_NAME = "Image";
    private const string DOCUMENT_FOLDER_NAME = "Document";
    private string _webPpmRoot = string.Empty;

    // Form Properties
    private static readonly List<string> JOB_CATEGORIES = new() { "Perbaikan", "Modifikasi", "Pemasangan Baru", "Verifikasi/Testing" };

    // Metode Lifecycle Blazor
    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfoAsync();
        await LoadConfigurationAsync();

        if (userInfo != null)
        {
            ppmTask.CreatedBy = userInfo.Id;
            ppmTask.PPMSection = userInfo.Section;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    // Metode Dispose untuk membersihkan sumber daya
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }

    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadConfigurationAsync()
    {
        try
        {
            _webPpmRoot = Configuration.GetValue<string>("WebPPMRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi `WebPPMRoot`. Silakan hubungi Administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi `WebPPMRoot`: {ex.Message}");
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task LoadUserInfoAsync()
    {
        if (authenticationStateTask == null) return;
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("Id")?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                await NotificationService.AlertMessage("ID pengguna tidak dapat ditemukan. Harap login kembali.");
                NavigationManager.NavigateTo("/");
                return;
            }

            try
            {
                userInfo = await CRUDService.ReadSingleAsync<User, string>(userId);
                if (userInfo == null)
                {
                    await NotificationService.AlertMessage("Data pengguna tidak ditemukan. Harap login kembali.");
                    NavigationManager.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                await NotificationService.AlertMessage("Gagal memuat data pengguna. Silakan hubungi Administrator.");
                NotificationService.LogMessage($"Pengecualian saat memuat data pengguna: {ex.Message}");
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    // Penanganan Submit Formulir
    private async Task HandleCreatePPM()
    {
        if (!ValidateForm())
        {
            await NotificationService.AlertMessage("Cek kembali input. Terdapat isian yang tidak valid.");
            return;
        }
        
        ppmTask.PPMID = CreatePPMID();
        ppmTask.Level = (ppmTask.PPMSection == "Operation" || ppmTask.PPMSection == "HSE")
            ? PPMStatusLevel.Request
            : PPMStatusLevel.ApprovedByManager;

        // Menyimpan data menggunakan CRUDService
        await CRUDService.CreateAsync(ppmTask);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan data PPM. Silakan hubungi Administrator.");
            NotificationService.LogMessage($"Gagal menyimpan data PPM. Kesalahan: {CRUDService.CRUDErrorMessage}");
            return;
        }

        // Buat riwayat PPM baru
        var ppmTaskHistory = new PPMTaskHistory
        {
            PPMID = ppmTask.TaskID,
            UpdateBy = userInfo?.FullName ?? "Pengguna Tidak Dikenal",
            UpdateType = PPMStatus.Request.ToString(),
            Description = $"{userInfo?.FullName ?? "Pengguna Tidak Dikenal"} membuat permintaan PPM.",
            DateUpdated = DateTime.Now
        };
        await CRUDService.CreateAsync(ppmTaskHistory);

        NavigationManager.NavigateTo("./PPMList?status=CreateSuccess");
    }

    private Task HandleInvalidSubmitAsync()
    {
        return NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
    }
    
    private bool ValidateForm()
    {
        validationMessages.Clear();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(ppmTask.JobCategory))
            {
            validationMessages["JobCategory"] = "Jenis Pekerjaan harus dipilih.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(ppmTask.JobDescription))
        {
            validationMessages["JobDescription"] = "Deskripsi Pekerjaan harus diisi.";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(ppmTask.ImageBefore))
        {
            validationMessages["ImageBefore"] = "Foto Kondisi Awal harus diunggah.";
            isValid = false;
        }

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            validationMessages["UploadError"] = UploadService.UploadErrorMessage;
            isValid = false;
        }

        return isValid;
    }

    // Penanganan Unggahan & Perubahan File
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e, string folderName, string fileType)
    {
        try
        {
            await UploadService.FilesUpload(e.File, folderName, SUB_FOLDER_NAME, fileType);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah berkas. Detail: {UploadService.UploadErrorMessage}");
                NotificationService.LogMessage($"Pengunggahan berkas gagal: {UploadService.UploadErrorMessage}");
                return;
            }

            if (fileType == IMAGE_FILE_CATEGORY)
            {
                ppmTask.ImageBefore = UploadService.FilePath;
            }
            else if (fileType == DOCUMENT_FILE_CATEGORY)
            {
                ppmTask.Document = UploadService.FilePath;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file: {ex.Message}");
        }
        StateHasChanged();
    }

    private Task HandleImageUploadAsync(InputFileChangeEventArgs e) => HandleFileUploadAsync(e, IMAGE_FOLDER_NAME, IMAGE_FILE_CATEGORY);
    private Task HandleDocumentUploadAsync(InputFileChangeEventArgs e) => HandleFileUploadAsync(e, DOCUMENT_FOLDER_NAME, DOCUMENT_FILE_CATEGORY);

    private async Task HandleFileChangeAsync(string? filePath, string fileType)
    {
        if (string.IsNullOrWhiteSpace(filePath)) return;
        
        try
        {
            await UploadService.FileChange(filePath, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengganti berkas. Silakan coba lagi.");
                NotificationService.LogMessage($"Penggantian berkas gagal: {UploadService.UploadErrorMessage}");
                return;
            }

            if (fileType == IMAGE_FILE_CATEGORY)
            {
                ppmTask.ImageBefore = null;
            }
            else if (fileType == DOCUMENT_FILE_CATEGORY)
            {
                ppmTask.Document = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengganti file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengganti file: {ex.Message}");
        }
        StateHasChanged();
    }

    private Task HandleImageChangeAsync() => HandleFileChangeAsync(ppmTask.ImageBefore, IMAGE_FILE_CATEGORY);
    private Task HandleDocumentChangeAsync() => HandleFileChangeAsync(ppmTask.Document, DOCUMENT_FILE_CATEGORY);
    
    private string CreatePPMID()
    {
        var sectionAbbreviation = ppmTask.PPMSection switch
        {
            "Operation" => "OPS",
            "Formalities" => "FRM",
            "Security" => "SEC",
            "HSE" => "HSE",
            "HR/GA" => "HR-GA",
            _ => string.Empty
        };

        var monthRomanNumeral = DateTime.Now.Month switch
        {
            1 => "I",
            2 => "II",
            3 => "III",
            4 => "IV",
            5 => "V",
            6 => "VI",
            7 => "VII",
            8 => "VIII",
            9 => "IX",
            10 => "X",
            11 => "XI",
            12 => "XII",
            _ => string.Empty
        };

        return $"REQ/{sectionAbbreviation}/{monthRomanNumeral}/{DateTime.Now.ToString("yyyy")}";
    }

    private string CreateFilePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(_webPpmRoot, relativePath).Replace("\\", "/");
    }

    private async Task CancelAsync()
    {
        // Logika untuk menghapus file yang diunggah jika pengguna membatalkan
        if (!string.IsNullOrWhiteSpace(ppmTask.Document))
        {
            await UploadService.FileChange(ppmTask.Document, SUB_FOLDER_NAME);
        }
        if (!string.IsNullOrWhiteSpace(ppmTask.ImageBefore))
        {
            await UploadService.FileChange(ppmTask.ImageBefore, SUB_FOLDER_NAME);
        }
        
        await JSRuntime.InvokeVoidAsync("blazorInterop.replaceHistoryState");

        NavigationManager.NavigateTo("./PPMList");
    }
}