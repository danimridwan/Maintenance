@page "/PPMAdd"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using UploadFilesLibrary
@using Microsoft.Data.SqlClient
@inject IDbContextFactory<DataContext> DbContextFactory
@inject DataContext DataContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject ISqlDataAccess SqlDataAccess

<EditForm Model="ppmtask" OnValidSubmit="CreatePPM">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-light border-primary">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                    <a href="PPMList" class="nav-link"><span class="oi oi-chevron-left"></span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active">PPM Form</a>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="form-group row">
                <div class="col-sm-12">
                    <label for="Requestor" class="col-form-label">Requestor <span class="required">*</span></label>
                    <InputText id="Requestor" @bind-Value="ppmtask.Requestor" class="form-control" />
                </div>
                <div class="col-sm-12">
                    <label for="Division" class="col-form-label">Division <span class="required">*</span></label>
                    <InputText id="Division" @bind-Value="ppmtask.Division" class="form-control" />
                </div>
                <div class="col-sm-12">
                    <label for="JobDescription" class="col-form-label">Job Description <span class="required">*</span></label>
                    <InputTextArea rows="4" id="JobDescription" @bind-Value="ppmtask.JobDesc" class="form-control" />
                </div>
                <div class="col-sm-12">
                    <label for="WorkType" class="col-form-label">Work Type <span class="required">*</span></label>
                    <InputText id="WorkType" @bind-Value="ppmtask.WorkType" class="form-control" />
                </div>
                <div class="col-sm-12">
                    <label for="Photo" class="col-form-label">Photo</label>
                    <InputFile id="Photo" class="form-control"
                    accept=".jpg,.jpeg,.png"
                    OnChange="HandleFileUpload" />
                </div>
                <div class="col-sm-12">
                    <label for="SupportingDocument" class="col-form-label">Supporting Document</label>
                    <InputFile id="SupportingDocument" class="form-control"
                    accept=".jpg,.jpeg,.png"
                    OnChange="HandleFileUpload" />
                </div>
                <div class="col-sm-12">
                    <label for="Notes" class="col-form-label">Notes <span class="required">*</span></label>
                    <InputTextArea rows="4" id="Notes" @bind-Value="ppmtask.Notes" class="form-control" />
                </div>
                <div class="col-sm-12">
                    <label for="TargetDate" class="col-form-label">Target Completion Date <span class="required">*</span></label>
                    <InputDate id="TargetDate" @bind-Value="ppmtask.TargetDate" class="form-control" />
                </div>
            </div>

            <div class="float-end mt-3">
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>

        </div>
    </div>
</EditForm>

@code {
    private PPMTask ppmtask = new();
    private Dictionary<string, string> errors = new();
    private const long MaxFileSize = 3 * 1024 * 1024; // 3MB in bytes

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        errors.Clear();
        var file = e.File;

        if (file == null)
        {
            ppmtask.Photo = null;
            return;
        }

        if (file.Size > MaxFileSize)
        {
            errors["File"] = $"File size exceeds maximum limit of {MaxFileSize / (1024 * 1024)}MB";
            await ShowAlert(string.Join("\n", errors));
            return;
        }

        try
        {
            var basePath = Configuration["FileStoragePPM"];
            var folder = "Images";
            var directory = Path.Combine(basePath, folder);

            Directory.CreateDirectory(directory);

            var extension = Path.GetExtension(file.Name);
            var newFileName = $"{Guid.NewGuid()}{extension}";
            var fullPath = Path.Combine(directory, newFileName);

            await using var stream = file.OpenReadStream(MaxFileSize);
            await using var fileStream = new FileStream(fullPath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            ppmtask.Photo = Path.Combine(folder, newFileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"File upload error: {ex.Message}");
            errors["File"] = "Failed to upload file. Please try again.";
            await ShowAlert(string.Join("\n", errors));
        }
    }

    private async Task CreatePPM()
    {
        if (!errors.Any())
        {
            try
            {
                await using var db = await DbContextFactory.CreateDbContextAsync();
                db.PPMTasks.Add(ppmtask);
                await db.SaveChangesAsync();

                NavigationManager.NavigateTo("/PPMList");
            }
            catch (DbUpdateException ex)
            {
                var errorMessage = ex.InnerException switch
                {
                    SqlException sqlEx => $"Database error: {sqlEx.Message}",
                    _ => ex.Message
                };

                errors["Database"] = errorMessage;
                Console.WriteLine($"Database error: {errorMessage}");
                await ShowAlert(string.Join("\n", errors));
            }
            catch (Exception ex)
            {
                errors["General"] = "An unexpected error occurred";
                Console.WriteLine($"Error creating PPM: {ex.Message}");
                await ShowAlert(string.Join("\n", errors));
            }
        }
    }

    private async Task ShowAlert(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}