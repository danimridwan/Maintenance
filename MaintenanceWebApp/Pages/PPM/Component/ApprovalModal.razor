@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using System.Security.Claims
@using System.IO

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService
@inject PPMWorkflowService PPMWorkflowService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<div class="modal fade" id="approvalModal" tabindex="-1" role="dialog" aria-labelledby="approvalModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approvalModalLabel">Konfirmasi Aksi PPM</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup" @onclick="HandleCancel"></button>
            </div>
            @if (PpmTask != null && CurrentUser != null)
            {
                <div class="alert alert-warning d-flex align-items-start" role="alert">
                    <div class="small">
                        <strong>Perhatian:</strong><br />
                        Pastikan semua data yang Anda masukkan sudah benar. Data yang dikirim bersifat <strong>final</strong> dan tidak dapat diubah pada tahap selanjutnya.
                    </div>
                </div>

                <div class="modal-body">
                    <EditForm Model="PpmTask" OnValidSubmit="HandleApprovalSubmit">
                        <DataAnnotationsValidator />

                        <div class="row g-3">
                            @* --- Logika UI Kondisional Berdasarkan Peran dan Status PPM --- *@

                            @if (CanApproveWithTargetDate())
                            {
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputDate id="TargetDate" @bind-Value="PpmTask.TargetDate" class="form-control" placeholder="Target Penyelesaian" min="@todayDate" required />
                                        <label for="TargetDate">Target Penyelesaian<span class="required">*</span></label>
                                        <ValidationMessage For="@(() => PpmTask.TargetDate)" />
                                    </div>
                                </div>
                            }
                            else if (CanApproveWithMaintenancePIC())
                            {
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputSelect id="KategoriMaintenance" @bind-Value="SelectedMaintenanceCategory" class="form-select">
                                            <option value="">Pilih Kategori</option>
                                            @foreach (var cat in MaintenanceCategories)
                                            {
                                                <option value="@cat">@cat</option>
                                            }
                                        </InputSelect>
                                        <label for="KategoriMaintenance">Kategori Maintenance<span class="required">*</span></label>
                                        <ValidationMessage For="@(() => SelectedMaintenanceCategory)" />
                                    </div>
                                </div>

                                @if (MaintenancePICs != null && MaintenancePICs.Any())
                                {
                                    <div class="col-12">
                                        <div class="form-floating mb-3">
                                            <InputSelect id="MaintenancePIC" @bind-Value="PpmTask.MaintenancePIC" class="form-select">
                                                <option value="" selected>Pilih Penanggung Jawab</option>
                                                @foreach (var maintenance in MaintenancePICs)
                                                {
                                                    <option value="@maintenance.FullName">@maintenance.FullName</option>
                                                }
                                            </InputSelect>
                                            <label for="MaintenancePIC">Penanggung Jawab Maintenance<span class="required">*</span></label>
                                            <ValidationMessage For="@(() => PpmTask.MaintenancePIC)" />
                                        </div>
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(SelectedMaintenanceCategory))
                                {
                                    <div class="col-12 mb-3">
                                        <p class="text-danger">Tidak ada personel yang tersedia untuk kategori @SelectedMaintenanceCategory</p>
                                    </div>
                                }
                            }
                            else if (CanComplete())
                            {
                                <div class="col-12">
                                    <p><b>Target Penyelesaian : </b>@(PpmTask.TargetDate?.ToShortDateString() ?? "N/A")</p>
                                    <p><b>Kesesuaian Terhadap Target : </b>@(IsTargetDatePassed() ? "Tidak" : "Ya")</p>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputTextArea id="EvaluasiPelaksanaan" @bind-Value="PpmTask.EvaluationNote" class="form-control" placeholder="Evaluasi Pelaksanaan" style="height: 100px;" />
                                        <label for="EvaluasiPelaksanaan">Evaluasi Pelaksanaan</label>
                                        <ValidationMessage For="@(() => PpmTask.EvaluationNote)" />
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputTextArea id="CatatanMTD" @bind-Value="PpmTask.MTDNote" class="form-control" placeholder="Catatan MTD" style="height: 100px;" />
                                        <label for="CatatanMTD">Catatan MTD</label>
                                        <ValidationMessage For="@(() => PpmTask.MTDNote)" />
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="mb-3">
                                        <label for="Foto" class="form-label">Foto Kondisi Akhir<span class="required">*</span></label>
                                        @if (string.IsNullOrEmpty(PpmTask.ImageAfter))
                                        {
                                            <InputFile id="Foto" class="form-control" accept=".jpg,.jpeg,.png" OnChange="HandleFileUpload" />
                                            <ValidationMessage For="@(() => PpmTask.ImageAfter)" />
                                        }
                                        else
                                        {
                                            <div class="d-flex align-items-center mt-2">
                                                <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(PpmTask.ImageAfter)" alt="Image After">
                                                <button @onclick="() => HandleFileChange(PpmTask.ImageAfter)" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <hr />
                                <div class="col-12 row">
                                    <div class="col-6"><b>Maintenance Item</b></div>
                                    <div class="col-6 d-flex justify-content-end align-items-center">
                                        @* Tombol ini akan membuka InputMaintenanceHistoryModal yang ada di parent *@
                                        <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#inputMaintenanceHistoryModal">
                                            <b>Tambah</b>
                                        </button>
                                    </div>
                                </div>
                                <div class="col-12">
                                    @if (InventoryMaintenanceHistoryList != null && InventoryMaintenanceHistoryList.Any())
                                    {
                                        <table class="table table-striped table-hover table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>No</th>
                                                    <th>Kategori</th>
                                                    <th>Deskripsi</th>
                                                    <th>Aksi</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{
                                                    int index = 1;
                                                }
                                                @foreach (var history in InventoryMaintenanceHistoryList)
                                                {
                                                    <tr>
                                                        <td>@(index++)</td>
                                                        <td>@history.MaintenanceCategory</td>
                                                        <td>
                                                            @{
                                                                string descriptionText = history.Description ?? string.Empty;
                                                                const int maxLength = 25;
                                                                string displayedText = descriptionText.Length > maxLength ? $"{descriptionText.Substring(0, maxLength)}..." : descriptionText;
                                                            }
                                                            @displayedText
                                                        </td>
                                                        <td>
                                                            <button class="btn btn-danger btn-sm" type="button" title="Hapus Riwayat Item" @onclick="@(() => DeleteSelectedHistory(history))">
                                                                <span class="oi oi-trash"></span>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                    else
                                    {
                                        <p class="text-center text-muted">Belum ada riwayat pemeliharaan. Setiap item yang diganti atau diperbaiki akan tercatat di sini.</p>
                                    }
                                </div>
                            }
                            else if (CanCheckAndComplete())
                            {
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputTextArea id="CatatanPemohon" @bind-Value="PpmTask.RequestorNote" class="form-control" placeholder="Catatan" style="height: 100px;" />
                                        <label for="CatatanPemohon">Catatan</label>
                                        <ValidationMessage For="@(() => PpmTask.RequestorNote)" />
                                    </div>
                                </div>
                                <div class="col-12 mb-3">
                                    <p>Anda ingin menyetujui PPM ini sebagai selesai?</p>
                                </div>
                            }
                            else
                            {
                                <div class="col-12 mt-3">
                                    <p>Anda ingin menyetujui PPM ini?</p>
                                </div>
                            }
                        </div>

                        <div class="modal-footer mt-4">
                            <button @onclick="HandleCancel" type="button" class="btn btn-secondary">Batal</button>
                            <button type="submit" class="btn btn-success">
                                @(IsMaintenanceOnProgress ? "Selesaikan" : "Setuju")
                            </button>
                        </div>
                    </EditForm>
                </div>

                <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                    </symbol>
                </svg>
            }
        </div>
    </div>
</div>

@code {
    // --- Parameter dari Komponen Induk ---
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Parameter] public PPMTask? PpmTask { get; set; }
    [Parameter] public User? CurrentUser { get; set; }
    [Parameter] public List<InventoryMaintenanceHistory>? InventoryMaintenanceHistoryList { get; set; }
    [Parameter] public List<User>? MaintenancePICs { get; set; }
    [Parameter] public List<string> MaintenanceCategories { get; set; } = new();

    // --- Parameter Otorisasi dari Induk ---
    [Parameter] public bool IsSupervisor { get; set; }
    [Parameter] public bool IsManager { get; set; }
    [Parameter] public bool IsTerminalManager { get; set; }
    [Parameter] public bool IsMaintenanceSupervisor { get; set; }
    [Parameter] public bool IsMaintenance { get; set; }

    // --- Event Callbacks ke Komponen Induk ---
    [Parameter] public EventCallback<string> OnMaintenanceCategoryChanged { get; set; }
    [Parameter] public EventCallback<InventoryMaintenanceHistory> OnDeleteHistory { get; set; }
    [Parameter] public EventCallback OnSubmitSuccess { get; set; }
    [Parameter] public EventCallback<string> OnInventoryMaintenanceHistoryChanged { get; set; }

    // --- Properti Internal Komponen ---
    private int totalApprovedPPM;
    private string? _selectedMaintenanceCategory;
    private readonly string todayDate = DateTime.Now.ToString("yyyy-MM-dd");
    private readonly string subFolderName = "PPM";
    private readonly string folderName = "Image";

    private string? SelectedMaintenanceCategory
    {
        get => _selectedMaintenanceCategory;
        set
        {
            if (_selectedMaintenanceCategory != value)
            {
                _selectedMaintenanceCategory = value;
                if (PpmTask != null) PpmTask.MaintenancePIC = null;
                // Beri tahu induk bahwa kategori telah berubah
                OnMaintenanceCategoryChanged.InvokeAsync(value);
            }
        }
    }

    // --- Logika Otorisasi (Sekarang Terenkapsulasi) ---
    private bool CanApproveWithTargetDate() => IsTerminalManager && PpmTask?.Level == PPMStatusLevel.ApprovedByManager;
    private bool CanApproveWithMaintenancePIC() => IsMaintenanceSupervisor && PpmTask?.Level == PPMStatusLevel.ApprovedByTerminalManager;
    private bool CanComplete() => IsMaintenance && PpmTask?.MaintenancePIC == CurrentUser?.FullName && PpmTask?.Level == PPMStatusLevel.OnProgress;
    private bool CanCheckAndComplete() => IsSupervisor && PpmTask?.Level == PPMStatusLevel.Checking;
    private bool IsMaintenanceOnProgress => IsMaintenance && PpmTask?.Level == PPMStatusLevel.OnProgress;
    private bool IsTargetDatePassed() => PpmTask?.TargetDate != null && DateOnly.FromDateTime(DateTime.Today) > PpmTask.TargetDate.Value;

    // --- Penanganan Form Submit ---
    private async Task HandleApprovalSubmit()
    {
        if (PpmTask == null || authenticationStateTask == null) return;

        var authState = await authenticationStateTask;
        var userPrincipal = authState.User;

        // Menetapkan PPM ID
        if (PpmTask.Level == PPMStatusLevel.ApprovedByTerminalManager)
        {
            var month = DateTime.Now;
            GetApprovedPPMTotal();
            totalApprovedPPM++;
            PpmTask.PPMID = $"{totalApprovedPPM}/{GetRoleAbbreviation(PpmTask.PPMSection)}/{GetMonthRomansNumeral(month.Month)}/{DateTime.Now.ToString("yyyy")}";
        }

        // Logika untuk menentukan TargetCompletion
        if (PpmTask.Level == PPMStatusLevel.OnProgress)
        {
            PpmTask.TargetCompletion = !IsTargetDatePassed();
        }

        // Menetapkan kategori maintenance jika dipilih
        if (!string.IsNullOrEmpty(SelectedMaintenanceCategory))
        {
            PpmTask.MaintenanceCategory = SelectedMaintenanceCategory;
        }

        // Memanggil service untuk memproses alur kerja
        var result = await PPMWorkflowService.ProcessPPMAction(PpmTask, userPrincipal, "Approve");
        if (result.IsSuccess)
        {
            // Buat entri riwayat baru
            await UploadNewPPMHistory("Approve");
            await JSRuntime.InvokeVoidAsync("hideModal", "approvalModal");
            // Beri tahu induk bahwa proses berhasil
            await OnSubmitSuccess.InvokeAsync();
        }
        else
        {
            await NotificationService.AlertMessage(result.ErrorMessage);
        }
    }

    // --- Metode Helper ---
    private async Task UploadNewPPMHistory(string actionType)
    {
        if (PpmTask == null || CurrentUser == null) return;
        var newPpmHistory = new PPMTaskHistory
            {
                PPMID = PpmTask.TaskID,
                UpdateBy = CurrentUser.FullName,
                DateUpdated = DateTime.Now
            };

        // Logika deskripsi riwayat...
        if (PpmTask.Level == PPMStatusLevel.Request || PpmTask.Level == PPMStatusLevel.ApprovedByManager) { newPpmHistory.UpdateType = "Approve"; newPpmHistory.Description = $"{CurrentUser.FullName} menyetujui PPM."; }
        else if (PpmTask.Level == PPMStatusLevel.ApprovedByTerminalManager) { newPpmHistory.UpdateType = "Assign"; newPpmHistory.Description = $"{CurrentUser.FullName} menugaskan {PpmTask.MaintenancePIC} dari bagian {PpmTask.MaintenanceCategory} sebagai PIC."; }
        else if (PpmTask.Level == PPMStatusLevel.OnProgress) { newPpmHistory.UpdateType = "Report"; newPpmHistory.Description = $"{CurrentUser.FullName} melaporkan penyelesaian PPM."; }
        else if (PpmTask.Level == PPMStatusLevel.Checking) { newPpmHistory.UpdateType = "Completion"; newPpmHistory.Description = $"{CurrentUser.FullName} sudah melakukan pengecekan dan menyelesaikan PPM."; }

        await CRUDService.CreateAsync(newPpmHistory);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await UploadService.FilesUpload(e.File, folderName, subFolderName, "img");
        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            await NotificationService.AlertMessage($"Gagal upload gambar: {UploadService.UploadErrorMessage}");
            PpmTask.ImageAfter = null;
            return;
        }
        PpmTask.ImageAfter = UploadService.FilePath;
    }

    private async Task HandleFileChange(string photo)
    {
        if (!string.IsNullOrWhiteSpace(photo))
        {
            await UploadService.FileChange(photo, subFolderName);
            PpmTask.ImageAfter = null;
        }
    }

    private async Task HandleCancel()
    {
        await CleanUpUnsavedFiles();

        if (InventoryMaintenanceHistoryList != null && InventoryMaintenanceHistoryList.Any() && PpmTask != null)
        {
            await CRUDService.DeleteByConditionAsync<InventoryMaintenanceHistory>(history => history.PPMId == PpmTask.PPMID);
            await OnInventoryMaintenanceHistoryChanged.InvokeAsync();
        }

        //await JSRuntime.InvokeVoidAsync("blazorInterop.enableBackButton");
        await JSRuntime.InvokeVoidAsync("hideModal", "approvalModal");
    }

    private async Task CleanUpUnsavedFiles()
    {
        if (!string.IsNullOrWhiteSpace(PpmTask.ImageAfter) && PpmTask.Level == PPMStatusLevel.OnProgress)
        {
            await UploadService.FileChange(PpmTask.ImageAfter, subFolderName);
            PpmTask.ImageAfter = null;
        }
        
    }

    private async Task DeleteSelectedHistory(InventoryMaintenanceHistory history)
    {
        await OnDeleteHistory.InvokeAsync(history);
    }

    private string CreateFilePath(string? relativePath)
    {
        var webRoot = Configuration.GetValue<string>("WebPPMRoot") ?? "/";
        return string.IsNullOrWhiteSpace(relativePath) ? "" : Path.Combine(webRoot, relativePath).Replace("\\", "/");
    }

    private async Task GetApprovedPPMTotal()
    {
        try
        {
            // Get All Data using CRUD Service
            var approvedPpmList = await CRUDService.ReadAllAsync<PPMTask>(filter: p => !p.PPMID.Contains("REQ") && !p.PPMID.Contains("REJ"));
            totalApprovedPPM = approvedPpmList.Count();
        }
        catch (Exception ex)
        {
            NotificationService.AlertMessage($"Tidak dapat memuat data approved PPM. Detail: {ex}");
        }
    }

    private string GetRoleAbbreviation(string role)
    {
        switch (role)
        {
            case "Operation": return "OPS";
            case "Formalities": return "FRM";
            case "Security": return "SEC";
            case "HSE": return "HSE";
            case "HR/GA": return "HR-GA";
            default: return string.Empty; // Return Empty String
        }
    }

    private string GetMonthRomansNumeral(int monthNumber)
    {
        switch (monthNumber)
        {
            case 1: return "I";
            case 2: return "II";
            case 3: return "III";
            case 4: return "IV";
            case 5: return "V";
            case 6: return "VI";
            case 7: return "VII";
            case 8: return "VIII";
            case 9: return "IX";
            case 10: return "X";
            case 11: return "XI";
            case 12: return "XII";
            default: return string.Empty; // Return Empty String
        }
    }
}