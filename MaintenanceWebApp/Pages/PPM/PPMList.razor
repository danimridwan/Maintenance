@page "/PPMList"
@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using System.Linq.Expressions
@inject NavigationManager NavigationManager
@implements IDisposable

@* Services *@
@inject CRUDService CrudService
@inject NotificationService NotificationService
@inject UrlStatusService UrlStatusService
@inject TableService TableService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Supervisor, Manager, Terminal Manager, Maintenance Supervisor, Maintenance")]

@* Komponen Daftar Breather Valve *@
<div class="card p-3">
    @* Notifikasi Status *@
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="container px-0">
            <div style="padding: 10px;" class="alert alert-success alert-dismissible fade show" role="alert">
                @statusMessage
                <button style="background-color: transparent; border: transparent; float: right; z-index: 0; padding: 1rem;" type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Tutup"></button>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-sm-5 form-group">
            <h5 class="mb-2 display-6">PPM</h5>
            @if (HasAnyPPM)
            {
                <div class="d-inline-flex align-items-center gap-2 mt-2">
                    <label class="mb-0">
                        Jumlah per Halaman:
                    </label>
                    <select class="form-select form-select-sm w-auto" @bind="pagination.ItemsPerPage">
                        <option>10</option>
                        <option>20</option>
                        @if (PpmCount <= MaxItemsPerPageAll)
                        {
                            <option value="@PpmCount">
                                Semua (@PpmCount)
                            </option>
                        }
                    </select>
                </div>
            }
        </div>

        @if (canAddPPM)
        {
            <div class="col-sm-7 d-flex justify-content-end align-items-center">
                <button class="btn btn-primary" @onclick="NavigateToAddPPM">
                    + Tambah PPM
                </button>
            </div>
        }
    </div>

    @* Table Select *@
    <div class="row align-items-center mb-3 mt-3">
        <div class="col-md-8">
            <div class="btn-group" role="group">
                <button @onclick="() => SetTableChoice(TableChoice.All)"
                        class="btn @(tableChoice == TableChoice.All ? "btn-outline-primary active" : "btn-outline-secondary")">
                    Semua
                </button>
                @if (!userPermissions.IsAdmin)
                {
                    <button @onclick="() => SetTableChoice(TableChoice.Approval)"
                            class="btn @(tableChoice == TableChoice.Approval ? "btn-outline-primary active" : "btn-outline-secondary") ms-2">
                        @(userPermissions.IsMaintenance ? "On Going" : "Butuh Persetujuan")
                    </button>
                }
            </div>
        </div>

        @* Kotak Pencarian *@
        <div class="col-md-4">
            @if (HasAnyPPM)
            {
                <input type="search" class="form-control" placeholder="Cari ID PPM atau Jenis Pekerjaan..."
                   @bind="searchFilter" @bind:event="oninput" />
            }
        </div>
    </div>

    <div>
    @* Tampilan Data PPM *@
        @if (isLoading)
        {
            @* Memuat Data *@
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Memuat...</span>
                </div>
                <p>Memuat Data PPM...</p>
            </div>
        }
        else if (!HasAnyPPM)
        {
            @* Tidak Ada Data *@
            <hr />
            <div class="text-center py-3">
                <p>Tidak ada data PPM ditemukan.</p>
                @if (!string.IsNullOrEmpty(searchFilter))
                {
                    <button class="btn btn-link" @onclick="ClearFilter">Hapus Filter</button>
                }
            </div>
        }
        else
        {
            @* Tabel Data PPM *@
            <QuickGrid Items="@(CurrentPpmData)" Virtualize="false" Pagination="@pagination" Class="table table-striped table-hover table-bordered">
                <TemplateColumn Title="ID" Sortable="true">
                    <a class="text-decoration-none fw-semibold text-primary" style="cursor:pointer;"
                       @onclick="() => NavigateToPPM(context, PpmPage.Info)">
                        @context.PPMID
                    </a>
                </TemplateColumn>

                <PropertyColumn Property="@(ppm => ppm.JobCategory)" Title="Jenis Pekerjaan" Sortable="true" />
                <PropertyColumn Property="@(ppm => ppm.DateCreated.ToString("dd-MM-yyyy"))" Title="Tanggal" Sortable="true" />

                <TemplateColumn Title="Status" Sortable="true">
                    <span class="badge @GetBadgeClass(context)">
                        @GetBadgeText(context)
                    </span>
                </TemplateColumn>

            </QuickGrid>

            <Paginator State="@pagination" />
        }
    </div>
</div>

@code {
    // Cascading Parameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    // Properti State
    private IQueryable<PPMTask>? _allPpm;
    private User? userInfo;
    private bool isLoading = true;
    private string statusMessage = string.Empty;

    // Konstanta
    private const int MaxItemsPerPageAll = 50;
    
    // Pagination State
    private PaginationState pagination = new() { ItemsPerPage = 10 };
    private enum PpmPage { Info, Add }

    // Properti Terkomputasi
    private bool HasAnyPPM => PpmCount > 0;
    private int PpmCount => tableChoice == TableChoice.All ? (_allPpm?.Count() ?? 0) : (_filteredApprovalPpm?.Count() ?? 0);

    // Properti untuk Filtering
    private string searchFilter = string.Empty;

    private IQueryable<PPMTask> CurrentPpmData =>
        tableChoice == TableChoice.All
            ? ApplyFilter(_allPpm)
            : ApplyFilter(_filteredApprovalPpm);

    private IQueryable<PPMTask>? _filteredApprovalPpm;
    private TableChoice tableChoice = TableChoice.All;
    private enum TableChoice { All, Approval }

    // Properti Otorisasi
    private UserPermissions userPermissions = new();
    private class UserPermissions
    {
        public bool IsSupervisor { get; set; }
        public bool IsManager { get; set; }
        public bool IsTerminalManager { get; set; }
        public bool IsMaintenanceSupervisor { get; set; }
        public bool IsMaintenance { get; set; }
        public bool IsAdmin { get; set; }
    }
    private bool canAddPPM => userPermissions.IsSupervisor;

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadUserPermissionsAndInfoAsync();

        if (userInfo == null)
        {
            // Jika info pengguna tidak dapat dimuat, navigasi ke halaman utama
            NavigationManager.NavigateTo("./");
            return;
        }

        await LoadPpmDataAsync();
        LoadUrlStatus();
        isLoading = false;
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadUserPermissionsAndInfoAsync()
    {
        if (authenticationStateTask == null) return;
        var authenticationState = await authenticationStateTask;
        var userPrincipal = authenticationState.User;
        var userId = userPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? userPrincipal.FindFirst("Id")?.Value;

        if (userPrincipal.Identity?.IsAuthenticated == true && !string.IsNullOrEmpty(userId))
        {
            // Menetapkan peran (roles) pengguna
            userPermissions.IsSupervisor = userPrincipal.IsInRole("Supervisor");
            userPermissions.IsManager = userPrincipal.IsInRole("Manager");
            userPermissions.IsTerminalManager = userPrincipal.IsInRole("Terminal Manager");
            userPermissions.IsMaintenanceSupervisor = userPrincipal.IsInRole("Maintenance Supervisor");
            userPermissions.IsMaintenance = userPrincipal.IsInRole("Maintenance");
            userPermissions.IsAdmin = userPrincipal.IsInRole("Admin");

            try
            {
                // Memuat informasi pengguna dari database
                userInfo = await CrudService.ReadSingleAsync<User, string>(userId);
            }
            catch (Exception ex)
            {
                NotificationService.LogMessage($"Terjadi kesalahan saat memuat info pengguna yang sedang masuk: {ex.Message}");
                NotificationService.AlertMessage("Terjadi masalah saat memuat profil pengguna Anda. Silakan coba lagi atau hubungi administrator.");
            }
        }
    }

    private async Task LoadPpmDataAsync()
    {
        var loadAllTask = LoadAllPpmAsync();
        var loadApprovalTask = LoadApprovalPpmAsync();
        await Task.WhenAll(loadAllTask, loadApprovalTask);

        // Mengatur ulang filter dan paginasi setelah data dimuat
        searchFilter = string.Empty;
        pagination = new PaginationState { ItemsPerPage = pagination.ItemsPerPage };
    }

    private async Task LoadAllPpmAsync()
    {
        try
        {
            Expression<Func<PPMTask, bool>>? filter = null;
            if (userPermissions.IsSupervisor && userInfo != null)
            {
                // Filter data untuk Supervisor berdasarkan pengguna yang membuat request
                filter = p => p.CreatedBy == userInfo.Id;
            }

            // Membaca semua data PPM dengan filter yang sesuai
            _allPpm = (await CrudService.ReadAllAsync<PPMTask>(
                filter: filter,
                orderBy: q => q.OrderByDescending(p => p.DateCreated),
                tracking: false
            )).ToList().AsQueryable();
        }
        catch (Exception ex)
        {
            NotificationService.AlertMessage("Gagal memuat data PPM. Hubungi administrator.");
            NotificationService.LogMessage($"Terjadi kesalahan saat memuat semua PPM: {ex.Message}");
            _allPpm = Enumerable.Empty<PPMTask>().AsQueryable();
        }
    }

    private async Task LoadApprovalPpmAsync()
    {
        try
        {
            // Mendapatkan ekspresi filter untuk data yang butuh persetujuan
            Expression<Func<PPMTask, bool>>? combinedFilter = GetApprovalFilterExpression();

            // Membaca data PPM yang butuh persetujuan
            _filteredApprovalPpm = (await CrudService.ReadAllAsync<PPMTask>(
                filter: combinedFilter,
                orderBy: q => q.OrderByDescending(p => p.DateCreated),
                tracking: false
            )).ToList().AsQueryable();
        }
        catch (Exception ex)
        {
            NotificationService.AlertMessage("Gagal memuat data PPM. Hubungi administrator.");
            NotificationService.LogMessage($"Terjadi kesalahan saat memuat PPM yang difilter: {ex.Message}");
            _filteredApprovalPpm = Enumerable.Empty<PPMTask>().AsQueryable();
        }
    }

    private IQueryable<PPMTask> ApplyFilter(IQueryable<PPMTask>? data)
    {
        if (string.IsNullOrWhiteSpace(searchFilter))
        {
            return data ?? Enumerable.Empty<PPMTask>().AsQueryable();
        }

        return data?.Where(p =>
            p.PPMID.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
            p.JobCategory.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)
        ) ?? Enumerable.Empty<PPMTask>().AsQueryable();
    }

    private Expression<Func<PPMTask, bool>>? GetApprovalFilterExpression()
    {
        if (userPermissions.IsAdmin)
        {
            return p => true; // Admin dapat melihat semua data
        }
        if (userPermissions.IsSupervisor && userInfo != null)
        {
            // Supervisor hanya melihat PPM yang dibuatnya dan statusnya Checking
            return p => p.CreatedBy == userInfo.Id && p.Level == PPMStatusLevel.Checking;
        }
        if (userPermissions.IsManager && userInfo?.Section != null)
        {
            // Manager melihat PPM di bagiannya dengan status Request
            return p => p.PPMSection == userInfo.Section && p.Level == PPMStatusLevel.Request;
        }
        if (userPermissions.IsTerminalManager)
        {
            // Terminal Manager melihat PPM dengan status ApprovedByManager
            return p => p.Level == PPMStatusLevel.ApprovedByManager;
        }
        if (userPermissions.IsMaintenanceSupervisor)
        {
            // Maintenance Supervisor melihat PPM dengan status ApprovedByTerminalManager
            return p => p.Level == PPMStatusLevel.ApprovedByTerminalManager;
        }
        if (userPermissions.IsMaintenance && userInfo?.FullName != null)
        {
            // Maintenance melihat PPM yang ditugaskan kepadanya
            return p => p.MaintenancePIC == userInfo.FullName &&
                        (p.Level == PPMStatusLevel.OnProgress || p.Level == PPMStatusLevel.Checking);
        }
        return p => false; // Default: tidak ada data
    }

    private void LoadUrlStatus()
    {
        statusMessage = UrlStatusService.GetStatus();
        if (!string.IsNullOrEmpty(statusMessage))
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            NavigationManager.NavigateTo(uri.AbsolutePath, replace: true);
        }
    }

    // Event Handler dan Navigasi
    private void ClearFilter()
    {
        // Mengatur ulang filter pencarian menjadi string kosong.
        searchFilter = string.Empty;
    }

    private void SetTableChoice(TableChoice newChoice)
    {
        if (tableChoice == newChoice) return;
        tableChoice = newChoice;
        ResetPagination();
    }

    private void ResetPagination()
    {
        pagination = new PaginationState { ItemsPerPage = pagination.ItemsPerPage };
        StateHasChanged();
    }

    private void NavigateToAddPPM()
    {
        NavigationManager.NavigateTo("./PPMAdd");
    }

    private void NavigateToPPM(PPMTask ppm, PpmPage page)
    {
        string path = page switch
        {
            PpmPage.Info => $"./PPMInfo/{ppm.TaskID}",
            _ => string.Empty
        };
        if (!string.IsNullOrEmpty(path))
        {
            NavigationManager.NavigateTo(path);
        }
    }

    private string GetBadgeText(PPMTask ppm)
    {
        // Kondisi khusus untuk status "Request"
        if (IsRequestStatus(ppm))
        {
            return "Request";
        }

        return ppm.Level switch
        {
            PPMStatusLevel.Request => "Request",
            PPMStatusLevel.ApprovedByManager => "Approved by Manager",
            PPMStatusLevel.ApprovedByTerminalManager => "Approved by Terminal Manager",
            PPMStatusLevel.OnProgress => "On Progress",
            PPMStatusLevel.Checking => "Checking",
            PPMStatusLevel.Completed => "Completed",
            PPMStatusLevel.Rejected => "Rejected",
            _ => "Unknown"
        };
    }

    private string GetBadgeClass(PPMTask ppm)
    {
        // Kondisi khusus untuk status "Request"
        if (IsRequestStatus(ppm))
        {
            return "bg-warning text-dark";
        }

        return ppm.Level switch
        {
            PPMStatusLevel.Request => "bg-warning text-dark",
            PPMStatusLevel.ApprovedByManager => "bg-info text-dark",
            PPMStatusLevel.ApprovedByTerminalManager => "bg-info text-dark",
            PPMStatusLevel.OnProgress => "bg-primary",
            PPMStatusLevel.Checking => "bg-secondary",
            PPMStatusLevel.Completed => "bg-success",
            PPMStatusLevel.Rejected => "bg-danger",
            _ => "bg-light text-dark"
        };
    }

    private bool IsRequestStatus(PPMTask ppm)
    {
        // Logika untuk menampilkan status "Request" secara khusus di UI
        return ppm.Level == PPMStatusLevel.ApprovedByManager &&
               (ppm.PPMSection == "Formalities" || ppm.PPMSection == "Security" || ppm.PPMSection == "HR/GA");
    }
}