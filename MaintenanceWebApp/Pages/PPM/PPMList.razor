@page "/PPMList"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using System.Linq.Expressions
@inject NavigationManager NavigationManager
@implements IDisposable

@* Services *@
@inject CRUDService CRUDService
@inject UrlStatusService UrlStatusService
@inject TableService TableService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Supervisor, Manager, Terminal Manager, Maintenance Supervisor, Maintenance")]

@* Status Notification *@
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="container px-0">
        <div style="padding: 10px;" class="alert alert-success alert-dismissible fade show" role="alert">
            @statusMessage
            <button style="background-color: transparent; border: transparent; float: right;" type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<div class="card">

    <div class="row px-3">
        <div class="col-sm-5 form-group">
            <h5 class="display-6">PPM</h5>
            @if (HasPPM)
            {
                @if (PPMCount > 5) // Hanya tampilkan jika ada lebih dari 5 item
                {
                    <div class="page-size-chooser my-2">
                        Items per page:
                        <select @bind="@Pagination.ItemsPerPage">
                            <option>5</option>
                            @if (PPMCount > 10)
                            {
                                <option>10</option>
                            }
                            @if (PPMCount > 20)
                            {
                                <option>20</option>
                            }
                        </select>
                    </div>
                }
            }
        </div>

        @if (dataPermissionSupervisor)
        {
            <div class="col-sm-4"></div>

            <div class="col-sm-3 d-flex align-items-center justify-content-end">
                <button class="btn btn-primary" @onclick="NavigateToAddPPM">
                    Tambah
                </button>
            </div>
        }

    </div>

    <div class="px-3">
        @* Loading Data *@
        @if (_isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Memuat Data PPM...</p>
            </div>
        }
        else if (!HasPPM && string.IsNullOrWhiteSpace(NoFilter)) // Hanya tampilkan jika tidak ada data dan tidak ada filter yang aktif
        {
            @* No PPM Data *@
            <hr />
            <div class="text-center py-3">
                <p>Tidak ada PPM.</p>
            </div>
        }
        else if (!HasPPM && !string.IsNullOrWhiteSpace(NoFilter)) // Jika ada filter tapi tidak ada hasil
        {
            <hr />
            <div class="text-center py-3">
                <p>Tidak ada PPM yang cocok dengan filter Anda.</p>
                <button class="btn btn-link" @onclick="ClearFilter">Hapus filter</button>
            </div>
        }
        else
        {
            @* Search Box *@
            <div class="search-box mb-3">
                <input class="form-control" type="search" autofocus @bind="NoFilter" @bind:event="oninput" placeholder="Cari ID PPM atau Jenis Pekerjaan..." />
            </div>

            @* PPM Data Table *@
            <QuickGrid Items="FilteredPPM" Virtualize="false" Pagination="@Pagination" Class="table table-striped table-hover table-bordered">

                <TemplateColumn Title="ID" Sortable="true">
                    <a style="cursor:pointer; color: royalblue;" @onclick="@(() => NavigateToPPMInfo(context))">
                        @context.PPMID
                    </a>
                </TemplateColumn>

                <PropertyColumn Property="@(ppm => ppm.JobCategory)" Title="Jenis Pekerjaan" Sortable="true" />
                <PropertyColumn Property="@(ppm => ppm.DateCreated)" Title="Tanggal" Sortable="true" />

                <TemplateColumn Title="Status" Sortable="true">
                    @if (context.Level == PPMStatusLevel.Request)
                    {
                        <label class="btn btn-warning">Request</label>
                    }
                    else if (context.Level == PPMStatusLevel.ApprovedByManager || context.Level == PPMStatusLevel.ApprovedByTerminalManager)
                    {
                        <label class="btn btn-info">Pending Approval</label>
                    }
                    else if (context.Level == PPMStatusLevel.OnProgress)
                    {
                        <label class="btn btn-info">On Progress</label>
                    }
                    else if (context.Level == PPMStatusLevel.Checking)
                    {
                        <label class="btn btn-secondary">Checking</label>
                    }
                    else if (context.Level == PPMStatusLevel.Completed)
                    {
                        <label class="btn btn-success">Completed</label>
                    }
                    else if (context.Level == PPMStatusLevel.Rejected)
                    {
                        <label class="btn btn-danger">Rejected</label>
                    }
                </TemplateColumn>

            </QuickGrid>

            <Paginator State="@Pagination" />
        }
    </div>
</div>

@code{

        [CascadingParameter]
        private Task<AuthenticationState>? authenticationStateTask { get; set; }
        private User? userInfo; // Info pengguna yang sedang login

        private string? userId;
        private string? userSection;

        // Permissions flags
        private bool dataPermissionSupervisor;
        private bool dataPermissionManager;
        private bool dataPermissionTerminalManager;
        private bool dataPermissionMaintenanceSupervisor;
        private bool dataPermissionMaintenance;
        private bool dataPermissionAdmin;

        private IQueryable<PPMTask>? _allPPM; // Akan memegang semua PPM yang boleh diakses pengguna
        private bool _isLoading = true;

        public PaginationState Pagination { get; } = new() { ItemsPerPage = 5 };

        public bool HasPPM => !_isLoading && (_allPPM?.Any() ?? false);
        public int PPMCount => _allPPM?.Count() ?? 0;

        private string statusMessage = string.Empty;

        protected override async Task OnInitializedAsync()
        {
            _isLoading = true;

            await Authorization(); // Ambil informasi otorisasi dan pengguna
            if (string.IsNullOrEmpty(userId))
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            NoFilter = string.Empty; // Reset filter saat inisialisasi

            await LoadPPM(); // Muat data PPM berdasarkan peran

            LoadUrlStatus(); // Dapatkan status dari URL
            _isLoading = false;
        }

        private async Task Authorization()
        {
            if (authenticationStateTask != null)
            {
                var authenticationState = await authenticationStateTask;
                var userPrincipal = authenticationState.User;

                dataPermissionSupervisor = userPrincipal.IsInRole("Supervisor");
                dataPermissionManager = userPrincipal.IsInRole("Manager");
                dataPermissionTerminalManager = userPrincipal.IsInRole("Terminal Manager");
                dataPermissionMaintenanceSupervisor = userPrincipal.IsInRole("Maintenance Supervisor");
                dataPermissionMaintenance = userPrincipal.IsInRole("Maintenance");
                dataPermissionAdmin = userPrincipal.IsInRole("Admin");

                if (userPrincipal.Identity?.IsAuthenticated == true)
                {
                    userId = userPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? userPrincipal.FindFirst("Id")?.Value;

                    if (!string.IsNullOrEmpty(userId))
                    {
                        try
                        {
                            userInfo = await CRUDService.ReadSingleAsync<User, string>(userId);
                            userSection = userInfo?.Section; // Gunakan ?. untuk null-safety
                        }
                        catch (Exception ex)
                        {
                            NotificationService.LogMessage($"Error loading UserInfo for logged in user: {ex.Message}");
                            // Tidak perlu redirect, karena [Authorize] sudah memblokir akses
                            // dan halaman bisa tetap ditampilkan tanpa data jika ini hanya error info user
                        }
                    }
                }
            }
        }

        private async Task LoadPPM()
        {
            try
            {
                // Mulai dengan filter default yang tidak mengembalikan apa pun
                Expression<Func<PPMTask, bool>> combinedFilter = p => false;

                // Admin dapat melihat semua
                if (dataPermissionAdmin)
                {
                    combinedFilter = p => true;
                }
                // Supervisor hanya melihat PPM yang dibuat oleh mereka
                else if (dataPermissionSupervisor)
                {
                    combinedFilter = combinedFilter.OrElse(p => p.CreatedBy == userId);
                }
                // Manager melihat PPM di section mereka dan Level tertentu
                else if (dataPermissionManager && !string.IsNullOrEmpty(userSection))
                {
                    combinedFilter = combinedFilter.OrElse(p => p.PPMSection == userSection &&
                        (p.Level == PPMStatusLevel.Request || p.Level == PPMStatusLevel.Completed || p.Level == PPMStatusLevel.Rejected));
                }
                // Terminal Manager melihat PPM di Level tertentu
                else if (dataPermissionTerminalManager)
                {
                    combinedFilter = combinedFilter.OrElse(p => p.Level == PPMStatusLevel.ApprovedByManager || p.Level == PPMStatusLevel.Completed || p.Level == PPMStatusLevel.Rejected);
                }
                // Maintenance Supervisor melihat PPM di Level tertentu
                else if (dataPermissionMaintenanceSupervisor)
                {
                    combinedFilter = combinedFilter.OrElse(p => p.Level == PPMStatusLevel.ApprovedByTerminalManager || p.Level == PPMStatusLevel.Completed || p.Level == PPMStatusLevel.Rejected);
                }
                // Maintenance melihat PPM yang ditugaskan kepada mereka dan Level tertentu
                else if (dataPermissionMaintenance)
                {
                    combinedFilter = combinedFilter.OrElse(p => p.MaintenancePIC == userId &&
                        (p.Level == PPMStatusLevel.OnProgress || p.Level == PPMStatusLevel.Checking || p.Level == PPMStatusLevel.Completed || p.Level == PPMStatusLevel.Rejected));
                }

                _allPPM = (await CRUDService.ReadAllAsync<PPMTask>(
                        filter: combinedFilter,
                        orderBy: q => q.OrderByDescending(p => p.DateCreated),
                        tracking: false
                    )).ToList().AsQueryable();
            }
            catch (Exception ex)
            {
                NotificationService.AlertMessage("Gagal memuat data PPM. Hubungi administrator.");
                NotificationService.LogMessage($"Error loading PPM: {ex.Message}");
                _allPPM = Enumerable.Empty<PPMTask>().AsQueryable(); // Pastikan _allPPM tidak null jika ada error
            }
            finally
            {
                _isLoading = false;
            }
        }


        private async Task LoadUrlStatus()
        {
            statusMessage = UrlStatusService.GetAndClearUrlStatusMessage();
            if (!string.IsNullOrEmpty(statusMessage))
            {
                // Navigasi ulang tanpa parameter status untuk membersihkan URL
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                NavigationManager.NavigateTo(uri.AbsolutePath, replace: true);
            }
        }

        // No Filter
        public string NoFilter
        {
            get => TableService.NoFilter ?? string.Empty;
            set
            {
                if (TableService.NoFilter != value)
                {
                    TableService.NoFilter = value;
                    StateHasChanged();
                }
            }
        }

        // Filtered PPM
        public IQueryable<PPMTask> FilteredPPM =>
            string.IsNullOrWhiteSpace(NoFilter)
                ? _allPPM ?? Enumerable.Empty<PPMTask>().AsQueryable()
                : (_allPPM?.Where(p =>
                    p.PPMID.Contains(NoFilter, StringComparison.OrdinalIgnoreCase) ||
                    p.JobCategory.Contains(NoFilter, StringComparison.OrdinalIgnoreCase))
                  ?? Enumerable.Empty<PPMTask>().AsQueryable());

        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        private void ClearFilter()
        {
            NoFilter = string.Empty;
        }

        private void NavigateToAddPPM()
        {
            NavigationManager.NavigateTo("/PPMAdd");
        }

        private void NavigateToPPMInfo(PPMTask ppm)
        {
            NavigationManager.NavigateTo($"/PPMInfo/{ppm.TaskID}");
        }
}