@page "/PPMInfo/{TaskID}"
@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using MaintenanceWebApp.Pages.PPM.Component
@using System.Security.Claims
@using System.IO

@* Services *@
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CRUDService CRUDService
@inject NotificationService NotificationService
@inject PPMWorkflowService PPMWorkflowService
@inject UploadFilesService UploadService
@inject NavigationLockStateService NavLockState

@* Otorisasi Halaman *@
@attribute [Authorize(Roles = "Admin, Supervisor, Manager, Terminal Manager, Maintenance Supervisor, Maintenance")]

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

@if (_isProcessingFinalAction)
{
    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    <span class="ms-1">Memproses...</span>
}
@if (_isLoading)
{
    <div class="text-center py-4">
        <div class="spinner-border text-primary mb-2" role="status"></div>
        <p class="text-muted">Memuat Data PPM...</p>
    </div>
}
else if (ppmTask != null && supervisor != null && userInfo != null)
{
    <div class="card">
        <div class="card-header bg-light border-primary">
            @* Header dengan Navigasi Tab *@
            <ul class="nav nav-tabs card-header-tabs" id="nav-tab" role="tablist">
                <li class="nav-item">
                    <a @onclick="NavigateToPPMListWithBypass" class="nav-link" aria-label="Kembali ke Daftar PPM" style="cursor: pointer;">
                        <span class="oi oi-chevron-left"></span>
                    </a>
                </li>
                <li class="nav-item">
                    <button class="nav-link active" id="permintaan-tab" data-bs-toggle="tab" data-bs-target="#permintaan" type="button" role="tab" aria-controls="permintaan" aria-selected="true">
                        Permintaan
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" id="pelaksanaan-tab" data-bs-toggle="tab" data-bs-target="#pelaksanaan" type="button" role="tab" aria-controls="pelaksanaan" aria-selected="false">
                        Pelaksanaan
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">
                        Riwayat
                    </button>
                </li>
            </ul>
        </div>
        <div class="card-body">
            @* Memanggil Komponen Konten Tab yang Telah Diekstrak *@
            <PpmTabContent PpmTask="ppmTask"
            Supervisor="supervisor"
            PpmHistoryList="ppmHistoryList"
            OnExportToPdf="ExportToPdf">
                <ActionButtons>
                    @if (CanShowActionButtons())
                    {
                        <div class="text-end mt-4">
                            @if (CanReject())
                            {
                                <button type="button" class="btn btn-danger mx-2" data-bs-toggle="modal" data-bs-target="#rejectionModal">
                                    Tolak
                                </button>
                            }
                            @if (CanApproveOrComplete())
                            {
                                <button @onclick="ShowApprovalModal" type="button" class="btn btn-success mx-2" data-bs-toggle="modal" data-bs-target="#approvalModal">
                                    @(IsMaintenanceOnProgress ? "Selesai" : "Setuju")
                                </button>
                            }
                            @if (CanCancel())
                            {
                                <button type="button" class="btn btn-danger mx-2" data-bs-toggle="modal" data-bs-target="#cancelModal">
                                    Batal
                                </button>
                            }
                        </div>
                    }
                </ActionButtons>
            </PpmTabContent>
        </div>
    </div>

    @* --- Pemanggilan Komponen Modal yang Telah Diekstrak --- *@

    <RejectionModal PpmTask="ppmTask" OnRejectSubmit='() => HandleAction("Reject")' />

    <ApprovalModal PpmTask="ppmTask"
    CurrentUser="userInfo"
    InventoryMaintenanceHistoryList="inventoryMaintenanceHistoryList"
    MaintenancePICs="MaintenancePICs"
    MaintenanceCategories="MaintenanceCategories"
    IsSupervisor="dataPermissionSupervisor"
    IsManager="dataPermissionManager"
    IsTerminalManager="dataPermissionTerminalManager"
    IsMaintenanceSupervisor="dataPermissionMaintenanceSupervisor"
    IsMaintenance="dataPermissionMaintenance"
    OnMaintenanceCategoryChanged="LoadMaintenancePICsAsync"
    OnInventoryMaintenanceHistoryChanged="LoadInventoryMaintenanceHistoryAsync"
    OnDeleteHistory="DeleteSelectedHistory"
    OnSubmitSuccess="HandleApprovalSuccess" />

    <CancelModal OnConfirm="HandleCancel" />

    <InputMaintenanceHistoryModal PpmId="@ppmTask.PPMID"
    CurrentUser="@userInfo"
    OnSaveSuccess="HandleHistorySaveSuccess"
    OnCancel="HandleHistoryCancel" />
}
else
{
    <div class="alert alert-warning text-center mt-4">
        <strong>PPM Tidak Ditemukan</strong><br />
        Kami tidak dapat menemukan data untuk ID yang Anda minta. Mohon pastikan ID sudah benar atau kembali ke daftar untuk melihat semua PPM yang tersedia.
    </div>
}

@code {
    // --- 1. Parameters ---
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Parameter] public string TaskID { get; set; } = string.Empty;

    // --- 2. Properti & Fields ---
    private PPMTask? ppmTask;
    private User? supervisor;
    private User? userInfo;
    private List<PPMTaskHistory>? ppmHistoryList;
    private List<InventoryMaintenanceHistory>? inventoryMaintenanceHistoryList;
    private List<User> MaintenancePICs = new List<User>();
    private List<string> MaintenanceCategories { get; set; } = new() { "Electrical", "Mechanical", "Civil", "IT" };
    private string? userId;
    private string _webPPMRoot = string.Empty;
    private bool _isLoading = true;
    private bool _isProcessingFinalAction = false;
    private bool _shouldBypassLock = false;
    private bool dataPermissionSupervisor;
    private bool dataPermissionManager;
    private bool dataPermissionTerminalManager;
    private bool dataPermissionMaintenanceSupervisor;
    private bool dataPermissionMaintenance;
    private bool IsInRequestState => ppmTask?.Level == PPMStatusLevel.Request;
    private bool IsApprovedByManagerState => ppmTask?.Level == PPMStatusLevel.ApprovedByManager;
    private bool IsApprovedByTerminalManagerState => ppmTask?.Level == PPMStatusLevel.ApprovedByTerminalManager;
    private bool IsOnProgressState => ppmTask?.Level == PPMStatusLevel.OnProgress;
    private bool IsInCheckingState => ppmTask?.Level == PPMStatusLevel.Checking;
    private bool IsCompletedOrRejected => ppmTask?.Level == PPMStatusLevel.Completed || ppmTask?.Level == PPMStatusLevel.Rejected;

    // --- 3. Metode Lifecycle ---
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await Authorization();
        if (string.IsNullOrEmpty(userId)) { NavigationManager.NavigateTo("./"); return; }
        await LoadPPMDetails();
        if (ppmTask == null) { NavigationManager.NavigateTo("./PPMList"); return; }
        await LoadDependentData();

        try
        {
            // Mengambil path root dari konfigurasi
            _webPPMRoot = Configuration.GetValue<string>("WebPPMRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi `WebPPMRoot`. Silakan hubungi Administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi `WebPPMRoot`: {ex}");
        }

        _isLoading = false;
    }

    private void NavigateToPPMListWithBypass()
    {
        NavLockState.RequestBypass();

        NavigationManager.NavigateTo("./PPMList");
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        // Cek status dari service
        if (NavLockState.ShouldBypass)
        {
            NavLockState.Reset(); // Reset status setelah digunakan
            return; // Izinkan navigasi
        }

        // Jalankan logika custom (refresh) jika tidak ada permintaan bypass
        context.PreventNavigation();
        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    // --- 4. Metode Pemuatan Data ---
    private async Task Authorization()
    {
        if (authenticationStateTask == null) return;
        var userPrincipal = (await authenticationStateTask).User;

        dataPermissionSupervisor = userPrincipal.IsInRole("Supervisor");
        dataPermissionManager = userPrincipal.IsInRole("Manager");
        dataPermissionTerminalManager = userPrincipal.IsInRole("Terminal Manager");
        dataPermissionMaintenanceSupervisor = userPrincipal.IsInRole("Maintenance Supervisor");
        dataPermissionMaintenance = userPrincipal.IsInRole("Maintenance");

        if (userPrincipal.Identity?.IsAuthenticated == true)
        {
            userId = userPrincipal.FindFirstValue(ClaimTypes.NameIdentifier) ?? userPrincipal.FindFirstValue("Id");
            if (!string.IsNullOrEmpty(userId))
            {
                userInfo = await CRUDService.ReadSingleAsync<User, string>(userId);
            }
        }
    }

    private async Task LoadPPMDetails()
    {
        ppmTask = await CRUDService.ReadSingleAsync<PPMTask, string>(TaskID);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat memuat data PPM. Mohon coba muat ulang halaman, atau hubungi Administrator jika masalah berlanjut.");
            ppmTask = null;
        }
    }

    private async Task LoadDependentData()
    {
        if (ppmTask == null) return;
        await Task.WhenAll(
            LoadPPMHistory(),
            LoadSupervisor(ppmTask.CreatedBy),
            LoadInventoryMaintenanceHistoryAsync()
        );
    }

    private async Task LoadPPMHistory()
    {
        ppmHistoryList = (await CRUDService.ReadAllAsync<PPMTaskHistory>(filter: h => h.PPMID == TaskID, orderBy: q => q.OrderBy(h => h.DateUpdated))).ToList();
    }

    private async Task LoadSupervisor(string? supervisorId)
    {
        if (supervisorId == null) return;
        supervisor = await CRUDService.ReadSingleAsync<User, string>(supervisorId);
    }

    private async Task LoadMaintenancePICsAsync(string roleCategory)
    {
        if (string.IsNullOrWhiteSpace(roleCategory))
        {
            MaintenancePICs = new List<User>();
        }
        else
        {
            MaintenancePICs = (await CRUDService.ReadAllAsync<User>(filter: p => p.RoleCategory == roleCategory, orderBy: q => q.OrderBy(p => p.FullName))).ToList();
        }
        StateHasChanged();
    }

    private async Task LoadInventoryMaintenanceHistoryAsync()
    {
        if (ppmTask == null) return;
        inventoryMaintenanceHistoryList = (await CRUDService.ReadAllAsync<InventoryMaintenanceHistory>(filter: h => h.PPMId == ppmTask.PPMID)).ToList();
        StateHasChanged();
    }

    // --- 5. Metode Penanganan Aksi Utama ---
    private async Task HandleAction(string actionType)
    {
        _isProcessingFinalAction = true;

        if (ppmTask == null || authenticationStateTask == null) return;
        var authState = await authenticationStateTask;
        var userPrincipal = authState.User;

        var result = await PPMWorkflowService.ProcessPPMAction(ppmTask, userPrincipal, actionType);
        if (result.IsSuccess)
        {
            await UploadNewPPMHistory(actionType);
            await JSRuntime.InvokeVoidAsync("hideModal", "rejectionModal");
            NavLockState.RequestBypass();
            NavigationManager.NavigateTo($"./PPMList?status={actionType}Success", forceLoad: true);
        }
        else
        {
            await NotificationService.AlertMessage(result.ErrorMessage);
            _isProcessingFinalAction = false;
        }
    }

    private async Task HandleApprovalSuccess()
    {
        _isProcessingFinalAction = true;
        NavLockState.RequestBypass();
        NavigationManager.NavigateTo($"./PPMList?status=ApproveSuccess", forceLoad: true);
    }

    private async Task HandleCancel()
    {
        _isProcessingFinalAction = true;

        if (ppmTask == null)
        {
            _isProcessingFinalAction = false; // Hentikan loading jika ada guard clause
            return;
        }

        await UploadNewPPMHistory("Cancel");

        var imageBefore = ppmTask.ImageBefore;
        var document = ppmTask.Document;
        await CRUDService.DeleteAsync(ppmTask);

        if (string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await UploadService.FileChange(imageBefore, "PPM");
            await UploadService.FileChange(document, "PPM");

            NavLockState.RequestBypass();
            NavigationManager.NavigateTo("./PPMList?status=DeleteSuccess", forceLoad: true);
        }
        else
        {
            await NotificationService.AlertMessage("Proses pembatalan PPM gagal. Data mungkin sudah diubah oleh pengguna lain. Silakan muat ulang halaman dan coba lagi.");
            _isProcessingFinalAction = false;
        }
    }

    // --- 6. Metode Penanganan Event dari Komponen Anak ---
    private async Task HandleHistorySaveSuccess()
    {
        await LoadInventoryMaintenanceHistoryAsync();
        await JSRuntime.InvokeVoidAsync("showModal", "approvalModal");
    }

    private async Task HandleHistoryCancel()
    {
        await JSRuntime.InvokeVoidAsync("showModal", "approvalModal");
    }

    private async Task DeleteSelectedHistory(InventoryMaintenanceHistory history)
    {
        if (!string.IsNullOrWhiteSpace(history.Photo))
        {
            await UploadService.FileChange(history.Photo, "Inventories");
        }
        await CRUDService.DeleteAsync(history);
        await LoadInventoryMaintenanceHistoryAsync();
        await NotificationService.AlertMessage("Berhasil! Riwayat item telah dihapus dari PPM ini.");
    }

    public async Task ShowApprovalModal()
    {
        //await JSRuntime.InvokeVoidAsync("blazorInterop.disableBackButton");
        await JSRuntime.InvokeVoidAsync("showModal", "approvalModal");
    }

    // --- 7. Metode Helper Otorisasi ---
    private bool CanShowActionButtons()
    {
        return !IsCompletedOrRejected;
    }

    private bool CanReject()
    {
        if (ppmTask == null || userInfo == null) return false;

        bool isManagerForSection = dataPermissionManager && ppmTask.PPMSection == userInfo.Section;

        if (isManagerForSection && IsInRequestState) return true;
        if (dataPermissionTerminalManager && IsApprovedByManagerState) return true;
        if (dataPermissionMaintenanceSupervisor && IsApprovedByTerminalManagerState) return true;
        if (dataPermissionSupervisor && IsInCheckingState) return true;

        return false;
    }

    private bool CanApproveOrComplete()
    {
        if (ppmTask == null || userInfo == null) return false;

        bool isManagerForSection = dataPermissionManager && ppmTask.PPMSection == userInfo.Section;
        bool isAssignedPIC = dataPermissionMaintenance && ppmTask.MaintenancePIC == userInfo.FullName;

        if (isManagerForSection && IsInRequestState) return true;
        if (dataPermissionTerminalManager && IsApprovedByManagerState) return true;
        if (dataPermissionMaintenanceSupervisor && IsApprovedByTerminalManagerState) return true;
        if (isAssignedPIC && IsOnProgressState) return true;
        if (dataPermissionSupervisor && IsInCheckingState) return true;

        return false;
    }

    private bool IsMaintenanceOnProgress => dataPermissionMaintenance && IsOnProgressState;

    private bool CanCancel()
    {
        if (ppmTask == null || userInfo == null || !dataPermissionSupervisor) return false;

        bool isRequestFromOpsOrHSE = IsInRequestState && (userInfo.Section == "Operation" || userInfo.Section == "HSE");
        bool isApprovedFromOtherSections = IsApprovedByManagerState && (userInfo.Section == "Formalities" || userInfo.Section == "Security" || userInfo.Section == "HR/GA");

        return isRequestFromOpsOrHSE || isApprovedFromOtherSections;
    }

    // --- 8. Metode Helper Lainnya ---
    private async Task UploadNewPPMHistory(string actionType)
    {
        if (ppmTask == null || userInfo == null) return;
        var newPpmHistory = new PPMTaskHistory
            {
                PPMID = ppmTask.TaskID,
                UpdateBy = userInfo.FullName,
                DateUpdated = DateTime.Now
            };

        if (actionType == "Approve")
        {
            if (IsInRequestState || IsApprovedByManagerState) { newPpmHistory.UpdateType = "Approve"; newPpmHistory.Description = $"{userInfo.FullName} menyetujui PPM."; }
            else if (IsApprovedByTerminalManagerState) { newPpmHistory.UpdateType = "Assign"; newPpmHistory.Description = $"{userInfo.FullName} menugaskan {ppmTask.MaintenancePIC} dari bagian {ppmTask.MaintenanceCategory} sebagai PIC."; }
            else if (IsOnProgressState) { newPpmHistory.UpdateType = "Report"; newPpmHistory.Description = $"{userInfo.FullName} melaporkan penyelesaian PPM."; }
            else if (IsInCheckingState) { newPpmHistory.UpdateType = "Completion"; newPpmHistory.Description = $"{userInfo.FullName} sudah melakukan pengecekan dan menyelesaikan PPM."; }
        }
        else if (actionType == "Reject")
        {
            newPpmHistory.UpdateType = "Reject";
            if (IsInCheckingState) { newPpmHistory.Description = $"{userInfo.FullName} sudah melakukan pengecekan PPM namun masih terdapat perbaikan yang kurang."; }
            else { newPpmHistory.Description = $"{userInfo.FullName} tidak menyetujui PPM"; }
        }
        else if (actionType == "Cancel")
        {
            newPpmHistory.UpdateType = "Cancel";
            newPpmHistory.Description = $"{userInfo.FullName} membatalkan PPM.";
        }

        await CRUDService.CreateAsync(newPpmHistory);
    }

    private void ExportToPdf()
    {
        if (ppmTask == null) return;

        NavLockState.RequestBypass();

        NavigationManager.NavigateTo($"/PDFViewer/{ppmTask.TaskID}", true);
    }
}