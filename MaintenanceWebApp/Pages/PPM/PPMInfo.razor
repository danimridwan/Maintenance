@page "/PPMInfo/{TaskID}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DataContext> DbFactory
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Supervisor, Manager, Terminal Manager, Maintenance Supervisor, Maintenance")]

<div class="card">

	@if (ppmTask != null && user != null)
	{
		<div class="card-header bg-light border-primary">
			@* Tab Header *@
			<ul class="nav nav-tabs card-header-tabs">
				<li class="nav-item">
					<a href="PPMList" class="nav-link active" aria-label="Kembali ke Daftar PPM">
						<span class="oi oi-chevron-left"></span>
					</a>
				</li>
				<li class="nav-item">
					<button class="nav-link active" id="permintaan-tab" data-bs-toggle="tab" data-bs-target="#permintaan" type="button" role="tab" aria-controls="permintaan" aria-selected="true">
						Permintaan
					</button>
				</li>
				<li class="nav-item">
					<button class="nav-link" id="pelaksanaan-tab" data-bs-toggle="tab" data-bs-target="#pelaksanaan" type="button" role="tab" aria-controls="pelaksanaan" aria-selected="true">
						Pelaksanaan
					</button>
				</li>
			</ul>
		</div>
		<div class="card-body">
			@* Informasi PPM *@
			<div class="tab-content" id="ppmTabContent">
				<div class="tab-pane fade show active" id="permintaan" role="tabpanel" aria-labelledby="permintaan-tab">
					<div class="form-group row">
				<div class="col-sm-12">
					<h5 class="display-6">Permintaan</h5><hr />
					<table width="100%">
						<tr>
							<td width="15%" class="td-first">ID</td>
							<td width="5%"> : </td>
							<td width="80%" class="td-last">@ppmTask.PPMID</td>
						</tr>
						<tr>
							<td width="15%" class="td-first">Status PPM</td>
							<td width="5%"> : </td>
							<td width="80%" class="td-last">

								@if (ppmTask.Level == 0)
								{
									<label class="btn btn-warning">Request</label>
								}
								else if (ppmTask.Level == 1 || ppmTask.Level == 2)
								{
									<label class="btn btn-info">Pending Approval</label>
								}
								else if (ppmTask.Level == 3)
								{
									<label class="btn btn-info">On Progress</label>
								}
								else if (ppmTask.Level == 4)
								{
									<label class="btn btn-secondary">Checking</label>
								}
								else if (ppmTask.Level == 5)
								{
									<label class="btn btn-success">Completed</label>
								}
								else if (ppmTask.Level == 6)
								{
									<label class="btn btn-danger">Rejected</label>
								}
							</td>
						</tr>
						<tr>
							<td width="15%" class="td-first">Pemohon</td>
							<td width="5%"> : </td>
							<td width="80%" class="td-last">@user.FullName</td>
						</tr>
						<tr>
							<td width="15%" class="td-first">Section</td>
							<td width="5%"> : </td>
							<td width="80%" class="td-last">@user.Section</td>
						</tr>
						<tr>
							<td width="15%" class="td-first">Divisi</td>
							<td width="5%"> : </td>
							<td width="80%" class="td-last">@user.RoleCategory</td>
						</tr>
						<tr>
							<td width="15%" class="td-first">Jenis Pekerjaan</td>
							<td width="5%"> : </td>
							<td width="80%" class="td-last">@ppmTask.JobCategory</td>
						</tr>
					</table>
					<br />
					<b>Deskripsi Pekerjaan :</b><br />
					<label>@ppmTask.JobDescription</label>
					<br /><br />
					<b>Foto Awal</b><br />
					@if (!string.IsNullOrWhiteSpace(ppmTask.ImageBefore))
					{
						<img style="max-height: 300px;" src="@CreateFilePath(ppmTask.ImageBefore)" alt="Image Before" />
					}
					<br /><br />
					<b>Dokumen :</b><br />
					<a>@ppmTask.Document</a>
					<br />
					@if (ppmTask.Level < 5)
					{
						@if (dataPermissionSupervisor == true && ppmTask.Level == 4)
						{
							<button style="float: right;" type="button" class="btn btn-success mt-5" data-toggle="modal" data-target="#ApprovalModal">
								<span>Approve</span>
							</button>
						}
						else if ( dataPermissionManager || dataPermissionTerminalManager || dataPermissionMaintenanceSupervisor)
						{
							<button style="float: right;" type="button" class="btn btn-success mt-5" data-toggle="modal" data-target="#ApprovalModal">
								<span>Approve</span>
							</button>
						}
						else if (dataPermissionMaintenance == true && ppmTask.Level == 3)
						{
							<button style="float: right;" type="button" class="btn btn-success mt-5" data-toggle="modal" data-target="#ApprovalModal">
								<span>Complete</span>
							</button>
						}
					}
				</div>

			</div>
				</div>
				<div class="tab-pane fade" id="pelaksanaan" role="tabpanel" aria-labelledby="pelaksanaan-tab">
					<div class="form-group row">
						<div class="col-sm-12">
							<h5 class="display-6">Pelaksanaan</h5><hr />
							<b>Target Tanggal Penyelesaian :</b><br />
							<label>@ppmTask.TargetDate</label>
							<br /><br />
							<b>Kesesuaian Terhadap Target :</b>
							<label>@ppmTask.TargetCompletion</label>
							<br /><br />
							<b>Catatan (MTD) :</b><br />
							<label>@ppmTask.MTDNote</label>
							<br /><br />
							<b>Evaluasi :</b><br />
							<label>@ppmTask.EvaluationNote</label>
							<br /><br />
							<b>Foto Akhir</b><br />
							@if (!string.IsNullOrWhiteSpace(ppmTask.ImageAfter))
							{
								<img style="max-height: 300px;" src="@CreateFilePath(ppmTask.ImageAfter)" alt="Image After" />
							}
							<br />
							@if (ppmTask.Level < 5)
							{
								@if (dataPermissionSupervisor == true && ppmTask.Level == 4)
								{
									<button style="float: right;" type="button" class="btn btn-success mt-5" data-toggle="modal" data-target="#ApprovalModal">
										<span>Approve</span>
									</button>
								}
								else if (dataPermissionManager || dataPermissionTerminalManager || dataPermissionMaintenanceSupervisor)
								{
									<button style="float: right;" type="button" class="btn btn-success mt-5" data-toggle="modal" data-target="#ApprovalModal">
										<span>Approve</span>
									</button>
								}
								else if (dataPermissionMaintenance == true && ppmTask.Level == 3)
								{
									<button style="float: right;" type="button" class="btn btn-success mt-5" data-toggle="modal" data-target="#ApprovalModal">
										<span>Complete</span>
									</button>
								}
							}
						</div>

					</div>
				</div>
			</div>
		</div>

		<div class="modal fade" id="ApprovalModal" tabindex="-1" role="dialog" aria-labelledby="ApprovalModalLabel" aria-hidden="true">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="ApprovalModalLabel">Modal title</h5>
						<button style="border: transparent; background-color: transparent;" type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<EditForm Model="ppmTask" OnValidSubmit="HandleApproval">
							@if (dataPermissionManager)
							{
								<label>Anda ingin approve PPM ini ?</label>
							}
							@if (dataPermissionTerminalManager)
							{
								<label for="TargetDate" class="col-form-label">Target Penyelesaian<span class="required">*</span></label>
								<InputDate id="TargetDate" @bind-Value="ppmTask.TargetDate" class="form-control" required />
								<ValidationMessage For="@(() => ppmTask.TargetDate)" />
							}
							@if (dataPermissionMaintenanceSupervisor)
							{
								<label for="KategoriMaintenance" class="col-form-label">Kategori Maintenance<span class="required">*</span></label>
								<InputSelect id="KategoriMaintenance" @bind-Value="ppmTask.MaintenanceCategory" class="form-control" required>
									<option value="">...</option>
									@foreach (var cat in maintenanceCategory)
									{
										<option value="@cat">@cat</option>
									}
								</InputSelect>
								<ValidationMessage For="@(() => ppmTask.MaintenanceCategory)" />

								@if (!string.IsNullOrEmpty(ppmTask.MaintenanceCategory))
								{
									SearchMaintenance();

									<label for="MaintenancePIC" class="col-form-label">Maintenance PIC<span class="required">*</span></label>
									<InputSelect id="MaintenancePIC" @bind-Value="ppmTask.MaintenancePIC" class="form-control" required>
										@* FIX: Conditional disabled *@
										<option value="">...</option>
										@foreach (var maintenance in MaintenancePICs) @* FIX: Use MaintenancePICs list *@
										{
											<option value="@maintenance.Id">@maintenance.FullName</option> @* Assuming ppmTask.MaintenancePIC stores Id *@
										}
									</InputSelect>
									<ValidationMessage For="@(() => ppmTask.MaintenancePIC)" />
								}

							}
							@if (dataPermissionMaintenance)
							{

								<label>Target Penyelesaian : <b>@ppmTask.TargetDate</b></label>

								<br />
								<label>Kesesuaian Terhadap Target : </label>

								@if (IsTargetDatePassed())
								{
									<b class="text-danger"> Tidak</b>
								}
								else
								{
									<b> Ya</b>
								}
								<br />

								<label for="EvaluasiPelaksanaan" class="col-form-label">Evaluasi Pelaksanaan</label>
								<InputTextArea id="EvaluasiPelaksanaan" @bind-Value="ppmTask.EvaluationNote" class="form-control" />
								<ValidationMessage For="@(() => ppmTask.EvaluationNote)" />

								<br />

								<label for="CatatanMTD" class="col-form-label">Catatan MTD</label>
								<InputTextArea id="CatatanMTD" @bind-Value="ppmTask.MTDNote" class="form-control" />
								<ValidationMessage For="@(() => ppmTask.MTDNote)" />

								<br />

								<div class="col-sm-12 mb-3">
									<label for="Foto" class="col-form-label">Foto Kondisi Akhir</label>
									@if (string.IsNullOrWhiteSpace(ppmTask.ImageAfter))
									{
										<InputFile id="Foto" class="form-control"
										accept=".jpg,.jpeg,.png"
										OnChange="HandleFileUpload" />
										<ValidationMessage For="@(() => ppmTask.ImageAfter)" />
									}
									else
									{
										<div class="d-flex align-items-center">
											<img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(ppmTask.ImageAfter)" alt="Image After"><br />
											<button @onclick="HandleFileChange" type="button" class="btn btn-secondary btn-sm ms-3">Ubah Foto</button>
										</div>

										@if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
										{
											<div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
										}
									}
								</div>

								<br />
							}
							@if (dataPermissionSupervisor)
							{
								<label>Anda ingin approve PPM ini ?</label>
							}
							<br />
							<button type="button" class="btn btn-danger" @onclick="HandleFileChange" data-dismiss="modal">Cancel</button>
							<button class="btn btn-success" type="submit">
								@if (dataPermissionSupervisor == true && ppmTask.Level == 4)
								{
									<span>Approve</span>
								}
								else if (dataPermissionManager || dataPermissionTerminalManager || dataPermissionMaintenanceSupervisor)
								{
									<span>Approve</span>
								}
								else if (dataPermissionMaintenance == true && ppmTask.Level == 3)
								{
									<span>Complete</span>
								}
							</button>
						</EditForm>
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
		<p>Memuat Data PPM...</p>
	}
</div>

@code {
	//Page
	[Parameter]
	public string TaskID { get; set; }
	private PPMTask ppmTask;
	private Employee user;
	private string userId;
	private Employee userInfo;
	private List<Employee> MaintenancePICs = new List<Employee>();
	private string userSection;
	private string _webPPMRoot = string.Empty;
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationStateTask { get; set; }
	private bool uploadErrorStatus;
	private EditContext? editContext;

	private List<string> maintenanceCategory = new() { "Electrical", "Mechanical", "Civil", "IT" };

	private bool dataPermissionSupervisor;
	private bool dataPermissionManager;
	private bool dataPermissionTerminalManager;
	private bool dataPermissionMaintenanceSupervisor;
	private bool dataPermissionMaintenance;

	//File
	private string subFolderName = "PPM";
	private string fileCategory = "img";
	private string folderName = "Image";

	//Notification
	private string? alertMessage;
	private string? logMessage;

	protected override async Task OnInitializedAsync()
	{
		uploadErrorStatus = false;

		//Authorization
		await Authorization();
		if (string.IsNullOrEmpty(userId))
		{
			NavigationManager.NavigateTo("/");
		}

		await LoadPPM();
		await LoadUser();

		try
		{
			// Get Path Root
			_webPPMRoot = Configuration.GetValue<string>("WebPPMRoot") ?? "/"; // Default root
		}
		catch (Exception ex)
		{
			alertMessage = "Gagal memuat konfigurasi '_webPPMRoot'. Hubungi administrator.";
			logMessage = $"Gagal memuat konfigurasi '_webPPMRoot'\nDetail :\n{ex}";

			ShowNotification(alertMessage, logMessage);
		}

		editContext = new EditContext(ppmTask);
		editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
		editContext.OnFieldChanged += (sender, e) => StateHasChanged();
	}

	//Read Data PPM
	private async Task LoadPPM()
	{
		try
		{
			//Read PPM using Service
			ppmTask = await CRUDService.ReadSingleAsync<PPMTask, string>(TaskID);
		}
		catch (Exception ex)
		{
			alertMessage = "Gagal memuat data PPM. Hubungi administrator.";
			logMessage = $"Gagal memuat data PPM\nDetail :\n{ex}";

			ShowNotification(alertMessage, logMessage);
		}
	}

	//Read Data User
	private async Task LoadUser()
	{
		try
		{
			//Read User using Service
			user = await CRUDService.ReadSingleAsync<Employee, string>(ppmTask.CreatedBy);
		}
		catch (Exception ex)
		{
			alertMessage = "Gagal memuat data User. Hubungi administrator.";
			logMessage = $"Gagal memuat data User\nDetail :\n{ex}";

			ShowNotification(alertMessage, logMessage);
		}
	}

	//Read Data Maintenance
	private async Task LoadMaintenancePIC()
	{
		try
		{
			// Ensure that ppmTask.MaintenanceCategory has a value before trying to filter
			if (!string.IsNullOrEmpty(ppmTask.MaintenanceCategory))
			{
				// Read all employees, filtering by RoleCategory for an exact match
				// Store the results in the list of Employees
				MaintenancePICs = await CRUDService.ReadAllAsync<Employee>( // FIX: Use MaintenancePICs
					filter: p => p.RoleCategory == ppmTask.MaintenanceCategory
				);
			}
			else
			{
				// If no category is selected, clear the list of PICs
				MaintenancePICs = new List<Employee>(); // FIX: Use MaintenancePICs
			}

			// It's good practice to call StateHasChanged() after updating data that the UI depends on,
			// especially after an async operation triggered by an event other than OnInitializedAsync.
			StateHasChanged();
		}
		catch (Exception ex)
		{
			alertMessage = "Gagal memuat daftar PIC Maintenance. Hubungi administrator.";
			logMessage = $"Gagal memuat daftar PIC Maintenance\nDetail :\n{ex}";
			ShowNotification(alertMessage, logMessage);
		}
	}

	private bool IsTargetDatePassed()
	{
		if (ppmTask?.TargetDate == null)
		{
			return false;
		}

		DateOnly now = DateOnly.FromDateTime(DateTime.Today);

		// Comparation
		return now.CompareTo(ppmTask.TargetDate) > 0;
	}

	private async Task SearchMaintenance()
	{
		await LoadMaintenancePIC(); // FIX: Await the async call
	}

	private string CreateFilePath(string relativePath)
	{
		if (relativePath != null)
		{
			return Path.Combine(_webPPMRoot, relativePath).Replace("\\", "/");
		}
		return null;
	}
	private async Task Authorization()
	{
		if (authenticationStateTask != null)
		{
			var authenticationState = await authenticationStateTask;
			var user = authenticationState.User;

			if (user.IsInRole("Supervisor"))
			{
				dataPermissionSupervisor = true;
			}
			else
			{
				dataPermissionSupervisor = false;
			}

			if (user.IsInRole("Manager"))
			{
				dataPermissionManager = true;
			}
			else
			{
				dataPermissionManager = false;
			}

			if (user.IsInRole("Terminal Manager"))
			{
				dataPermissionTerminalManager = true;
			}
			else
			{
				dataPermissionTerminalManager = false;
			}

			if (user.IsInRole("Maintenance Supervisor"))
			{
				dataPermissionMaintenanceSupervisor = true;
			}
			else
			{
				dataPermissionMaintenanceSupervisor = false;
			}

			if (user.IsInRole("Maintenance"))
			{
				dataPermissionMaintenance = true;
			}
			else
			{
				dataPermissionMaintenance = false;
			}

			if (user.Identity?.IsAuthenticated == true)
			{
				userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

				if (string.IsNullOrEmpty(userId))
				{
					userId = user.FindFirst("Id")?.Value;
				}

				try
				{
					//Read User using Service
					userInfo = await CRUDService.ReadSingleAsync<Employee, string>(userId);
					userSection = userInfo.Section;
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error loading User: {ex.Message}");
				}
			}
		}
	}

	//File Upload
	private async Task HandleFileUpload(InputFileChangeEventArgs e)
	{
		//File Upload using Service
		await UploadService.FilesUpload(e.File, folderName, subFolderName, fileCategory);
		ppmTask.ImageAfter = UploadService.FilePath;

		if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
		{
			alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
			logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";

			uploadErrorStatus = true;

			ShowNotification(alertMessage, logMessage);
			return;
		}
		editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => ppmTask.ImageAfter));
	}

	//File Change
	private async Task HandleFileChange()
	{
		if (!string.IsNullOrWhiteSpace(ppmTask.ImageAfter))
		{
			//File Change using Service
			await UploadService.FileChange(ppmTask.ImageAfter, subFolderName);
			ppmTask.ImageAfter = UploadService.FilePath;

			if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
			{
				alertMessage = $"Gagal mengubah gambar. Hubungi Administrator.\n{UploadService.UploadErrorMessage}";
				logMessage = $"Gagal mengubah gambar '_webPPMRoot'\nDetail :\n{UploadService.UploadErrorMessage}";

				uploadErrorStatus = true;

				ShowNotification(alertMessage, logMessage);
			}
			editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => ppmTask.ImageAfter));
		}
	}

	//Approve PPM
	private async Task HandleApproval()
	{
		// FIX: Prioritize role-based level assignment
		if (dataPermissionSupervisor)
		{
			ppmTask.Level = 5;
		}
		if (dataPermissionMaintenance)
		{
			ppmTask.Level = 4;
		}
		else if (dataPermissionMaintenanceSupervisor)
		{
			ppmTask.Level = 3;
		}
		else if (dataPermissionTerminalManager)
		{
			ppmTask.Level = 2;
		}
		else if (dataPermissionManager)
		{
			ppmTask.Level = 1;
		}
		// Consider adding an else if no relevant role, or ensure it's handled upstream

		await CRUDService.UpdateAsync<PPMTask>(ppmTask);

		if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
		{
			alertMessage = "Gagal menyimpan data. Hubungi Administrator.";
			logMessage = $"Gagal menyimpan data\nDetail :\n{CRUDService.CRUDErrorMessage}";

			ShowNotification(alertMessage, logMessage);
			return;
		}
		IJSObjectReference modalElement = await JSRuntime.InvokeAsync<IJSObjectReference>("jQuery", "#ApprovalModal");
		await modalElement.InvokeVoidAsync("modal", "hide");

		await Task.Delay(500);

		NavigationManager.NavigateTo("/PPMList?status=ApproveSuccess");
	}

	//Notification
	private async Task ShowNotification(string alertMessage, string logMessage)
	{
		await NotificationService.AlertMessage(alertMessage);
		NotificationService.LogMessage(logMessage);
	}
}