@page "/TankEdit/{TankId}"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@inject DataContext DataContext
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class="card">
    <div class="card-header border-primary">
        Tank Information
    </div>
    <div class="card-body">
        @if (tank != null)
        {
            <EditForm Model="@tank" OnValidSubmit="UpdateTank">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <label for="TankNo" class="col-sm-2 col-form-label">Tank No</label>
                    <div class="col-sm-10">
                        <InputText id="TankNo" @bind-Value="tank.TankNo" class="form-control" />
                        <ValidationMessage For="@(() => tank.TankNo)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Capacity" class="col-sm-2 col-form-label">Capacity (MT)</label>
                    <div class="col-sm-10">
                        <InputNumber id="Capacity" @bind-Value="tank.Capacity" class="form-control" />
                        <ValidationMessage For="@(() => tank.Capacity)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="InternalCoating" class="col-sm-2 col-form-label">Internal Coating</label>
                    <div class="col-sm-10">
                        <InputText id="InternalCoating" @bind-Value="tank.InternalCoating" class="form-control" />
                        <ValidationMessage For="@(() => tank.InternalCoating)" />
                    </div>
                </div>
                <br />
                <button type="submit" class="btn btn-primary">Update Tank</button>
            </EditForm>
        }
        else
        {
            <p>Loading tank information...</p>
        }
    </div>
</div>

@code {
    private Tank tank;

    [Parameter]
    public string TankId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tank = await DataContext.Tanks.FindAsync(int.Parse(TankId));

        if (tank == null)
        {
            NavigationManager.NavigateTo("/Tank", forceLoad: true);
        }
    }

    private async Task UpdateTank()
    {
        if (tank != null)
        {
            DataContext.Tanks.Update(tank);
            await DataContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/Tank");
        }
    }
}