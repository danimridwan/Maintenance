@page "/Tank"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject DataContext DataContext
@inject NavigationManager NavigationManager
@implements IDisposable


<div class="row">
    <div class="col-6">
        <h3>Tank</h3>
    </div>
    <div class="col-6">
        <button class="btn btn-outline-primary btn-xs float-end" @onclick="() => AddTank()">New Tank</button>
    </div>
</div>
<br />
<div class="page-size-chooser">
    Items per page:
    <select @bind="@Pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>20</option>
        <option>50</option>
    </select>
</div>
<br />
@if (totalRow > 0)
{
    <div>
        <QuickGrid Items="FilteredItems" Virtualize="false" Pagination="@Pagination" Class="table table-striped table-hover text-center table-bordered">
            <PropertyColumn Property="@(tank => tank.TankNo)" Title="TankNo" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Tank no..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(tank => tank.Capacity)" Title="Capacity (MT)" Sortable="true" />
            <PropertyColumn Property="@(tank => tank.InternalCoating)" Title="Internal Coating" Sortable="true" />
            <TemplateColumn Title="Actions">
                <button @onclick="@(() => EditTank(context))" class="btn btn-warning"><span class="oi oi-pencil"></span></button>
                <button @onclick="@(() => SoftDeleteTank(context))" class="btn btn-danger"><span class="oi oi-trash"></span></button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="@Pagination" />
}
else{
    <p>No Tanks Found.</p>
}

@code {
    #region Fields and Properties

    private IQueryable<Tank>? _allTanks;
    private string _tankNoFilter = string.Empty;
    private Timer? _filterDebounceTimer;
    private const int DebounceInterval = 300; // milliseconds
    private bool _isLoading = true;

    private readonly int[] PageSizeOptions = new[] { 5, 10, 20 };

    public PaginationState Pagination { get; } = new() { ItemsPerPage = 5 };

    public bool HasTanks => !_isLoading && (_allTanks?.Any() ?? false);
    public int TankCount => _allTanks?.Count() ?? 0;

    public string tankNoFilter
    {
        get => _tankNoFilter;
        set
        {
            if (_tankNoFilter != value)
            {
                _tankNoFilter = value;
                _filterDebounceTimer?.Dispose();
                _filterDebounceTimer = new Timer(OnFilterDebounced, null, DebounceInterval, Timeout.Infinite);
            }
        }
    }

    public int ItemsPerPage
    {
        get => Pagination.ItemsPerPage;
        set
        {
            if (Pagination.ItemsPerPage != value)
            {
                Pagination.ItemsPerPage = value;
                StateHasChanged();
            }
        }
    }

    public IQueryable<Tank> FilteredTanks =>
        string.IsNullOrWhiteSpace(_tankNoFilter)
            ? _allTanks ?? Enumerable.Empty<Tank>().AsQueryable()
            : (_allTanks?.Where(t => t.TankNo.Contains(_tankNoFilter, StringComparison.OrdinalIgnoreCase))
              ?? Enumerable.Empty<Tank>().AsQueryable());

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await LoadTanks();
        _isLoading = false;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _filterDebounceTimer?.Dispose();
        GC.SuppressFinalize(this);
    }

    #endregion

    #region Data Methods

    private async Task LoadTanks()
    {
        try
        {
            // First get the list asynchronously
            var tanksList = await DataContext.Tanks
                .AsNoTracking()
                .OrderBy(t => t.TankNo)
                .ToListAsync();

            // Then convert to IQueryable
            _allTanks = tanksList.AsQueryable();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error loading tanks: {ex.Message}");
            // Consider adding error state handling in the UI
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnFilterDebounced(object? state)
    {
        InvokeAsync(StateHasChanged);
    }

    private void ClearFilter()
    {
        tankNoFilter = string.Empty;
    }

    #endregion

    #region Navigation Methods

    private void NavigateToAddTank()
    {
        NavigationManager.NavigateTo("/TankAdd");
    }

    private void NavigateToEditTank(Tank tank)
    {
        NavigationManager.NavigateTo($"/TankEdit/{tank.TankID}");
    }

    private void NavigateToDeleteTank(Tank tank)
    {
        NavigationManager.NavigateTo($"/TankDelete/{tank.TankID}");
    }

    #endregion
}