@page "/Tank"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject DataContext DataContext
@inject NavigationManager NavigationManager


<div class="row">
    <div class="col-6">
        <h3>Tank</h3>
    </div>
    <div class="col-6">
        <button class="btn btn-outline-primary btn-xs float-end" @onclick="() => AddTank()">New Tank</button>
    </div>
</div>
<br />
<div class="page-size-chooser">
    Items per page:
    <select @bind="@Pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>20</option>
        <option>50</option>
    </select>
</div>
<br />
@if (totalRow > 0)
{
    <div>
        <QuickGrid Items="FilteredItems" Virtualize="false" Pagination="@Pagination" Class="table table-striped table-hover text-center table-bordered">
            <PropertyColumn Property="@(tank => tank.TankNo)" Title="TankNo" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Tank no..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(tank => tank.Capacity)" Title="Capacity (MT)" Sortable="true" />
            <PropertyColumn Property="@(tank => tank.InternalCoating)" Title="Internal Coating" Sortable="true" />
            <TemplateColumn Title="Actions">
                <button @onclick="@(() => EditTank(context))" class="btn btn-warning"><span class="oi oi-pencil"></span></button>
                <button @onclick="@(() => SoftDeleteTank(context))" class="btn btn-danger"><span class="oi oi-trash"></span></button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="@Pagination" />
}
else{
    <p>No Tanks Found.</p>
}

@code {
    IQueryable<Tank>? pagedTanks;
    int totalRow = 0;
    List<Tank> Tanks => DataContext.Tanks.ToList();
    PaginationState Pagination = new PaginationState { ItemsPerPage = 5 };
    string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        pagedTanks = Tanks.AsQueryable();
        totalRow = pagedTanks.Count();
    }

    private void AddTank()
    {
        NavigationManager.NavigateTo($"/TankAdd/");
    }

    private void EditTank(Tank tank)
    {
        NavigationManager.NavigateTo($"/TankEdit/{tank.TankID}");
    }


    private void SoftDeleteTank(Tank tank)
    {
        NavigationManager.NavigateTo($"/TankDelete/{tank.TankID}");
    }

    IQueryable<Tank> FilteredItems
    {
        get
        {
            string x = null;
            var result = pagedTanks;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.TankNo.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }
}
