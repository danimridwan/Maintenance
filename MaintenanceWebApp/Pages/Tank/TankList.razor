@page "/Tank"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject DataContext DataContext
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="card">
    <div class="row px-3">
        <div class="col-sm-5 form-group">
            <h5 class="display-6">Tank</h5>
            @if (HasTanks)
            {
                @if (TankCount > 5)
                {
                    <div class="page-size-chooser my-2">
                        Items per page:
                        <select @bind="@Pagination.ItemsPerPage">
                            <option>5</option>
                            @if (TankCount > 10)
                            {
                                <option>10</option>
                            }
                            @if (TankCount > 20)
                            {
                                <option>20</option>
                            }
                        </select>
                    </div>
                }
            }
        </div>
        <div class="col-sm-4"></div>
        <div class="col-sm-3 d-flex align-items-center justify-content-end">
            <button class="btn btn-primary btn-xs float-end" @onclick="() => NavigateToAddTank()">
                Add Tank
            </button>
        </div>
    </div>

    <div class="px-3">
        @if (_isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading pump data...</p>
            </div>
        }
        else if (!HasTanks)
        {
            <hr />
            <div class="text-center py-3">
                <p>No tanks found.</p>
                @if (!string.IsNullOrEmpty(tankNoFilter))
                {
                    <button class="btn btn-link" @onclick="ClearFilter">Clear filter</button>
                }
            </div>
        }
        else
        {
            <QuickGrid Items="FilteredTanks" Virtualize="false" Pagination="@Pagination" Class="table table-striped table-hover text-center table-bordered">
                <PropertyColumn Property="@(tank => tank.TankNo)" Title="TankNo" Sortable="true">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="_tankNoFilter" @bind:event="oninput" placeholder="Tank no..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(tank => tank.Capacity)" Title="Capacity (MT)" Sortable="true" />
                <PropertyColumn Property="@(tank => tank.InternalCoating)" Title="Internal Coating" Sortable="true" />
                <TemplateColumn Title="Actions">
                    <button @onclick="@(() => NavigateToEditTank(context))" class="btn btn-warning"><span class="oi oi-pencil"></span></button>
                    <button @onclick="@(() => NavigateToDeleteTank(context))" class="btn btn-danger"><span class="oi oi-trash"></span></button>
                </TemplateColumn>
            </QuickGrid>

            <Paginator State="@Pagination" />
        }
    </div>

</div>


@code {
    #region Fields and Properties

    private IQueryable<Tank>? _allTanks;
    private string _tankNoFilter = string.Empty;
    private Timer? _filterDebounceTimer;
    private const int DebounceInterval = 300; // milliseconds
    private bool _isLoading = true;

    private readonly int[] PageSizeOptions = new[] { 5, 10, 20 };

    public PaginationState Pagination { get; } = new() { ItemsPerPage = 5 };

    public bool HasTanks => !_isLoading && (_allTanks?.Any() ?? false);
    public int TankCount => _allTanks?.Count() ?? 0;

    public string tankNoFilter
    {
        get => _tankNoFilter;
        set
        {
            if (_tankNoFilter != value)
            {
                _tankNoFilter = value;
                _filterDebounceTimer?.Dispose();
                _filterDebounceTimer = new Timer(OnFilterDebounced, null, DebounceInterval, Timeout.Infinite);
            }
        }
    }

    public int ItemsPerPage
    {
        get => Pagination.ItemsPerPage;
        set
        {
            if (Pagination.ItemsPerPage != value)
            {
                Pagination.ItemsPerPage = value;
                StateHasChanged();
            }
        }
    }

    public IQueryable<Tank> FilteredTanks =>
        string.IsNullOrWhiteSpace(_tankNoFilter)
            ? _allTanks ?? Enumerable.Empty<Tank>().AsQueryable()
            : (_allTanks?.Where(t => t.TankNo.Contains(_tankNoFilter, StringComparison.OrdinalIgnoreCase))
              ?? Enumerable.Empty<Tank>().AsQueryable());

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await LoadTanks();
        _isLoading = false;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _filterDebounceTimer?.Dispose();
        GC.SuppressFinalize(this);
    }

    #endregion

    #region Data Methods

    private async Task LoadTanks()
    {
        try
        {
            // First get the list asynchronously
            var tanksList = await DataContext.Tanks
                .AsNoTracking()
                .OrderBy(t => t.TankNo)
                .ToListAsync();

            // Then convert to IQueryable
            _allTanks = tanksList.AsQueryable();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error loading tanks: {ex.Message}");
            // Consider adding error state handling in the UI
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnFilterDebounced(object? state)
    {
        InvokeAsync(StateHasChanged);
    }

    private void ClearFilter()
    {
        tankNoFilter = string.Empty;
    }

    #endregion

    #region Navigation Methods

    private void NavigateToAddTank()
    {
        NavigationManager.NavigateTo("/TankAdd");
    }

    private void NavigateToEditTank(Tank tank)
    {
        NavigationManager.NavigateTo($"/TankEdit/{tank.TankID}");
    }

    private void NavigateToDeleteTank(Tank tank)
    {
        NavigationManager.NavigateTo($"/TankDelete/{tank.TankID}");
    }

    #endregion
}