@page "/UserDelete/{Id}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor")]

<div class="card">
    <div class="card-body">
        @if (isDataLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Memuat...</span>
                </div>
                <p>Memuat data pengguna...</p>
            </div>
        }
        else if (user == null)
        {
            <div class="text-center py-3">
                <p>Data pengguna tidak ditemukan atau terjadi kesalahan saat memuat.</p>
                <button type="button" class="btn btn-secondary mt-3" @onclick="GoBack">Kembali</button>
            </div>
        }
        else
        {
            <h3>Hapus Pengguna</h3>
            <hr />
            <p>Anda yakin ingin menghapus pengguna dengan Nama <b>@user.FullName</b> dan Email <b>@user.Email</b>?</p>
            <button type="button" class="btn btn-danger me-2" @onclick="DeleteUserAsync">Hapus</button>
            <button type="button" class="btn btn-secondary" @onclick="GoBack">Batal</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = default!;

    private User? user;
    private bool isDataLoading = true;

    // Konstanta
    private const string SUBFOLDER_NAME = "User";

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsync();
        isDataLoading = false;
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadUserAsync()
    {
        try
        {
            user = await CRUDService.ReadSingleAsync<User, string>(Id);
            if (user == null)
            {
                await NotificationService.AlertMessage("Pengguna tidak ditemukan.");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat data pengguna. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Gagal memuat data pengguna dengan ID {Id}. Detail: {ex.Message}");
            user = null; // Memastikan user null agar UI menunjukkan pesan error
        }
    }

    private async Task DeleteUserAsync()
    {
        if (user == null)
        {
            await NotificationService.AlertMessage("Pengguna tidak ditemukan. Operasi penghapusan dibatalkan.");
            return;
        }

        try
        {
            // Menghapus file terkait terlebih dahulu
            await DeleteAssociatedFilesAsync();

            // Menghapus record pengguna dari database
            await CRUDService.DeleteAsync(user);

            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menghapus pengguna dari database. Silakan hubungi administrator.");
                NotificationService.LogMessage($"Gagal menghapus pengguna dari database. Detail: {CRUDService.CRUDErrorMessage}");
                return;
            }

            NavigationManager.NavigateTo("/UserList?status=DeleteSuccess");
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat menghapus pengguna. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Kesalahan saat menghapus pengguna dengan ID {user.Id}. Detail: {ex.Message}");
        }
    }

    private async Task DeleteAssociatedFilesAsync()
    {
        var filesToDelete = new List<string?>();

        if (!string.IsNullOrWhiteSpace(user?.UserPhoto))
        {
            filesToDelete.Add(user.UserPhoto);
        }
        if (!string.IsNullOrWhiteSpace(user?.Signature))
        {
            filesToDelete.Add(user.Signature);
        }

        foreach (var filePath in filesToDelete)
        {
            if (string.IsNullOrWhiteSpace(filePath)) continue;

            await UploadService.FileChange(filePath, SUBFOLDER_NAME);

            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                NotificationService.LogMessage($"Gagal menghapus file '{filePath}'. Detail: {UploadService.UploadErrorMessage}");
            }
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("./UserList");
    }
}