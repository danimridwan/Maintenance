@page "/ChangePassword"
@attribute [Authorize]
@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

@* Services *@
@inject IdentityService IdentityService
@inject NotificationService NotificationService

<PageTitle>Ganti Kata Sandi</PageTitle>

<div class="card">
    <div class="card-header bg-light border-primary">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Ganti Kata Sandi</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Memuat...</span>
                </div>
                <p>Memuat data pengguna...</p>
            </div>
        }
        else if (user == null)
        {
            <div class="alert alert-danger" role="alert">
                Tidak dapat memuat informasi pengguna. Silakan coba lagi.
            </div>
        }
        else if (!hasPassword)
        {
            <div class="alert alert-warning" role="alert">
                Anda belum mengatur kata sandi. Silakan <a href="/Identity/Account/Manage/SetPassword">atur kata sandi Anda</a> terlebih dahulu.
            </div>
        }
        else
        {
            <EditForm Model="@input" OnValidSubmit="HandleValidSubmitAsync" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-info" role="alert">@statusMessage</div>
                    }

                    <div class="form-floating mb-3">
                        <InputText type="password" id="OldPassword" @bind-Value="input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Masukkan kata sandi saat ini." />
                        <label for="OldPassword" class="form-label">Kata sandi saat ini</label>
                        <ValidationMessage For="@(() => input.OldPassword)" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" id="NewPassword" @bind-Value="input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Masukkan kata sandi baru." />
                        <label for="NewPassword" class="form-label">Kata sandi baru</label>
                        <ValidationMessage For="@(() => input.NewPassword)" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" id="ConfirmPassword" @bind-Value="input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Konfirmasi kata sandi baru." />
                        <label for="ConfirmPassword" class="form-label">Konfirmasi kata sandi baru</label>
                        <ValidationMessage For="@(() => input.ConfirmPassword)" class="text-danger" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Perbarui Kata Sandi</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    // State Halaman
    private User? user;
    private bool isLoading = true;
    private bool hasPassword = false;
    private string? statusMessage;
    private InputModel input = new();

    // Model Input Formulir
    public class InputModel
    {
        [Required(ErrorMessage = "Kata sandi lama wajib diisi.")]
        [DataType(DataType.Password)]
        public string? OldPassword { get; set; }

        [Required(ErrorMessage = "Kata sandi baru wajib diisi.")]
        [StringLength(100, ErrorMessage = "{0} harus setidaknya {2} dan maksimal {1} karakter.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "Kata sandi baru dan konfirmasi kata sandi tidak cocok.")]
        public string? ConfirmPassword { get; set; }
    }

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        statusMessage = null;

        try
        {
            var authState = await authenticationStateTask!;
            var userPrincipal = authState?.User;

            if (userPrincipal == null || !userPrincipal.Identity!.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
                return;
            }

            user = await IdentityService.GetCurrentUserAsync(userPrincipal);
            if (user != null)
            {
                hasPassword = await IdentityService.HasPasswordAsync(user);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Terjadi kesalahan saat memuat data pengguna.");
            NotificationService.LogMessage($"Error loading user data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Metode Penanganan Formulir
    private async Task HandleValidSubmitAsync()
    {
        isLoading = true;
        statusMessage = null;

        if (user == null)
        {
            await HandleErrorAsync("Error: Pengguna tidak ditemukan.");
            isLoading = false;
            return;
        }

        try
        {
            var result = await IdentityService.ChangePasswordAsync(user, input.OldPassword!, input.NewPassword!);

            if (result.Succeeded)
            {
                statusMessage = "Berhasil mengganti kata sandi.";
                await NotificationService.AlertMessage(statusMessage);
            }
            else
            {
                var errorMessages = string.Join(" ", result.Errors.Select(e => e.Description));
                await HandleErrorAsync(errorMessages);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync("Terjadi kesalahan tak terduga saat mengubah kata sandi.");
            NotificationService.LogMessage($"Unexpected error while changing password for user '{user.Id}'. Detail: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleInvalidSubmitAsync()
    {
        statusMessage = "Mohon periksa kembali input Anda. Ada beberapa kesalahan yang perlu diperbaiki.";
        await NotificationService.AlertMessage(statusMessage);
    }

    // Metode Bantuan (Helper Methods)
    private async Task HandleErrorAsync(string message)
    {
        statusMessage = message;
        await NotificationService.AlertMessage(message);
    }
}