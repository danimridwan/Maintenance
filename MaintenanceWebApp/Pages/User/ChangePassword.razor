@page "/ChangePassword"
@attribute [Authorize]
@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using System.ComponentModel.DataAnnotations
@inject IdentityService _identityService
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService

<PageTitle>Change Password</PageTitle>

<div class="card">
    <div class="card-header bg-light border-primary">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi User</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (_isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Memuat Data User...</p>
            </div>
        }
        else if (_user == null)
        {
            <div class="alert alert-danger" role="alert">
                Tidak dapat memuat informasi pengguna.
            </div>
        }
        else if (!_hasPassword)
        {
            <div class="alert alert-warning" role="alert">
                Anda belum mengatur kata sandi. Silakan <a href="/Identity/Account/Manage/SetPassword">atur kata sandi Anda</a> terlebih dahulu.
            </div>
        }
        else
        {
            <EditForm Model="@_input" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                @if (!string.IsNullOrEmpty(_statusMessage))
                {
                    <div class="alert alert-info" role="alert">@_statusMessage</div>
                }

                <div class="form-floating mb-3">
                    <InputText id="OldPassword" @bind-Value="_input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                    <label for="OldPassword" class="form-label">Current password</label>
                    <ValidationMessage For="@(() => _input.OldPassword)" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="NewPassword" @bind-Value="_input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                    <label for="NewPassword" class="form-label">New password</label>
                    <ValidationMessage For="@(() => _input.NewPassword)" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="ConfirmPassword" @bind-Value="_input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                    <label for="ConfirmPassword" class="form-label">Confirm new password</label>
                    <ValidationMessage For="@(() => _input.ConfirmPassword)" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
            </EditForm>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private User? _user;
    private bool _isLoading = true;
    private bool _hasPassword = false;
    private string? _statusMessage;

    private InputModel _input = new InputModel();

    public class InputModel
    {
        [Required(ErrorMessage = "Password lama wajib diisi.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password Lama")]
        public string? OldPassword { get; set; }

        [Required(ErrorMessage = "Password baru wajib diisi.")]
        [StringLength(100, ErrorMessage = "{0} harus setidaknya {2} dan maksimal {1} karakter panjangnya.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password Baru")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Konfirmasi Password Baru")]
        [Compare("NewPassword", ErrorMessage = "Password baru dan konfirmasi password tidak cocok.")]
        public string? ConfirmPassword { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            var authState = await authenticationStateTask!;
            var userPrincipal = authState?.User;

            if (userPrincipal == null || !userPrincipal.Identity!.IsAuthenticated)
            {
                _navigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={Uri.EscapeDataString(_navigationManager.Uri)}");
                return;
            }

            _user = await _identityService.GetCurrentUserAsync(userPrincipal);

            if (_user != null)
            {
                _hasPassword = await _identityService.HasPasswordAsync(_user);
                if (!_hasPassword)
                {
                    _navigationManager.NavigateTo("/Identity/Account/Manage/SetPassword");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            _notificationService.AlertMessage("Terjadi kesalahan saat memuat data pengguna.");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        _isLoading = true;
        _statusMessage = null;
        try
        {
            if (_user == null)
            {
                _statusMessage = "Error: User tidak ditemukan.";
                _notificationService.AlertMessage(_statusMessage);
                return;
            }

            var result = await _identityService.ChangePasswordAsync(_user, _input.OldPassword!, _input.NewPassword!);

            if (result.Succeeded)
            {   
                _statusMessage = "Berhasil mengganti password.";
                _notificationService.AlertMessage(_statusMessage);
                StateHasChanged();
                return;
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    _statusMessage = $"Error: {error.Description}";
                }
                if (!result.Errors.Any())
                {
                    _statusMessage = "Gagal mengubah password. Silakan coba lagi.";
                }
                _notificationService.AlertMessage(_statusMessage);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _statusMessage = "Terjadi kesalahan tak terduga saat mengubah password.";
            _notificationService.AlertMessage(_statusMessage);
            StateHasChanged();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleInvalidSubmit()
    {
        _statusMessage = "Mohon periksa kembali input Anda. Ada beberapa kesalahan yang perlu diperbaiki.";
        await _notificationService.AlertMessage(_statusMessage);
    }
}