@page "/UserAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DataContext> DbFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole> RoleManager

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor")]

<div class="card">
	@* Status Pemuatan *@
	@if (isLoading)
	{
		<div class="text-center py-3">
			<div class="spinner-border text-primary" role="status">
				<span class="visually-hidden">Memuat...</span>
			</div>
			<p>Memuat data pengguna...</p>
		</div>
	}
	@* Formulir Pengguna *@
	else
	{
		<div class="card-header bg-light border-primary">
			<ul class="nav nav-tabs card-header-tabs">
				<li class="nav-item">
					<a style="cursor: pointer;" @onclick="CancelAsync" class="nav-link" aria-label="Kembali">
						<span class="oi oi-chevron-left"></span>
					</a>
				</li>
				<li class="nav-item">
					<span class="nav-link active" aria-current="page">Tambah Pengguna</span>
				</li>
			</ul>
		</div>
		<div class="card-body">
			<EditForm Model="user" OnValidSubmit="HandleCreateUserAsync" OnInvalidSubmit="HandleInvalidSubmitAsync">
				<DataAnnotationsValidator />
				<div class="row">
					<div class="col-sm-6 mb-3">
						<label for="fullName" class="col-form-label">Nama Lengkap <span class="required">*</span></label>
						<InputText id="fullName" @bind-Value="user.FullName" class="form-control" />
						<ValidationMessage For="@(() => user.FullName)" />
					</div>

					<div class="col-sm-6 mb-3">
						<label for="email" class="col-form-label">Email <span class="required">*</span></label>
						<InputText id="email" @bind-Value="user.Email" class="form-control" />
						<ValidationMessage For="@(() => user.Email)" />
					</div>
				</div>

				<div class="row">
					<div class="col-sm-6 mb-3">
						<label for="phoneNumber" class="col-form-label">Nomor Telepon <span class="required">*</span></label>
						<InputText id="phoneNumber" @bind-Value="user.PhoneNumber" class="form-control" />
						@if (validationMessages.ContainsKey("phoneNumber"))
						{
							<div class="text-danger mt-2">@validationMessages["phoneNumber"]</div>
						}
					</div>

					<div class="col-sm-6 mb-3">
						<label for="role" class="col-form-label">Role <span class="required">*</span></label>
						<InputSelect id="role" @bind-Value="user.Role" class="form-control">
							<option value="">...</option>
							@foreach (var role in USER_ROLES)
							{
								<option value="@role">@role</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => user.Role)" />
						@if (validationMessages.ContainsKey("role"))
						{
							<div class="text-danger mt-2">@validationMessages["role"]</div>
						}
					</div>
				</div>

				@if (user.Role == "Supervisor" || user.Role == "Manager")
				{
					<div class="col-sm-12 mb-3">
						<label for="section" class="col-form-label">Section <span class="required">*</span></label>
						<InputSelect id="section" @bind-Value="user.Section" class="form-control">
							<option value="">...</option>
							@foreach (var sect in USER_SECTIONS)
							{
								<option value="@sect">@sect</option>
							}
						</InputSelect>
						@if (validationMessages.ContainsKey("section"))
						{
							<div class="text-danger mt-2">@validationMessages["section"]</div>
						}
					</div>
				}

				@if (user.Role == "Maintenance")
				{
					<div class="col-sm-12 mb-3">
						<label for="maintenanceDivision" class="col-form-label">Divisi <span class="required">*</span></label>
						<InputSelect id="maintenanceDivision" @bind-Value="user.RoleCategory" class="form-control">
							<option value="">...</option>
							@foreach (var div in MAINTENANCE_DIVISIONS)
							{
								<option value="@div">@div</option>
							}
						</InputSelect>
						@if (validationMessages.ContainsKey("roleCategory"))
						{
							<div class="text-danger mt-2">@validationMessages["roleCategory"]</div>
						}
					</div>
				}

				@if (user.Role == "Supervisor" && user.Section == "Operation")
				{
					<div class="col-sm-12 mb-3">
						<label for="supervisorDivision" class="col-form-label">Divisi <span class="required">*</span></label>
						<InputSelect id="supervisorDivision" @bind-Value="user.RoleCategory" class="form-control">
							<option value="">...</option>
							@foreach (var div in OPERATIONAL_SUPERVISOR_DIVISIONS)
							{
								<option value="@div">@div</option>
							}
						</InputSelect>
						@if (validationMessages.ContainsKey("roleCategory"))
						{
							<div class="text-danger mt-2">@validationMessages["roleCategory"]</div>
						}
					</div>
				}

				@if (user.Role != "Admin")
				{
					<div class="col-sm-12 mb-3">
						<label for="signatureUpload" class="col-form-label">Tanda Tangan <span class="required">*</span></label>
						@if (string.IsNullOrWhiteSpace(user.Signature))
						{
							<InputFile id="signatureUpload" class="form-control" accept=".jpg,.jpeg,.png" OnChange="HandleSignatureUploadAsync" />
							<small class="form-text text-muted">Unggah foto tanda tangan digital (JPG, JPEG, PNG).</small>
						}
						else
						{
							<div class="d-flex align-items-center">
								<img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(user.Signature)" alt="Tanda Tangan Pengguna">
								<button @onclick="HandleSignatureChange" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
							</div>
						}
						@if (validationMessages.ContainsKey("signature"))
						{
							<div class="text-danger mt-2">@validationMessages["signature"]</div>
						}
					</div>
				}

				<div class="col-sm-12 mb-3">
					<label for="profilePhoto" class="col-form-label">Foto Profil</label>
					@if (string.IsNullOrWhiteSpace(user.UserPhoto))
					{
						<InputFile id="profilePhoto" class="form-control" accept=".jpg,.jpeg,.png" OnChange="HandleProfilePhotoUploadAsync" />
						<small class="form-text text-muted">Opsional: Unggah foto profil pengguna (JPG, JPEG, PNG).</small>
					}
					else
					{
						<div class="d-flex align-items-center">
							<img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(user.UserPhoto)" alt="Foto Pengguna">
							<button @onclick="HandleProfilePhotoChange" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
						</div>
					}
				</div>

				<div class="d-flex align-items-center mt-2">
					<label class="col-form-label me-2" for="customPasswordCheckbox">
						<b>Gunakan kata sandi khusus?</b>
					</label>
					<InputCheckbox id="customPasswordCheckbox" @bind-Value="useCustomPassword" />
				</div>
				<small class="form-text text-muted mb-2">Jika tidak menggunakan kata sandi khusus, maka kata sandi default menggunakan email.</small>

				@if (useCustomPassword)
				{
					<div class="col-sm-12 mb-2">
						<label for="password" class="col-form-label">Kata Sandi <span class="required">*</span></label>
						<InputText id="password" @bind-Value="userPassword" class="form-control" />
						<ValidationMessage For="@(() => userPassword)" />
					</div>
				}

				<div class="float-end mt-3">
					<button type="button" class="btn btn-secondary me-2" @onclick="CancelAsync">Batal</button>
					<button type="submit" class="btn btn-primary">Simpan</button>
				</div>
			</EditForm>
		</div>
	}
</div>

@code {
	// Properti State
	private User user = new();
	private bool isLoading = true;

	// Properti Halaman
	private DotNetObjectReference<UserAdd> dotNetHelper;

	// State Formulir
	private bool useCustomPassword = false;
	private string userPassword = string.Empty;
	private Dictionary<string, string> validationMessages = new();

	// Konstanta dan State Unggahan File
	private const string SUB_FOLDER_NAME = "User";
	private const string FILE_CATEGORY = "img";
	private const string FOLDER_NAME = "Image";
	private string webUserRoot = string.Empty;

	// Konstanta untuk dropdown
	private readonly List<string> USER_SECTIONS = new() { "Operation", "Formalities", "HSE", "HR/GA", "Security" };
	private readonly List<string> USER_ROLES = new() { "Admin", "Supervisor", "Manager", "Maintenance", "Maintenance Supervisor", "Terminal Manager" };
	private readonly List<string> MAINTENANCE_DIVISIONS = new() { "Electrical", "Mechanical", "IT", "Civil" };
	private readonly List<string> OPERATIONAL_SUPERVISOR_DIVISIONS = new() { "Storage", "Delivery", "Receiving" };

	// Metode Lifecycle
	protected override async Task OnInitializedAsync()
	{
		await LoadConfigurationAsync();
		isLoading = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			dotNetHelper = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
		}
	}

	[JSInvokable]
	public async Task HandleBackNavigation()
	{
		await CancelAsync();
	}

	// Metode Bantuan (Helper Methods)
	private async Task LoadConfigurationAsync()
	{
		try
		{
			webUserRoot = Configuration.GetValue<string>("WebUserRoot") ?? "/";
		}
		catch (Exception ex)
		{
			await NotificationService.AlertMessage("Gagal memuat konfigurasi `WebUserRoot`. Silakan hubungi Administrator.");
			NotificationService.LogMessage($"Gagal memuat konfigurasi `WebUserRoot`: {ex}");
		}
	}

	private async Task HandleCreateUserAsync()
	{
		if (!ValidateForm())
		{
			await NotificationService.AlertMessage("Cek kembali input. Terdapat isian yang tidak valid.");
			return;
		}

		user.UserName = user.Email;
		user.EmailConfirmed = true;
		user.NormalizedEmail = user.Email?.ToUpperInvariant();
		user.NormalizedUserName = user.UserName?.ToUpperInvariant();

		string password = useCustomPassword ? userPassword : user.Email ?? Guid.NewGuid().ToString();

		try
		{
			var roleExists = await RoleManager.RoleExistsAsync(user.Role);
			if (!roleExists)
			{
				await RoleManager.CreateAsync(new IdentityRole(user.Role));
			}

			var createResult = await UserManager.CreateAsync(user, password);
			if (createResult.Succeeded)
			{
				var addToRoleResult = await UserManager.AddToRoleAsync(user, user.Role);
				if (addToRoleResult.Succeeded)
				{
					NavigationManager.NavigateTo("/UserList?status=CreateSuccess");
				}
				else
				{
					await UserManager.DeleteAsync(user);
					await NotificationService.AlertMessage($"Gagal menambahkan pengguna ke role '{user.Role}'. Detail: {string.Join(", ", addToRoleResult.Errors.Select(e => e.Description))}");
					NotificationService.LogMessage($"Gagal menambahkan pengguna ke role. User ID: {user.Id}. Kesalahan: {string.Join(", ", addToRoleResult.Errors.Select(e => e.Description))}");
				}
			}
			else
			{
				await NotificationService.AlertMessage($"Gagal membuat pengguna. Detail: {string.Join(", ", createResult.Errors.Select(e => e.Description))}");
				NotificationService.LogMessage($"Gagal membuat pengguna. Kesalahan: {string.Join(", ", createResult.Errors.Select(e => e.Description))}");
			}
		}
		catch (Exception ex)
		{
			await NotificationService.AlertMessage("Terjadi kesalahan tak terduga saat membuat pengguna. Silakan coba lagi.");
			NotificationService.LogMessage($"Kesalahan tak terduga saat membuat pengguna: {ex.Message}");
		}
	}

	private bool ValidateForm()
	{
		validationMessages.Clear();
		bool isValid = true;

		if (string.IsNullOrWhiteSpace(user.PhoneNumber))
		{
			validationMessages["phoneNumber"] = "Nomor telepon harus diisi.";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(user.Role))
		{
			validationMessages["role"] = "Jabatan harus dipilih.";
			isValid = false;
		}

		if ((user.Role == "Supervisor" || user.Role == "Manager") && string.IsNullOrWhiteSpace(user.Section))
		{
			validationMessages["section"] = "Bagian harus dipilih.";
			isValid = false;
		}

		if (user.Role == "Maintenance" && string.IsNullOrWhiteSpace(user.RoleCategory))
		{
			validationMessages["roleCategory"] = "Divisi harus dipilih.";
			isValid = false;
		}

		if (user.Role == "Supervisor" && user.Section == "Operation" && string.IsNullOrWhiteSpace(user.RoleCategory))
		{
			validationMessages["roleCategory"] = "Divisi harus dipilih.";
			isValid = false;
		}

		if (user.Role != "Admin" && string.IsNullOrWhiteSpace(user.Signature))
		{
			validationMessages["signature"] = "Tanda tangan harus diunggah.";
			isValid = false;
		}

		if (useCustomPassword && string.IsNullOrWhiteSpace(userPassword))
		{
			validationMessages["userPassword"] = "Kata sandi harus diisi jika menggunakan kata sandi khusus.";
			isValid = false;
		}

		return isValid;
	}

	private Task HandleInvalidSubmitAsync()
	{
		return NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
	}

	private async Task HandleProfilePhotoUploadAsync(InputFileChangeEventArgs e)
	{
		await HandleFileUploadAsync(e.File, fileType: "UserPhoto");
	}

	private async Task HandleSignatureUploadAsync(InputFileChangeEventArgs e)
	{
		await HandleFileUploadAsync(e.File, fileType: "Signature");
	}

	private async Task HandleFileUploadAsync(IBrowserFile file, string fileType)
	{
		try
		{
			await UploadService.FilesUpload(file, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);

			if (string.IsNullOrEmpty(UploadService.UploadErrorMessage))
			{
				if (fileType == "UserPhoto")
				{
					user.UserPhoto = UploadService.FilePath;
				}
				else
				{
					user.Signature = UploadService.FilePath;
				}
			}
			else
			{
				await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
				NotificationService.LogMessage($"Pengunggahan gambar gagal: {UploadService.UploadErrorMessage}");
			}
		}
		catch (Exception ex)
		{
			await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
			NotificationService.LogMessage($"Pengecualian saat mengunggah file: {ex.Message}");
		}
	}

	private async Task HandleProfilePhotoChange()
	{
		await HandleFileChangeAsync(user.UserPhoto, "UserPhoto");
	}

	private async Task HandleSignatureChange()
	{
		await HandleFileChangeAsync(user.Signature, "Signature");
	}

	private async Task HandleFileChangeAsync(string? filePath, string fileType)
	{
		if (string.IsNullOrWhiteSpace(filePath)) return;

		try
		{
			await UploadService.FileChange(filePath, SUB_FOLDER_NAME);

			if (fileType == "UserPhoto")
			{
				user.UserPhoto = null;
			}
			else
			{
				user.Signature = null;
			}
		}
		catch (Exception ex)
		{
			await NotificationService.AlertMessage("Terjadi kesalahan saat mengganti file. Silakan coba lagi.");
			NotificationService.LogMessage($"Pengecualian saat mengganti file: {ex.Message}");
		}
	}

	private string CreateFilePath(string? relativePath)
	{
		if (string.IsNullOrWhiteSpace(relativePath))
		{
			return "/noimg.png";
		}
		return Path.Combine(webUserRoot, relativePath).Replace("\\", "/");
	}

	private async Task CancelAsync()
	{
		if (user == null)
        {
            await JSRuntime.InvokeVoidAsync("blazorInterop.replaceHistoryState");
            await JSRuntime.InvokeVoidAsync("history.back");
            return;
        }

		if (!string.IsNullOrWhiteSpace(user.UserPhoto))
		{
			await UploadService.FileChange(user.UserPhoto, SUB_FOLDER_NAME);
		}

		if (!string.IsNullOrWhiteSpace(user.Signature))
		{
			await UploadService.FileChange(user.Signature, SUB_FOLDER_NAME);
		}

		await JSRuntime.InvokeVoidAsync("blazorInterop.replaceHistoryState");
		await JSRuntime.InvokeVoidAsync("history.back");
	}

	public void Dispose()
	{
		dotNetHelper?.Dispose();
		JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
	}
}