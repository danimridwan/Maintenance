@page "/UserAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DataContext> DbFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserManager<User> employeeManager
@inject RoleManager<IdentityRole> roleManager

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor")]

<div class="card">
    @* Loading *@
    @if (_isLoading)
    {
        <div class="text-center py-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Memuat Data User...</p>
        </div>
    }
    @* No Data *@
    else if (user == null)
    {
        <div class="text-center py-3">
            <p>Tidak ada User dengan ID ini atau terjadi kesalahan saat memuat.</p>
        </div>
    }
    @* User Information *@
    else
    {
        <div class="card-header bg-light border-primary">
        @* Tab Header *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a style="cursor: pointer;" @onclick="GoBack" class="nav-link" aria-label="Kembali">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi User</span>
            </li>
        </ul>
    </div>
        <div class="card-body">
        @* Form Add *@
        <EditForm Model="user" OnValidSubmit="HandleCreateUser" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="col-sm-12 mb-3">
                <label for="NamaLengkap" class="col-form-label">Nama Lengkap <span class="required">*</span></label>
                <InputText id="NamaLengkap" @bind-Value="user.FullName" class="form-control" />
                <ValidationMessage For="@(() => user.FullName)" />
            </div>

            <div class="col-sm-12">
                <label for="Email" class="col-form-label">Email <span class="required">*</span></label>
                <InputText id="Email" @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>

            <div class="col-sm-12">
                <label for="NomorTelepon" class="col-form-label">Nomor Telepon <span class="required">*</span></label>
                <InputText id="NomorTelepon" @bind-Value="user.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => user.PhoneNumber)" />
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Role" class="col-form-label">Role <span class="required">*</span></label>
                <InputSelect id="Role" @bind-Value="user.Role" class="form-control">
                    <option value="">...</option>
                    @foreach (var role in userRole)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => user.Role)" />
            </div>

            @if (user.Role == "Supervisor" || user.Role == "Manager")
            {
                <div class="col-sm-12 mb-3">
                    <label for="Section" class="col-form-label">Section <span class="required">*</span></label>
                    <InputSelect id="Section" @bind-Value="user.Section" class="form-control">
                        <option value="">...</option>
                        @foreach (var sect in userSection)
                        {
                            <option value="@sect">@sect</option>
                        }
                    </InputSelect>

                    @if (!string.IsNullOrWhiteSpace(SectionErrorMesssage))
                    {
                        <div class="text-danger mt-2">@SectionErrorMesssage</div>
                    }
                </div>
            }

            @if(user.Role == "Maintenance")
            {
                <div class="col-sm-12 mb-3">
                    <label for="Role" class="col-form-label">Divisi Maintenance <span class="required">*</span></label>
                    <InputSelect id="Role" @bind-Value="user.RoleCategory" class="form-control" required>
                        <option value="">...</option>
                        @foreach (var mtd in maintenanceDivision)
                        {
                            <option value="@mtd">@mtd</option>
                        }
                    </InputSelect>

                    @if (!string.IsNullOrWhiteSpace(MaintenanceErrorMesssage))
                    {
                        <div class="text-danger mt-2">@MaintenanceErrorMesssage</div>
                    }
                </div>
            }

            @if (user.Section == "Operation" && user.Role == "Supervisor")
            {
                <div class="col-sm-12 mb-3">
                    <label for="Role" class="col-form-label">Divisi Supervisor <span class="required">*</span></label>
                    <InputSelect id="Role" @bind-Value="user.RoleCategory" class="form-control" required>
                        <option value="">...</option>
                        @foreach (var div in operationalSupervisorDivision)
                        {
                            <option value="@div">@div</option>
                        }
                    </InputSelect>

                    @if (!string.IsNullOrWhiteSpace(OperationSupervisorErrorMesssage))
                    {
                        <div class="text-danger mt-2">@OperationSupervisorErrorMesssage</div>
                    }
                </div>
            }

            @if (user.Role == "Supervisor" || user.Role == "Manager" || user.Role == "Terminal Manager" || user.Role == "Maintenance" || user.Role == "Maintenance Supervisor")
            {
                <div class="col-sm-12 mb-3">
                    <label for="FotoTandaTangan" class="col-form-label">Foto Tanda Tangan</label>
                    @if (string.IsNullOrWhiteSpace(user.Signature))
                    {
                        <InputFile id="Foto" class="form-control"
                        accept=".jpg,.jpeg,.png"
                        OnChange="HandleSignatureUpload" />
                        <ValidationMessage For="@(() => user.Signature)" />
                        <label style="font-size: x-small; font-weight: 500;"><span class="required">*</span>Upload foto tanda tangan digital dari calon user</label>
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(user.Signature)" alt="User Signature">
                            <button @onclick="HandleSignatureChange" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                        {
                            <div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
                        }
                    }

                    @if (!string.IsNullOrWhiteSpace(SignatureErrorMesssage))
                    {
                        <div class="text-danger mt-2">@SignatureErrorMesssage</div>
                    }
                </div>
            }

            <div class="col-sm-12 mb-3">
                <label for="FotoUser" class="col-form-label">Foto User</label>
                @if (string.IsNullOrWhiteSpace(user.UserPhoto))
                {
                    <InputFile id="Foto" class="form-control"
                    accept=".jpg,.jpeg,.png"
                    OnChange="HandleProfilePhotoUpload" />
                    <ValidationMessage For="@(() => user.UserPhoto)" />
                }
                else
                {
                    <div class="d-flex align-items-center">
                        <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(user.UserPhoto)" alt="User Photo">
                        <button @onclick="HandleProfilePhotoChange" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                    {
                        <div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
                    }
                }
            </div>

            <div class="d-flex align-items-center mt-2 mb-1">
                <label class="col-form-label me-2" for="customPasswordCheckbox"><b>Ingin menggunakan password kustom?</b></label>
                <InputCheckbox id="customPasswordCheckbox" @bind-Value="IsCustomPasswordisChecked" />
            </div>

            @if (IsCustomPasswordisChecked)
            {
                <div class="col-sm-12">
                    <label for="Password" class="col-form-label">Password <span class="required">*</span></label>
                    <InputText id="Password" @bind-Value="userPassword" class="form-control" />
                    <ValidationMessage For="@(() => userPassword)" />
                </div>
            }

            @* Submit Button *@
            <div class="float-end mt-3">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
        </EditForm>

    </div>
    }
</div>

@code {
    //Page
    private User user = new();
    private DataContext? _dataContext;
    private EditContext? editContext;
    private string _webUserRoot = string.Empty;
    private bool uploadErrorStatus;
    private bool _isLoading = true;

    //Form
    private List<string> userSection = new() { "Operation", "Formalities", "HSE", "HR/GA", "Security" };
    private List<string> userRole = new() { "Admin", "Supervisor", "Manager", "Maintenance", "Maintenance Supervisor", "Terminal Manager" };
    private List<string> maintenanceDivision = new() { "Electrical", "Mechanical", "IT", "Civil" };
    private List<string> operationalSupervisorDivision = new() { "Storage", "Delivery", "Receiving" };
    private string? SectionErrorMesssage;
    private string? MaintenanceErrorMesssage;
    private string? OperationSupervisorErrorMesssage;
    private string? SignatureErrorMesssage;
    private bool IsCustomPasswordisChecked = false;
    private string? userPassword;

    //File
    private string subFolderName = "User";
    private string fileCategory = "img";
    private string folderName = "Image";

    //Notification
    private string? alertMessage;
    private string? logMessage;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _dataContext = DbFactory.CreateDbContext();

        editContext = new EditContext(user);
        editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
        editContext.OnFieldChanged += (sender, e) =>
        {
            if (e.FieldIdentifier.FieldName == nameof(user.Role))
            {
                user.RoleCategory = null;
                user.Section = null;
                SectionErrorMesssage = null;
                MaintenanceErrorMesssage = null;
                OperationSupervisorErrorMesssage = null;
            }
            StateHasChanged();
        };

        uploadErrorStatus = false;

        try
        {
            // Get Path Root
            _webUserRoot = Configuration.GetValue<string>("WebUserRoot") ?? "/"; // Default root
        }
        catch (Exception ex)
        {
            alertMessage = "Gagal memuat konfigurasi '_webUserRoot'. Hubungi administrator.";
            logMessage = $"Gagal memuat konfigurasi '_webUserRoot'\nDetail :\n{ex}";

            ShowNotification(alertMessage, logMessage);
        }

        _isLoading = false;
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
    //Profile Photo Upload
    private async Task HandleProfilePhotoUpload(InputFileChangeEventArgs e)
    {
        //File Upload using Service
        await UploadService.FilesUpload(e.File, folderName, subFolderName, fileCategory);
        user.UserPhoto = UploadService.FilePath;

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = true;

            ShowNotification(alertMessage, logMessage);
            return;
        }
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => user.UserPhoto));
    }

    //Signature Upload
    private async Task HandleSignatureUpload(InputFileChangeEventArgs e)
    {
        //File Upload using Service
        await UploadService.FilesUpload(e.File, folderName, subFolderName, fileCategory);
        user.Signature = UploadService.FilePath;

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = true;

            ShowNotification(alertMessage, logMessage);
            return;
        }
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => user.Signature));
    }

    //Profile Photo Change
    private async Task HandleProfilePhotoChange()
    {
        //File Change using Service
        await UploadService.FileChange(user.UserPhoto, subFolderName);
        user.UserPhoto = UploadService.FilePath;

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = "Gagal mengubah gambar. Hubungi Administrator.";
            logMessage = $"Gagal mengubah gambar '_webUserRoot'\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = true;

            ShowNotification(alertMessage, logMessage);
        }
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => user.UserPhoto));
    }

    //File Change
    private async Task HandleSignatureChange()
    {
        //File Change using Service
        await UploadService.FileChange(user.Signature, subFolderName);
        user.Signature = UploadService.FilePath;

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = "Gagal mengubah gambar. Hubungi Administrator.";
            logMessage = $"Gagal mengubah gambar '_webUserRoot'\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = true;

            ShowNotification(alertMessage, logMessage);
        }
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => user.Signature));
    }

    //Create File Path
    private string CreateFilePath(string relativePath)
    {
        return Path.Combine(_webUserRoot, relativePath).Replace("\\", "/");
    }

    //Create New Data User
    private async Task HandleCreateUser()
    {

        if (uploadErrorStatus)
        {
            alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = false;

            ShowNotification(alertMessage, logMessage);
            return;
        }

        //Validate Role Input
        if (string.IsNullOrWhiteSpace(user.Role))
        {
            alertMessage = "Mohon pilih Role untuk user.";
            ShowNotification(alertMessage, "Role tidak boleh kosong.");
            return;
        }

        //Checking Role
        var roleExists = await roleManager.RoleExistsAsync(user.Role);
        if (!roleExists)
        {
            var createRoleResult = await roleManager.CreateAsync(new IdentityRole(user.Role));
            if (!createRoleResult.Succeeded)
            {
                alertMessage = $"Gagal membuat Role '{user.Role}'. Detail: {string.Join(", ", createRoleResult.Errors.Select(e => e.Description))}";
                logMessage = $"Gagal membuat Role. Detail: {string.Join(", ", createRoleResult.Errors.Select(e => e.Description))}";
                ShowNotification(alertMessage, logMessage);
                return;
            }
        }

        //Validate Section for Supervisor
        if (user.Role == "Supervisor" && string.IsNullOrWhiteSpace(user.Section))
        {
            SectionErrorMesssage = "Mohon pilih Section untuk Supervisor.";
            ShowNotification(SectionErrorMesssage, "Section tidak boleh kosong untuk Supervisor.");
            return;
        }
        else
        {
            SectionErrorMesssage = null;
        }

        //Validate Maintenance Division for Maintenance
        if (user.Role == "Maintenance" && string.IsNullOrWhiteSpace(user.Role))
        {
            MaintenanceErrorMesssage = "Mohon pilih Divisi Supervisor untuk Maintenance.";
            ShowNotification(MaintenanceErrorMesssage, "Divisi Supervisor tidak boleh kosong untuk Maintenance.");
            return;
        }
        else
        {
            MaintenanceErrorMesssage = null;
        }

        //Validate Operational Supervisor Division for Operation Supervisor
        if (user.Role == "Supervisor" && user.Section == "Operation" && string.IsNullOrWhiteSpace(user.Role))
        {
            OperationSupervisorErrorMesssage = "Mohon pilih Divisi Supervisor untuk Supervisor Operation.";
            ShowNotification(OperationSupervisorErrorMesssage, "Divisi Supervisor tidak boleh kosong untuk Supervisor Operation.");
            return;
        }
        else
        {
            OperationSupervisorErrorMesssage = null;
        }

        //Validate Signature
        if (user.Role != "Admin" && string.IsNullOrWhiteSpace(user.Signature))
        {
            SignatureErrorMesssage = "Mohon upload foto tanda tangan.";
            ShowNotification(SignatureErrorMesssage, "Foto tanda tangan harus diupload.");
            return;
        }
        else
        {
            SignatureErrorMesssage = null;
        }

        user.UserName = user.Email;
        user.EmailConfirmed = true;
        user.Signature = string.IsNullOrWhiteSpace(user.Signature) ? null : user.Signature;
        user.UserPhoto = string.IsNullOrWhiteSpace(user.UserPhoto) ? null : user.UserPhoto;
        user.NormalizedEmail = user.Email?.ToUpperInvariant();
        user.NormalizedUserName = user.UserName?.ToUpperInvariant();

        user.LockoutEnabled = false;
        user.AccessFailedCount = 0;
        user.TwoFactorEnabled = false;
        user.PhoneNumberConfirmed = false;

        if(user.Role == "Supervisor" && user.Section != "Operation" && user.RoleCategory == null)
        {
            user.RoleCategory = "Officer";
        }

		if (userPassword == null || !IsCustomPasswordisChecked)
		{
			userPassword = user.Email;
		}

        try
        {
            // Create User
            var createResult = await employeeManager.CreateAsync(user, userPassword);

            if (createResult.Succeeded)
            {
                var addToRoleResult = await employeeManager.AddToRoleAsync(user, user.Role);

                if (addToRoleResult.Succeeded)
                {
                    NavigationManager.NavigateTo("/UserList?status=CreateSuccess");
                }
                else
                {
                    await employeeManager.DeleteAsync(user);
                    alertMessage = $"Gagal menambahkan user ke role '{user.Role}'. Detail: {string.Join(", ", addToRoleResult.Errors.Select(e => e.Description))}";
                    logMessage = $"Gagal menambahkan user ke role. User ID: {user.Id}. Detail: {string.Join(", ", addToRoleResult.Errors.Select(e => e.Description))}";
                    ShowNotification(alertMessage, logMessage);
                    return;
                }
            }
            else
            {
                alertMessage = $"Gagal membuat user. Detail: {string.Join(", ", createResult.Errors.Select(e => e.Description))}";
                logMessage = $"Gagal membuat user. Detail: {string.Join(", ", createResult.Errors.Select(e => e.Description))}";
                ShowNotification(alertMessage, logMessage);
                return;
            }
        }
        catch (IOException ioEx)
        {
            alertMessage = "Terjadi masalah saat menyimpan file. Periksa izin folder atau ruang disk.";
            logMessage = $"Gagal mengunggah file. Detail: {ioEx.Message}";
            ShowNotification(alertMessage, logMessage);
            return;
        }
        catch (UnauthorizedAccessException uaEx)
        {
            alertMessage = "Akses ditolak saat mencoba menyimpan file. Periksa izin tulis untuk folder penyimpanan.";
            logMessage = $"Gagal mengunggah file. Detail: {uaEx.Message}";
            ShowNotification(alertMessage, logMessage);
            return;
        }
        catch (Exception ex)
        {
            alertMessage = "Gagal mengunggah file atau membuat user. Silakan coba lagi. (Kesalahan tidak terduga)";
            logMessage = $"Gagal mengunggah file atau membuat user. Detail: {ex.Message}";
            ShowNotification(alertMessage, logMessage);
            return;
        }

        NavigationManager.NavigateTo("/UserList?status=CreateSuccess");
    }

    //Invalid Submit
    private async Task HandleInvalidSubmit()
    {
        alertMessage = "Mohon periksa kembali input Anda. Ada beberapa kesalahan yang perlu diperbaiki.";
        logMessage = $"Formulir UserAdd disubmit dengan input tidak valid.";

        ShowNotification(alertMessage, logMessage);
    }

    //Notification
    private async Task ShowNotification(string alertMessage, string logMessage)
    {
        await NotificationService.AlertMessage(alertMessage);
        NotificationService.LogMessage(logMessage);
    }

    //Cancel
    private void Cancel()
    {
        if (!string.IsNullOrWhiteSpace(user.UserPhoto))
        {
            HandleProfilePhotoChange();
        }

        if (!string.IsNullOrWhiteSpace(user.Signature))
        {
            HandleSignatureChange();
        }

        NavigationManager.NavigateTo("/UserList");
    }
}