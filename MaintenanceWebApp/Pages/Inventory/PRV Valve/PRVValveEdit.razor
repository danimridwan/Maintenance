@page "/PRVValveEdit/{PRVValveID:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" style="cursor: pointer;" class="nav-link" aria-label="Kembali ke Daftar PRV Valve">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Ubah PRV Valve</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (prvValve != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="prvValve" OnValidSubmit="HandleUpdatePRVValve" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />

                <div class="col-sm-12 mb-3">
                    <label for="Kategori" class="col-form-label">Kategori <span class="required">*</span></label>
                    <InputSelect id="Kategori" @bind-Value="prvValve.Category" class="form-control">
                        <option value="">...</option>
                        <option value="PRV Valve Pompa">PRV Valve Pompa</option>
                        <option value="PRV Valve Tank">PRV Valve Tank</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => prvValve.Category)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="NomorTangki" class="col-form-label">Nomor Tangki<span class="required">*</span></label>
                    <InputText id="NomorTangki" @bind-Value="prvValve.TankNumber" class="form-control" />
                    <ValidationMessage For="@(() => prvValve.TankNumber)" />
                </div>

                @if (prvValve.Category == "PRV Valve Tank")
                {
                    <div class="col-sm-12 mb-3">
                        <label for="Material" class="col-form-label">Material</label>
                        <InputSelect id="Material" @bind-Value="prvValve.Material" class="form-control">
                            <option value="">...</option>
                            @foreach (var material in prvValveMaterial)
                            {
                                <option value="@material">@material</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => prvValve.Material)" />
                    </div>
                }

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label for="Merk" class="col-form-label">Merk</label>
                        <InputSelect id="Merk" @bind-Value="prvValve.Brand" class="form-control">
                            <option value="">...</option>
                            @foreach (var brand in prvValveBrand)
                            {
                                <option value="@brand">@brand</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => prvValve.Brand)" />
                    </div>
                    <div class="col-sm-6 mb-3">
                        <label for="Tipe" class="col-form-label">Tipe</label>
                        <InputSelect id="Tipe" @bind-Value="prvValve.Type" class="form-control">
                            <option value="">...</option>
                            @foreach (var type in prvValveType)
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => prvValve.Type)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="TekananDesain" class="col-form-label">Tekanan Desain</label>
                                <InputNumber class="form-control" id="TekananDesain" @bind-Value="prvValve.DesignPressureValue" @oninput="OnDesignPressureInputChanged" />
                                <ValidationMessage For="@(() => prvValve.DesignPressureValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="SatuanTekanan" class="col-form-label">Unit</label>
                                <InputSelect id="SatuanTekanan" @bind-Value="prvValve.DesignPressureUnit" class="form-control" disabled="@IsDesignPressureUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in designPressureUnits)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @if (prvValve.DesignPressureValue.HasValue && prvValve.DesignPressureValue.Value > 0 && string.IsNullOrWhiteSpace(prvValve.DesignPressureUnit))
                                {
                                    <div class="text-danger">Satuan Unit Tekanan Desain harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="DiameterValve" class="col-form-label">Diameter Valve</label>
                                <InputText class="form-control" id="DiameterValve" @bind-Value="prvValve.DiameterValue" @oninput="OnDiameterValveInputChanged" />
                                <ValidationMessage For="@(() => prvValve.DiameterValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="SatuanDiameter" class="col-form-label">Unit</label>
                                <InputSelect id="SatuanDiameter" @bind-Value="prvValve.DiameterUnit" class="form-control" disabled="@IsDiameterUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in diameterUnits)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @if (!string.IsNullOrWhiteSpace(prvValve.DiameterValue) && string.IsNullOrWhiteSpace(prvValve.DiameterUnit))
                                {
                                    <div class="text-danger">Satuan Diameter harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Jumlah" class="col-form-label">Jumlah</label>
                    <InputNumber id="Jumlah" @bind-Value="prvValve.Quantity" class="form-control" />
                    <ValidationMessage For="@(() => prvValve.Quantity)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Foto" class="col-form-label">Foto</label>
                    @if (!fileStatus)
                    {
                        <InputFile id="Foto" class="form-control"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="HandleFileUploadAsync" />
                        <ValidationMessage For="@(() => filePath)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Breather Valve Image">
                            <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary me-2" @onclick="CancelAsync">Batal</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data PRV Valve...</p>
        }
    </div>
</div>

@code {
    // Parameter Halaman
    [Parameter]
    public int PRVValveID { get; set; }

    // Properti Halaman
    private PRVValve? prvValve;
    private EditContext? editContext;
    private DotNetObjectReference<PRVValveEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State Formulir
    private bool IsDesignPressureUnitDisabled = true;
    private bool IsDiameterUnitDisabled = true;

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "PRV Valve";

    // Form Properties
    private List<string> prvValveBrand = new() { "S3W-A", "T-ONE 317 Safety Valve", "317 Safety Valve", "HISEC" };
    private List<string> prvValveType = new() { "Safety Valve", "317 Safety Valve", "SV-B27", "MFW-A", "317 Hisec" };
    private List<string> prvValveMaterial = new() { "Carbon Steel", "Stainless Steel 316", "Kuningan" };
    private List<string> designPressureUnits = new() { "Bar", "MMH2O" };
    private List<string> diameterUnits = new() { "inch", "mm" };

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadPRVValveDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    private async Task LoadConfigurationAsync()
    {
        try
        {
            _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi `WebStorageRoot`. Detail: {ex.Message}");
        }
    }

    private async Task LoadPRVValveDataAsync()
    {
        prvValve = await CRUDService.ReadSingleAsync<PRVValve, int>(PRVValveID);
        if (prvValve == null)
        {
            await NotificationService.AlertMessage("Data PRV Valve tidak ditemukan.");
            NavigationManager.NavigateTo("./PRVValveList", forceLoad: true);
        }
        else
        {
            // Inisialisasi EditContext dan status file
            editContext = new EditContext(prvValve);
            editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
            editContext.OnFieldChanged += (sender, e) => StateHasChanged();

            InitializeFileStatus(prvValve.Image);

            // Inisialisasi status unit
            IsDesignPressureUnitDisabled = !prvValve.DesignPressureValue.HasValue || prvValve.DesignPressureValue.Value <= 0;
            IsDiameterUnitDisabled = string.IsNullOrWhiteSpace(prvValve.DiameterValue);
        }
    }

    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }

    // Metode Unggah File
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
                NotificationService.LogMessage($"Pengunggahan gambar gagal. Detail: {UploadService.UploadErrorMessage}");
                filePath = null;
                return;
            }

            filePath = UploadService.FilePath;
            fileStatus = true;
            editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => filePath));
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file. Detail: {ex.Message}");
        }
    }

    private async Task HandleFileChangeAsync()
    {
        if (fileStatus)
        {
            // Hapus file lama jika filePath berubah
            if (filePath != originalFilePath)
            {
                await DeleteOldFileAsync(filePath);
            }
            fileStatus = false;
        }
        else
        {
            fileStatus = true;
        }
    }

    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menghapus file lama. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menghapus file lama. Detail: {UploadService.UploadErrorMessage}");
            }
        }
    }

    private string CreateFilePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }

    // Metode Validasi Input
    private void OnDesignPressureInputChanged(ChangeEventArgs args)
    {
        if (prvValve == null) return;

        if (double.TryParse(args.Value?.ToString(), out double designPressureValue))
        {
            prvValve.DesignPressureValue = designPressureValue;
        }
        else
        {
            prvValve.DesignPressureValue = null;
        }

        IsDesignPressureUnitDisabled = !prvValve.DesignPressureValue.HasValue || prvValve.DesignPressureValue.Value <= 0;
        if (IsDesignPressureUnitDisabled)
        {
            prvValve.DesignPressureUnit = null;
        }
        StateHasChanged();
    }

    private void OnDiameterValveInputChanged(ChangeEventArgs args)
    {
        string? inputValue = args.Value?.ToString();
        string pattern = @"^[0-9,/s]*$";

        if (Regex.IsMatch(inputValue, pattern))
        {
            prvValve.DiameterValue = inputValue;
        }
        else
        {
            prvValve.DiameterValue = string.Empty;
        }

        IsDiameterUnitDisabled = string.IsNullOrWhiteSpace(inputValue);
        if (IsDiameterUnitDisabled)
        {
            prvValve.DiameterUnit = null;
        }
        StateHasChanged();
    }

    // Metode Penanganan Submit
    private async Task HandleUpdatePRVValve()
    {
        if (prvValve == null) return;

        //Validasi Diameter
        string pattern = @"^[0-9,/s]*$";
        if (!Regex.IsMatch(prvValve.DiameterValue, pattern))
        {
            await NotificationService.AlertMessage("Input tidak valid. Mohon periksa kembali input Diameter Valve, pastikan format benar dan unit telah dipilih.");
            return;
        }

        // Sinkronisasi path file sebelum update
        prvValve.Image = fileStatus ? filePath : null;

        // Jika ada perubahan file, hapus file lama
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        try
        {
            await CRUDService.UpdateAsync(prvValve);
            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menyimpan data. Detail: {CRUDService.CRUDErrorMessage}");
                return;
            }
            NavigationManager.NavigateTo("./PRVValveList?status=EditSuccess");
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan tak terduga saat memperbarui data. Silakan coba lagi.");
            NotificationService.LogMessage($"Kesalahan saat memperbarui data PRV Valve. Detail: {ex.Message}");
        }
    }

    private async Task HandleInvalidSubmitAsync()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
        NotificationService.LogMessage($"Pengiriman formulir PRVValveEdit tidak valid.");
    }

    // Metode Navigasi
    private async Task CancelAsync()
    {
        // Bersihkan file temporer jika ada
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }

        NavigationManager.NavigateTo("./PRVValveList");
    }

    // Metode untuk JavaScript Interop
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    // Implementasi IDisposable untuk membersihkan sumber daya
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }
}