@page "/PRVValveAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DataContext> DbFactory
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor")]

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Tab Header *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="Cancel" class="nav-link" aria-label="Kembali ke Daftar PRV Valve">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi PRV Valve</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @* Form Add *@
        <EditForm Model="prvValve" OnValidSubmit="HandleCreatePRVValve" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="col-sm-12 mb-3">
                <label for="Kategori" class="col-form-label">Kategori<span class="required">*</span></label>
                <InputSelect id="Kategori" @bind-Value="prvValve.Category" class="form-control">
                    <option value="">...</option>
                    <option value="PRV Valve Pompa">PRV Valve Pompa</option>
                    <option value="PRV Valve Tank">PRV Valve Tank</option>
                </InputSelect>
                <ValidationMessage For="@(() => prvValve.Category)" />
            </div>

            <div class="col-sm-12 mb-3">
                <label for="NomorTangki" class="col-form-label">Nomor Tangki<span class="required">*</span></label>
                <InputText id="NomorTangki" @bind-Value="prvValve.TankNumber" class="form-control" />
                <ValidationMessage For="@(() => prvValve.TankNumber)" />
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <label for="Merk" class="col-form-label">Merk</label>
                    <InputSelect id="Merk" @bind-Value="prvValve.Brand" class="form-control">
                        <option value="">...</option>
                        @foreach (var brand in prvValveBrand)
                        {
                            <option value="@brand">@brand</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => prvValve.Brand)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Tipe" class="col-form-label">Tipe</label>
                    <InputSelect id="Tipe" @bind-Value="prvValve.Type" class="form-control">
                        <option value="">...</option>
                        @foreach (var type in prvValveType)
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => prvValve.Type)" />
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Tekanan Desain" class="col-form-label">Tekkanan Desain</label>
                            <InputNumber class="form-control" id="Kapasitas" @bind-Value="prvValve.DesignPressureValue" @oninput="OnDesignPressureInputChanged" />
                            <ValidationMessage For="@(() => prvValve.DesignPressureValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanTekananDesain" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanTekananDesain" @bind-Value="prvValve.DesignPressureUnit" class="form-control" disabled="@IsDesignPressureUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in designPressureUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @* Custom validation message for Design Unit *@
                            @if (prvValve.DesignPressureValue.HasValue && prvValve.DesignPressureValue.Value > 0 && string.IsNullOrWhiteSpace(prvValve.DesignPressureUnit))
                            {
                                <div class="text-danger">Satuan Tekanan Desain harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-sm-6 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="DiameterValve" class="col-form-label">Diameter Valve</label>
                            <InputNumber class="form-control" id="DiameterValve" @bind-Value="prvValve.DiameterValue" @oninput="OnDiameterValveInputChanged" />
                            <ValidationMessage For="@(() => prvValve.DiameterValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanDiameter" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanDiameter" @bind-Value="prvValve.DiameterUnit" class="form-control" disabled="@IsDiameterUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in diameterUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @* Custom validation message for Diameter Unit *@
                            @if (prvValve.DiameterValue.HasValue && prvValve.DiameterValue.Value > 0 && string.IsNullOrWhiteSpace(prvValve.DiameterUnit))
                            {
                                <div class="text-danger">Satuan Diameter harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Jumlah" class="col-form-label">Jumlah</label>
                <InputNumber id="Jumlah" @bind-Value="prvValve.Quantity" class="form-control" />
                <ValidationMessage For="@(() => prvValve.Quantity)" />
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Foto" class="col-form-label">Foto</label>
                @if (string.IsNullOrWhiteSpace(prvValve.Image))
                {
                    <InputFile id="Foto" class="form-control"
                               accept=".jpg,.jpeg,.png"
                               OnChange="HandleFileUpload" />
                    <ValidationMessage For="@(() => prvValve.Image)" />
                }
                else
                {
                    <div class="d-flex align-items-center">
                        <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(prvValve.Image)" alt="PRV Valve Image">
                        <button @onclick="HandleFileChange" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                    {
                        <div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
                    }
                }
            </div>

            @* Submit Button *@
            <div class="float-end mt-3">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    //Page
    private PRVValve prvValve = new();
    private EditContext? editContext;
    private string _webStorageRoot = string.Empty;
    private bool uploadErrorStatus;

    //Form
    private bool IsDiameterUnitDisabled = true;
    private bool IsDesignPressureUnitDisabled = true;
    private List<string> prvValveBrand = new() { "S3W-A", "HISEC", "317 Safety Valve", "T-ONE 317  Safety Valve" };
    private List<string> prvValveType = new() { "SV-B27", "MFW.A", "317 Hisec", "Safety Valve", "317 Safety Valve" };
    private List<string> diameterUnits = new() { "inch" };
    private List<string> designPressureUnits = new() { "bar" };

    //File
    private string subFolderName = "Inventories";
    private string fileCategory = "img";
    private string folderName = "PRV Valve";

    //Notification
    private string? alertMessage;
    private string? logMessage;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(prvValve);
        editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
        editContext.OnFieldChanged += (sender, e) => StateHasChanged();

        uploadErrorStatus = false;

        try
        {
            // Get Path Root
            _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; // Default root
        }
        catch (Exception ex)
        {
            alertMessage = "Gagal memuat konfigurasi '_webStorageRoot'. Hubungi administrator.";
            logMessage = $"Gagal memuat konfigurasi '_webStorageRoot'\nDetail :\n{ex}";

            ShowNotification(alertMessage, logMessage);
        }
    }

    //File Upload
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        //File Upload using Service
        await UploadService.FilesUpload(e.File, folderName, subFolderName, fileCategory);
        prvValve.Image = UploadService.FilePath;

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = true;

            ShowNotification(alertMessage, logMessage);
            return;
        }
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => prvValve.Image));
    }

    //File Change
    private async Task HandleFileChange()
    {
        //File Change using Service
        await UploadService.FileChange(prvValve.Image, subFolderName);
        prvValve.Image = UploadService.FilePath;

        if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
        {
            alertMessage = "Gagal mengubah gambar. Hubungi Administrator.";
            logMessage = $"Gagal mengubah gambar '_webStorageRoot'\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = true;

            ShowNotification(alertMessage, logMessage);
        }
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => prvValve.Image));
    }

    //Create File Path
    private string CreateFilePath(string relativePath)
    {
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }

    //Create New Data Pump
    private async Task HandleCreatePRVValve()
    {
        // Custom Design Pressure Validation
        if (prvValve.DesignPressureValue.HasValue && prvValve.DesignPressureValue.Value > 0 && string.IsNullOrWhiteSpace(prvValve.DesignPressureUnit))
        {
            alertMessage = "Jika Tekanan Desain diisi, Satuan Tekanan Desain harus dipilih.";
            logMessage = $"Validasi kustom gagal: Satuan Tekanan Desain tidak dipilih saat nilai Tekanan Desain ada.";

            ShowNotification(alertMessage, logMessage);
            return;
        }

        // Custom Power Value Validation
        if (prvValve.DiameterValue.HasValue && prvValve.DiameterValue.Value > 0 && string.IsNullOrWhiteSpace(prvValve.DiameterUnit))
        {
            alertMessage = "Jika Diameter diisi, Satuan Diameter harus dipilih.";
            logMessage = $"Validasi kustom gagal: Satuan Diameter tidak dipilih saat nilai Diameter ada.";

            ShowNotification(alertMessage, logMessage);
            return;
        }

        if (uploadErrorStatus)
        {
            alertMessage = $"Gagal upload gambar.\n{UploadService.UploadErrorMessage}";
            logMessage = $"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}";

            uploadErrorStatus = false;

            ShowNotification(alertMessage, logMessage);
            return;
        }

        //Create using Services
        await CRUDService.CreateAsync<PRVValve>(prvValve);

        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            alertMessage = $"Gagal menyimpan data. Hubungi Administrator.\n{CRUDService.CRUDErrorMessage}";
            logMessage = $"Gagal menyimpan data\nDetail :\n{CRUDService.CRUDErrorMessage}";

            ShowNotification(alertMessage, logMessage);
            return;
        }

        NavigationManager.NavigateTo("/PRVValveList?status=CreateSuccess");
    }

    //Invalid Submit
    private async Task HandleInvalidSubmit()
    {
        alertMessage = "Mohon periksa kembali input Anda. Ada beberapa kesalahan yang perlu diperbaiki.";
        logMessage = $"Formulir PRVValveAdd disubmit dengan input tidak valid.";

        ShowNotification(alertMessage, logMessage);
    }

    //Design Pressure Validation
    private void OnDesignPressureInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentDesignPressureInputValue))
        {
            prvValve.DesignPressureValue = currentDesignPressureInputValue;
        }
        else
        {
            prvValve.DesignPressureValue = null;
        }

        IsDesignPressureUnitDisabled = !prvValve.DesignPressureValue.HasValue || prvValve.DesignPressureValue.Value <= 0;

        if (IsDesignPressureUnitDisabled)
        {
            prvValve.DesignPressureUnit = null;
        }

        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => prvValve.DesignPressureValue));
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => prvValve.DesignPressureUnit));
    }

    //Diameter Validation
    private void OnDiameterValveInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentPRVValveInputValue))
        {
            prvValve.DiameterValue = currentPRVValveInputValue;
        }
        else
        {
            prvValve.DiameterValue = null;
        }

        IsDiameterUnitDisabled = !prvValve.DiameterValue.HasValue || prvValve.DiameterValue.Value <= 0;

        if (IsDiameterUnitDisabled)
        {
            prvValve.DiameterUnit = null;
        }

        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => prvValve.DiameterValue));
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => prvValve.DiameterUnit));
    }

    //Notification
    private async Task ShowNotification(string alertMessage, string logMessage)
    {
        await NotificationService.AlertMessage(alertMessage);
        NotificationService.LogMessage(logMessage);
    }

    //Cancel
    private void Cancel()
    {
        if (!string.IsNullOrWhiteSpace(prvValve.Image))
        {
            HandleFileChange();
        }

        NavigationManager.NavigateTo("/PRVValveList");
    }
}