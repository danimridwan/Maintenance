@page "/ElectricPanelEdit/{PanelID:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]
@implements IDisposable

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" class="nav-link" style="cursor:pointer;" aria-label="Kembali ke Daftar Panel Listrik">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi Panel Listrik</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (electricPanel != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="electricPanel" OnValidSubmit="HandleUpdateElectricPanel" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />

                <div class="col-sm-12 mb-3">
                    <label for="Nama" class="col-form-label">Nama Alat <span class="required">*</span></label>
                    <InputText id="Nama" @bind-Value="electricPanel.Name" class="form-control" />
                    <ValidationMessage For="@(() => electricPanel.Name)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Lokasi" class="col-form-label">Lokasi <span class="required">*</span></label>
                    <InputSelect id="Lokasi" @bind-Value="electricPanel.Location" class="form-control">
                        <option value="">Pilih Lokasi...</option>
                        @foreach (var location in locationOptions)
                        {
                            <option value="@location">@location</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => electricPanel.Location)" />
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label for="Kapasitas" class="col-form-label">Kapasitas</label>
                        <InputText class="form-control" id="Kapasitas" @bind-Value="electricPanel.CapacityValue" @oninput="HandleCapacityInput" />
                        @if (!string.IsNullOrEmpty(_capacityError))
                        {
                            <div class="text-danger small mt-1">@_capacityError</div>
                        }
                        <ValidationMessage For="@(() => electricPanel.CapacityValue)" />
                    </div>
                    <div class="col-sm-6 mb-3">
                        <label for="SatuanKapasitas" class="col-form-label">Unit</label>
                        <InputSelect id="SatuanKapasitas" @bind-Value="electricPanel.CapacityUnit" class="form-control">
                            <option value="">Pilih Unit...</option>
                            @foreach (var unit in capacityUnits)
                            {
                                <option value="@unit">@unit</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => electricPanel.CapacityUnit)" />
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Foto" class="col-form-label">Foto</label>
                    @if (!fileStatus)
                    {
                        <InputFile id="Foto" class="form-control"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="HandleFileUploadAsync" />
                        <ValidationMessage For="@(() => filePath)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Electric Panel Image">
                            <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Batal</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data Panel Listrik...</p>
        }
    </div>
</div>

@code {
    // Parameter Halaman
    [Parameter]
    public int PanelID { get; set; }

    // Properti Halaman
    private ElectricPanel? electricPanel;
    private DotNetObjectReference<ElectricPanelEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Properti untuk validasi kapasitas
    private string? _capacityError;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "Electric Panel";

    // Form Properties (Dropdown Options)
    private readonly List<string> capacityUnits = new() { "A", "KVA", "Kvar", "KW", "KW A" };
    private List<string> locationOptions = new()
    {
        "Drum Filling", "Fire Pump room 1", "Fire Pump room 2 dan 3", "Garasi Fire Truck",
        "Guest house", "Jetty 1", "Jetty 2", "Kantor Lantai 1", "Kantor Lantai 2",
        "MCC (main control center) Room 1", "MCC (main control center) Room 2", "Pintu Jetty 2",
        "Pump Pit 7", "Tank Pit 5", "Utility Building"
    };

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadElectricPanelDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    private async Task LoadElectricPanelDataAsync()
    {
        electricPanel = await CRUDService.ReadSingleAsync<ElectricPanel, int>(PanelID);
        if (electricPanel == null)
        {
            await NotificationService.AlertMessage("Data Panel Listrik tidak ditemukan.");
            NavigationManager.NavigateTo("./ElectricPanelList", forceLoad: true);
        }
        else
        {
            InitializeFileStatus(electricPanel.Image);
        }
    }

    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }

    private void HandleCapacityInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        _capacityError = null;

        string pattern = @"^[0-9,xX\s]*$";

        if (Regex.IsMatch(inputValue, pattern))
        {
            electricPanel!.CapacityValue = inputValue.Replace('X', 'x');
        }
        else
        {
            // Jika tidak valid, kosongkan nilai di model
            electricPanel!.CapacityValue = string.Empty;
        }
    }

    private bool ValidateFormOnSubmit()
    {
        // Cek hanya jika ada input pada Kapasitas
        if (!string.IsNullOrWhiteSpace(electricPanel.CapacityValue))
        {
            if (string.IsNullOrWhiteSpace(electricPanel.CapacityUnit))
            {
                return false; // Validasi gagal jika unit kosong
            }

            string pattern = @"^[0-9,xX\s]*$";
            if (!Regex.IsMatch(electricPanel.CapacityValue, pattern))
            {
                return false; // Validasi gagal jika format tidak sesuai
            }
        }

        return true; // Semua validasi lolos
    }

    // Metode Penanganan Submit
    private async Task HandleUpdateElectricPanel()
    {
        if (electricPanel == null) return;

        if (!ValidateFormOnSubmit())
        {
            await NotificationService.AlertMessage("Input tidak valid. Mohon periksa kembali input Kapasitas, pastikan format benar dan unit telah dipilih.");
            return;
        }

        electricPanel.Image = fileStatus ? filePath : null;

        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        await CRUDService.UpdateAsync(electricPanel);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
            return;
        }

        NavigationManager.NavigateTo("./ElectricPanelList?status=EditSuccess");
    }

    private async Task HandleInvalidSubmit()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
    }

    #region Kode Lainnya (Tidak Berubah)
    private async Task LoadConfigurationAsync()
    {
        try { _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; }
        catch (Exception ex) { await NotificationService.AlertMessage($"Gagal memuat konfigurasi. Detail: {ex.Message}"); }
    }
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
                filePath = null;
                return;
            }
            filePath = UploadService.FilePath;
            fileStatus = true;
        }
        catch (Exception ex) { await NotificationService.AlertMessage($"Terjadi kesalahan saat mengunggah file. Detail: {ex.Message}"); }
    }
    private async Task HandleFileChangeAsync()
    {
        if (fileStatus && filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }
        fileStatus = !fileStatus;
    }
    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
        }
    }
    private string CreateFilePath(string relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath)) { return "/noimg.png"; }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }
    private async Task CancelAsync()
    {
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }
        NavigationManager.NavigateTo("./ElectricPanelList");
    }
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }
    #endregion
}