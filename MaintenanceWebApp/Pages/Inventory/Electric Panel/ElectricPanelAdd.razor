@page "/ElectricPanelAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.IO
@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor, Maintenance")]
@implements IDisposable

<div class="card">
    @* Header Formulir *@
    <div class="card-header bg-light border-primary">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a style="cursor: pointer;" @onclick="CancelAsync" class="nav-link" aria-label="Kembali ke Daftar Electric Panel">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Tambah Panel Listrik</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <EditForm Model="electricPanel" OnValidSubmit="HandleCreateElectricPanel" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="col-sm-12 mb-3">
                <label for="Nama" class="col-form-label">Nama Alat<span class="required">*</span></label>
                <InputText id="Nama" @bind-Value="electricPanel.Name" class="form-control" />
                <ValidationMessage For="@(() => electricPanel.Name)" />
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Lokasi" class="col-form-label">Lokasi<span class="required">*</span></label>
                <InputSelect id="Lokasi" @bind-Value="electricPanel.Location" class="form-control">
                    <option value="">Pilih Lokasi...</option>
                    @foreach (var location in locationOptions)
                    {
                        <option value="@location">@location</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => electricPanel.Location)" />
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <label for="Kapasitas" class="col-form-label">Kapasitas</label>
                    <InputText class="form-control" id="Kapasitas" @bind-Value="electricPanel.CapacityValue" @oninput="HandleCapacityInput" />
                    @if (!string.IsNullOrEmpty(_capacityError))
                    {
                        <div class="text-danger small mt-1">@_capacityError</div>
                    }
                    <ValidationMessage For="@(() => electricPanel.CapacityValue)" />
                </div>
                <div class="col-sm-6 mb-3">
                    <label for="SatuanKapasitas" class="col-form-label">Unit</label>
                    <InputSelect id="SatuanKapasitas" @bind-Value="electricPanel.CapacityUnit" class="form-control">
                        <option value="">Pilih Unit...</option>
                        @foreach (var unit in capacityUnits)
                        {
                            <option value="@unit">@unit</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => electricPanel.CapacityUnit)" />
                </div>
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Foto" class="col-form-label">Foto</label>
                @if (string.IsNullOrWhiteSpace(electricPanel.Image))
                {
                    <InputFile id="Foto" class="form-control"
                               accept=".jpg,.jpeg,.png"
                               OnChange="HandleFileUpload" />
                    <small class="form-text text-muted">Opsional: Unggah foto Panel Listrik (JPG, JPEG, PNG).</small>
                    <ValidationMessage For="@(() => electricPanel.Image)" />
                }
                else
                {
                    <div class="d-flex align-items-center">
                        <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(electricPanel.Image)" alt="Electric Panel Image">
                        <button @onclick="() => HandleFileChangeAsync(electricPanel.Image, IMAGE_FILE_CATEGORY)" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                    </div>
                }
            </div>

            @* Tombol Aksi Formulir *@
            <div class="float-end mt-3">
                <button type="button" class="btn btn-secondary me-2" @onclick="CancelAsync">Batal</button>
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // State Halaman
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private ElectricPanel electricPanel = new();
    private User? currentUserInfo;
    private string _webStorageRoot = string.Empty;
    private DotNetObjectReference<ElectricPanelAdd> dotNetHelper = default!;
    private bool uploadErrorStatus;

    // Properti untuk validasi kapasitas
    private string? _capacityError;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string IMAGE_FILE_CATEGORY = "img";
    private const string IMAGE_FOLDER_NAME = "Electric Panel";

    // Form Properties
    private List<string> capacityUnits = new() { "A", "KVA", "Kvar", "KW", "KW A" };
    private List<string> locationOptions = new()
    {
        "Drum Filling", "Fire Pump room 1", "Fire Pump room 2 dan 3", "Garasi Fire Truck",
        "Guest house", "Jetty 1", "Jetty 2", "Kantor Lantai 1", "Kantor Lantai 2",
        "MCC (main control center) Room 1", "MCC (main control center) Room 2", "Pintu Jetty 2",
        "Pump Pit 7", "Tank Pit 5", "Utility Building"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfoAsync();
        await LoadConfigurationAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }

    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    private void HandleCapacityInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        _capacityError = null; // Selalu hapus error di awal

        string pattern = @"^[0-9,xX\s]*$"; // Pola: hanya izinkan angka, koma, spasi, x/X

        if (Regex.IsMatch(inputValue, pattern))
        {
            // Jika input valid, ubah 'X' besar menjadi 'x' kecil
            electricPanel.CapacityValue = inputValue.Replace('X', 'x');
        }
        else
        {
            // Jika input tidak valid, kosongkan nilai di model
            electricPanel.CapacityValue = string.Empty;
        }
    }

    private bool ValidateFormOnSubmit()
    {
        // Cek hanya jika ada input pada Kapasitas
        if (!string.IsNullOrWhiteSpace(electricPanel.CapacityValue))
        {
            if (string.IsNullOrWhiteSpace(electricPanel.CapacityUnit))
            {
                return false; // Validasi gagal jika unit kosong
            }

            string pattern = @"^[0-9,xX\s]*$";
            if (!Regex.IsMatch(electricPanel.CapacityValue, pattern))
            {
                return false; // Validasi gagal jika format tidak sesuai
            }
        }

        return true; // Semua validasi lolos
    }

    private async Task HandleCreateElectricPanel()
    {
        if (!ValidateFormOnSubmit())
        {
            await NotificationService.AlertMessage("Input tidak valid. Mohon periksa kembali input Kapasitas, pastikan format benar dan unit telah dipilih.");
            return;
        }

        if (uploadErrorStatus)
        {
            await NotificationService.AlertMessage($"Gagal upload gambar.\n{UploadService.UploadErrorMessage}");
            uploadErrorStatus = false;
            return;
        }

        await CRUDService.CreateAsync<ElectricPanel>(electricPanel);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage($"Gagal menyimpan data. Hubungi Administrator.Detail:{CRUDService.CRUDErrorMessage}");
            return;
        }

        NavigationManager.NavigateTo("./ElectricPanelList?status=CreateSuccess");
    }

    #region Kode Lainnya (Tidak Berubah)
    private async Task LoadConfigurationAsync()
    {
        try { _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; }
        catch (Exception ex) { await NotificationService.AlertMessage($"Gagal memuat konfigurasi: {ex.Message}"); NavigationManager.NavigateTo("./"); }
    }
    private async Task LoadUserInfoAsync()
    {
        if (authenticationStateTask == null) return;
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("Id")?.Value;
            if (string.IsNullOrEmpty(userId)) { await NotificationService.AlertMessage("ID pengguna tidak ditemukan."); NavigationManager.NavigateTo("./"); return; }
            try { currentUserInfo = await CRUDService.ReadSingleAsync<User, string>(userId); if (currentUserInfo == null) { await NotificationService.AlertMessage("Data pengguna tidak ditemukan."); NavigationManager.NavigateTo("./"); } }
            catch (Exception ex) { await NotificationService.AlertMessage($"Gagal memuat data pengguna: {ex.Message}"); NavigationManager.NavigateTo("./"); }
        }
        else { NavigationManager.NavigateTo("./"); }
    }
    private async Task HandleInvalidSubmit()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali input Anda.");
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUploadAsync(e, IMAGE_FOLDER_NAME, IMAGE_FILE_CATEGORY);
    }
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e, string folderName, string fileType)
    {
        try
        {
            await UploadService.FilesUpload(e.File, folderName, SUB_FOLDER_NAME, fileType);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage)) { await NotificationService.AlertMessage($"Gagal mengunggah berkas: {UploadService.UploadErrorMessage}"); uploadErrorStatus = true; return; }
            if (fileType == IMAGE_FILE_CATEGORY) { electricPanel.Image = UploadService.FilePath; }
        }
        catch (Exception ex) { await NotificationService.AlertMessage($"Terjadi kesalahan saat mengunggah file: {ex.Message}"); uploadErrorStatus = true; }
        StateHasChanged();
    }
    private async Task HandleFileChangeAsync(string? filePath, string fileType)
    {
        if (string.IsNullOrWhiteSpace(filePath)) return;
        try
        {
            await UploadService.FileChange(filePath, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage)) { await NotificationService.AlertMessage($"Gagal mengganti berkas."); return; }
            if (fileType == IMAGE_FILE_CATEGORY) { electricPanel.Image = null; }
        }
        catch (Exception ex) { await NotificationService.AlertMessage($"Terjadi kesalahan saat mengganti file: {ex.Message}"); }
        StateHasChanged();
    }
    private string CreateFilePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath)) { return "/noimg.png"; }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }
    private async Task CancelAsync()
    {
        if (!string.IsNullOrWhiteSpace(electricPanel.Image))
        {
            await HandleFileChangeAsync(electricPanel.Image, IMAGE_FILE_CATEGORY);
        }
        await JSRuntime.InvokeVoidAsync("blazorInterop.replaceHistoryState");
        NavigationManager.NavigateTo("./ElectricPanelList");
    }
    #endregion
}