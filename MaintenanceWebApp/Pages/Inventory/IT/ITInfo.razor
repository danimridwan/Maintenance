@page "/ITInfo/{DeviceID:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@* Services *@
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Terminal Manager, Maintenance Supervisor, Maintenance")]

<div class="card">

	@if (it != null)
	{
		<div class="card-header bg-light border-primary">
			@* Tab Header *@
			<ul class="nav nav-tabs card-header-tabs">
				<li class="nav-item">
					<a href="ITList" class="nav-link" aria-label="Kembali ke Daftar IT">
						<span class="oi oi-chevron-left"></span>
					</a>
				</li>
				<li class="nav-item">
					<a class="nav-link active" aria-label="Informasi IT">Informasi Inventory IT</a>
				</li>
			</ul>
		</div>
		<div class="card-body">
			@* Informasi IT *@
			<div class="form-group row">
				<div class="col-sm-5">

					@if (string.IsNullOrWhiteSpace(it.Image) == false)
					{
						<img style="align-content:center;" width="100%" src="@CreateFilePath(it.Image)" alt="IT Image">
					}
					else
					{
						<img style="align-content:center;" width="100%" src="/noimg.png" alt="No Image Available" class="pt-5">
					}
				</div>

				<div style="align-content: center;" class="col-sm-7">
					<table width="100%">
						<tr>
							<td class="td-first">Device</td>
							<td> : </td>
							<td class="td-last">@it.Device</td>
						</tr>
						<tr>
							<td class="td-first">Merk</td>
							<td> : </td>
							<td class="td-last">@it.Brand</td>
						</tr>

						<tr>
							<td class="td-first">Model</td>
							<td> : </td>
							<td class="td-last">@it.Model</td>
						</tr>
					</table>
				</div>

			</div>

		</div>
	}
	else
	{
		<p>Memuat Data Inventory IT...</p>
	}
</div>

@code {
	//Page
	[Parameter]
	public int DeviceID { get; set; }
	private IT it;
	private string _webStorageRoot = string.Empty;

	//Notification
	private string? alertMessage;
	private string? logMessage;

	protected override async Task OnInitializedAsync()
	{
		await LoadIT();

		try
		{
			// Get Path Root
			_webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; // Default root
		}
		catch (Exception ex)
		{
			alertMessage = "Gagal memuat konfigurasi '_webStorageRoot'. Hubungi administrator.";
			logMessage = $"Gagal memuat konfigurasi '_webStorageRoot'\nDetail :\n{ex}";

			ShowNotification(alertMessage, logMessage);
		}
	}

	//Read Data Pump
	private async Task LoadIT()
	{
		try
		{
			//Read Pump using Service
			it = await CRUDService.ReadSingleAsync<IT, int>(DeviceID);
		}
		catch (Exception ex)
		{
			alertMessage = "Gagal memuat data Inventory IT. Hubungi administrator.";
			logMessage = $"Gagal memuat data Inventory IT\nDetail :\n{ex}";

			ShowNotification(alertMessage, logMessage);
		}
	}

	private string CreateFilePath(string relativePath)
	{
		return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
	}

	//Notification
	private async Task ShowNotification(string alertMessage, string logMessage)
	{
		await NotificationService.AlertMessage(alertMessage);
		NotificationService.LogMessage(logMessage);
	}
}
