@page "/BreatherValveEdit/{BreatherValveID:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" class="nav-link" aria-label="Kembali ke Daftar Breather Valve">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi Breather Valve</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (breatherValve != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="breatherValve" OnValidSubmit="HandleUpdateBreatherValve" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />

                <div class="col-sm-12 mb-3">
                    <label for="NomorTangki" class="col-form-label">Tangki<span class="required">*</span></label>
                    <InputText id="NomorTangki" @bind-Value="breatherValve.Tank" class="form-control" />
                    <ValidationMessage For="@(() => breatherValve.Tank)" />
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label for="Merk" class="col-form-label">Merk</label>
                        <InputSelect id="Merk" @bind-Value="breatherValve.Brand" class="form-control">
                            <option value="">...</option>
                            @foreach (var brand in BREATER_VALVE_BRANDS)
                            {
                                <option value="@brand">@brand</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => breatherValve.Brand)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <label for="Tipe" class="col-form-label">Tipe</label>
                        <InputSelect id="Tipe" @bind-Value="breatherValve.Type" class="form-control">
                            <option value="">...</option>
                            @foreach (var type in BREATER_VALVE_TYPES)
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => breatherValve.Type)" />
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Merk" class="col-form-label">Material</label>
                    <InputSelect id="Merk" @bind-Value="breatherValve.Material" class="form-control">
                        <option value="">...</option>
                        @foreach (var material in BREATER_VALVE_MATERIALS)
                        {
                            <option value="@material">@material</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => breatherValve.Material)" />
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-6">
                                <label for="TekananDesainPositif" class="col-form-label">Tekkanan Desain (+MMH20)</label>
                                <InputNumber class="form-control" id="TekananDesainPositif" @bind-Value="breatherValve.DesignPressurePos" />
                                <ValidationMessage For="@(() => breatherValve.DesignPressurePos)" />
                            </div>

                            <div class="col-sm-6">
                                <label for="TekananDesainNegatif" class="col-form-label">Tekkanan Desain (-MMH20)</label>
                                <InputNumber class="form-control" id="TekananDesainNegatif" @bind-Value="breatherValve.DesignPressureNeg" />
                                <ValidationMessage For="@(() => breatherValve.DesignPressureNeg)" />
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="DiameterValve" class="col-form-label">Diameter Valve</label>
                                <InputNumber class="form-control" id="DiameterValve" @bind-Value="breatherValve.DiameterValue" @oninput="OnDiameterValveInputChanged" />
                                <ValidationMessage For="@(() => breatherValve.DiameterValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="SatuanDiameter" class="col-form-label">Unit</label>
                                <InputSelect id="SatuanDiameter" @bind-Value="breatherValve.DiameterUnit" class="form-control" disabled="@isDiameterUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in DIAMETER_UNITS)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @* Pesan validasi kustom untuk Satuan Diameter *@
                                @if (breatherValve.DiameterValue.HasValue && breatherValve.DiameterValue.Value > 0 && string.IsNullOrWhiteSpace(breatherValve.DiameterUnit))
                                {
                                    <div class="text-danger">Satuan Diameter harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Jumlah" class="col-form-label">Jumlah</label>
                    <InputNumber id="Jumlah" @bind-Value="breatherValve.Quantity" class="form-control" />
                    <ValidationMessage For="@(() => breatherValve.Quantity)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Foto" class="col-form-label">Foto</label>
                    @if (!fileStatus)
                    {
                        <InputFile id="Foto" class="form-control"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="HandleFileUploadAsync" />
                        <ValidationMessage For="@(() => filePath)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Breather Valve Image">
                            <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data Breather Valve...</p>
        }
    </div>
</div>

@code {
    // Parameter Halaman
    [Parameter]
    public int BreatherValveID { get; set; }

    // Properti Halaman
    private BreatherValve? breatherValve;
    private EditContext? editContext;
    private DotNetObjectReference<BreatherValveEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State Formulir
    private bool isDiameterUnitDisabled = true;

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "Breather Valve";
    private readonly List<string> BREATER_VALVE_BRANDS = new() { "VAREC", "SHAND & JURS", "KSPC" };
    private readonly List<string> BREATER_VALVE_TYPES = new() { "2010B", "94020", "94570", "KSBBFI-6", "KSBB-2" };
    private readonly List<string> BREATER_VALVE_MATERIALS = new() { "Alumunium", "Stainless Steel" };
    private readonly List<string> DIAMETER_UNITS = new() { "inch" };

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadBreatherValveDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadConfigurationAsync()
    {
        try
        {
            _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi `WebStorageRoot`. Detail: {ex.Message}");
        }
    }

    private async Task LoadBreatherValveDataAsync()
    {
        breatherValve = await CRUDService.ReadSingleAsync<BreatherValve, int>(BreatherValveID);
        if (breatherValve == null)
        {
            await NotificationService.AlertMessage("Data Breather Valve tidak ditemukan.");
            NavigationManager.NavigateTo("./BreatherValveList", forceLoad: true);
        }
        else
        {
            // Inisialisasi EditContext dan status file
            editContext = new EditContext(breatherValve);
            editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
            editContext.OnFieldChanged += (sender, e) => StateHasChanged();

            InitializeFileStatus(breatherValve.Image);
            InitializeDiameterUnitStatus(breatherValve.DiameterUnit);
        }
    }

    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }

    private void InitializeDiameterUnitStatus(string? diameterUnit)
    {
        isDiameterUnitDisabled = string.IsNullOrWhiteSpace(diameterUnit);
    }

    // Metode Unggah File
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
                NotificationService.LogMessage($"Pengunggahan gambar gagal. Detail: {UploadService.UploadErrorMessage}");
                filePath = null;
                return;
            }

            filePath = UploadService.FilePath;
            fileStatus = true;
            editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => filePath));
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file. Detail: {ex.Message}");
        }
    }

    private async Task HandleFileChangeAsync()
    {
        if (fileStatus)
        {
            // Hapus file lama jika filePath berubah
            if (filePath != originalFilePath)
            {
                await DeleteOldFileAsync(filePath);
            }
            fileStatus = false;
        }
        else
        {
            fileStatus = true;
        }
    }

    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menghapus file lama. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menghapus file lama. Detail: {UploadService.UploadErrorMessage}");
            }
        }
    }

    private string CreateFilePath(string relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }

    // Metode Penanganan Submit
    private async Task HandleUpdateBreatherValve()
    {
        if (breatherValve == null) return;

        // Validasi kustom untuk Satuan Diameter
        if (breatherValve.DiameterValue.HasValue && breatherValve.DiameterValue.Value > 0 && string.IsNullOrWhiteSpace(breatherValve.DiameterUnit))
        {
            await NotificationService.AlertMessage("Jika Diameter diisi, Satuan Diameter harus dipilih.");
            return;
        }

        // Sinkronisasi path file sebelum update
        breatherValve.Image = fileStatus ? filePath : null;

        // Jika ada perubahan file, hapus file lama
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        try
        {
            await CRUDService.UpdateAsync(breatherValve);
            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menyimpan data. Detail: {CRUDService.CRUDErrorMessage}");
                return;
            }

            NavigationManager.NavigateTo("./BreatherValveList?status=EditSuccess");
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan tak terduga saat memperbarui data. Silakan coba lagi.");
            NotificationService.LogMessage($"Kesalahan saat memperbarui data breather valve. Detail: {ex.Message}");
        }
    }

    private async Task HandleInvalidSubmitAsync()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
        NotificationService.LogMessage($"Pengiriman formulir BreatherValveEdit tidak valid.");
    }

    // Metode Perubahan Input
    private void OnDiameterValveInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double diameterValue))
        {
            breatherValve!.DiameterValue = diameterValue;
        }
        else
        {
            breatherValve!.DiameterValue = null;
        }

        isDiameterUnitDisabled = !breatherValve.DiameterValue.HasValue || breatherValve.DiameterValue.Value <= 0;
        if (isDiameterUnitDisabled)
        {
            breatherValve.DiameterUnit = null;
        }

        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => breatherValve!.DiameterValue));
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => breatherValve!.DiameterUnit));
    }

    // Metode Navigasi
    private async Task CancelAsync()
    {
        // Bersihkan file temporer jika ada
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }

        NavigationManager.NavigateTo("./BreatherValveList");
    }

    // Metode untuk JavaScript Interop
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    // Implementasi IDisposable untuk membersihkan sumber daya
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }
}