@page "/TankInfo/{TankId:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Terminal Manager, Maintenance Supervisor, Maintenance")]

@* Status Pemuatan *@
@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Memuat...</span>
        </div>
        <p class="mt-2">Memuat informasi Tangki...</p>
    </div>
}
@* Status Data Tank Tidak Ditemukan *@
else if (tank is null)
{
    <div class="text-center py-5">
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Data Tidak Ditemukan!</h4>
            <p>Tangki dengan ID yang diberikan tidak ada atau terjadi kesalahan saat memuat data.</p>
            <hr>
            <p class="mb-0">Mohon cek kembali ID Tangki atau hubungi administrator.</p>
        </div>
    </div>
}
@* Status Data User Tidak Ditemukan *@
else if (user is null)
{
    <div class="text-center py-5">
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">User Tidak Ditemukan!</h4>
            <p>User tidak ada atau terjadi kesalahan saat memuat data.</p>
            <hr>
            <p class="mb-0">Lakukan refresh halaman atau hubungi administrator.</p>
        </div>
    </div>
}
else
{
    <div class="card">
        @* Header Halaman *@
        <div class="card-header bg-light border-primary">
            <ul class="nav nav-tabs card-header-tabs" id="nav-tab" role="tablist">
                <li class="nav-item">
                    <a style="cursor: pointer;" @onclick="NavigateToTankList" class="nav-link" aria-label="Kembali ke Daftar Tank">
                        <span class="oi oi-chevron-left"></span>
                    </a>
                </li>
                <li class="nav-item">
                    <button class="nav-link active" id="information-tab" data-bs-toggle="tab" data-bs-target="#information" type="button" role="tab" aria-controls="information" aria-selected="true">
                        Information
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">
                        History
                    </button>
                </li>
            </ul>
        </div>

        <div class="card-body">

            @* Tab Informasi *@
            <div class="tab-content" id="TankTabContent">
                <div class="tab-pane fade show active" id="information" role="tabpanel" aria-labelledby="information-tab">
                    <div class="container">
                        <div class="row align-items-center mt-3 mb-3">

                            @* Bagian Foto Tank *@
                            <div class="col-md-4 d-flex justify-content-center">
                                <div class="border rounded-lg overflow-hidden" style="max-width: 250px; height: auto;">
                                    <img class="img-fluid" src="@CreateFilePath(tank.Image)" alt="Foto Tank" />
                                </div>
                            </div>

                            @* Bagian Informasi Detail *@
                            <div class="col-md-8">
                                <h5 class="display-6 mb-2">Tank - @tank.TankNo</h5><hr />
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label class="form-label text-muted">Material</label>
                                        <p class="info-text">@tank.Material</p>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label text-muted">Capacity (KL)</label>
                                        <p class="info-text">@tank.Capacity</p>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label text-muted">Internal Coating</label>
                                        <p class="info-text">@tank.InternalCoating</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Tab Riwayat *@
                <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
                    <div class="container row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-sm-5 form-group">
                                    <h5 class="display-6">Riwayat Maintenance</h5>
                                </div>
                                @if (canEditData)
                                {
                                    <div class="col-sm-7 d-flex justify-content-end align-items-center">
                                        <button type="button" class="btn btn-primary mx-2" data-bs-toggle="modal" data-bs-target="#addHistoryModal">
                                            + Tambah
                                        </button>
                                    </div>
                                }
                            </div>
                            <hr />
                            @if (tankHistoryList != null && tankHistoryList.Any())
                            {
                                <QuickGrid Items="@(tankHistoryList.AsQueryable())" Virtualize="false" Pagination="@pagination" Class="table table-striped table-hover table-bordered">
                                    <TemplateColumn Title="No">
                                        @(tankHistoryList.IndexOf(context) + 1)
                                    </TemplateColumn>
                                    <PropertyColumn Property="@(h => h.MaintenanceDate.ToString("dd-MM-yyyy"))" Title="Tanggal" Sortable="true" />
                                    <PropertyColumn Property="@(h => h.Technician)" Title="Teknisi" />
                                    <PropertyColumn Property="@(h => h.MaintenanceCategory)" Title="Kategori" />
                                    <TemplateColumn Title="Aksi">
                                        <button class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#viewHistoryModal" @onclick="@(() => OpenDetailHistoryModal(context))">
                                            <span class="oi oi-eye"></span>
                                        </button>
                                        <button class="btn btn-danger btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#deleteHistoryModal" @onclick="@(() => OpenDeleteHistoryModal(context))">
                                            <span class="oi oi-trash"></span>
                                        </button>
                                    </TemplateColumn>
                                </QuickGrid>
                                <Paginator State="@pagination" />
                            }
                            else
                            {
                                <p>Belum ada riwayat untuk Tangki ini.</p>
                            }
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    @* View History Modal *@
    <div class="modal fade" id="viewHistoryModal" tabindex="-1" aria-labelledby="viewHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewHistoryModalLabel">Detail Riwayat Maintenance</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (selectedHistory != null)
                    {
                        <div class="row g-3">
                            <div class="col-md-6">
                                <p class="form-label"><b>Tanggal Maintenance</b></p>
                                <p class="form-control-plaintext">@selectedHistory.MaintenanceDate.ToString("dd-MM-yyyy")</p>
                            </div>
                            <div class="col-md-6">
                                <p class="form-label"><b>Kategori</b></p>
                                <p class="form-control-plaintext">@selectedHistory.MaintenanceCategory</p>
                            </div>
                            <div class="col-md-6">
                                <p class="form-label"><b>Teknisi</b></p>
                                <p class="form-control-plaintext">@selectedHistory.Technician</p>
                            </div>
                            <div class="col-md-6">
                                @if (!string.IsNullOrWhiteSpace(@selectedHistory.PPMId))
                                {
                                    <p class="form-label"><b>PPM ID</b></p>
                                    <p class="form-control-plaintext">@selectedHistory.PPMId</p>
                                }
                            </div>
                            <div class="col-md-6">
                                <p class="form-label"><b>Deskripsi</b></p>
                                <p class="form-control-plaintext">@selectedHistory.Description</p>
                            </div>

                            <div class="col-md-6">
                                <p class="form-label"><b>Foto</b></p>
                                <img style="max-height: 150px;" src="@CreateFilePath(selectedHistory.Photo)" class="img-fluid" alt="Foto Maintenance">
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                </div>
            </div>
        </div>
    </div>

    @* Add History Modal *@
    <div class="modal fade" id="addHistoryModal" tabindex="-1" role="dialog" aria-labelledby="addHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addHistoryModalLabel">Tambah Riwayat Maintenance</h5>
                    <button type="button" @onclick="DeleteHistoryPhoto" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newMaintenanceHistory" OnValidSubmit="HandleValidSubmitHistoryAsync">
                        <DataAnnotationsValidator />

                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <InputDate id="MaintenanceDate" @bind-Value="newMaintenanceHistory.MaintenanceDate" class="form-control" placeholder="Tanggal Maintenance" required />
                                    <label for="MaintenanceDate">Tanggal Maintenance<span class="required">*</span></label>
                                    <ValidationMessage For="@(() => newMaintenanceHistory.MaintenanceDate)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <InputSelect id="MaintenanceCategory" @bind-Value="newMaintenanceHistory.MaintenanceCategory" class="form-select" placeholder="Kategori Maintenance" required>
                                        <option value="">...</option>
                                        @foreach (var category in JOB_CATEGORIES)
                                        {
                                            <option value="@category">@category</option>
                                        }
                                    </InputSelect>
                                    <label for="MaintenanceCategory">Kategori Maintenance<span class="required">*</span></label>
                                    <ValidationMessage For="@(() => newMaintenanceHistory.MaintenanceCategory)" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-floating mb-3">
                                    <InputTextArea id="Description" @bind-Value="newMaintenanceHistory.Description" class="form-control" placeholder="Deskripsi" style="height: 100px;" required />
                                    <label for="Description">Deskripsi<span class="required">*</span></label>
                                    <ValidationMessage For="@(() => newMaintenanceHistory.Description)" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-floating mb-3">
                                    <InputText id="Technician" @bind-Value="newMaintenanceHistory.Technician" class="form-control" placeholder="Teknisi" required />
                                    <label for="Technician">Teknisi<span class="required">*</span></label>
                                    <ValidationMessage For="@(() => newMaintenanceHistory.Technician)" />
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="mb-3">
                                    <label for="Foto" class="form-label">Foto</label>
                                    @if (string.IsNullOrWhiteSpace(newMaintenanceHistory.Photo))
                                    {
                                        <InputFile id="Foto" class="form-control"
                                                   accept=".jpg,.jpeg,.png"
                                                   OnChange="HandleFileUpload" />
                                        <small class="form-text text-muted">Opsional: Unggah foto (JPG, JPEG, PNG).</small>
                                    }
                                    else
                                    {
                                        <div class="d-flex align-items-center mt-2">
                                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(newMaintenanceHistory.Photo)" alt="Photo">
                                            <button @onclick="() => HandleFileChangeAsync(newMaintenanceHistory.Photo)" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                                        </div>
                                    }
                                    <ValidationMessage For="@(() => newMaintenanceHistory.Photo)" />
                                    @if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                                    {
                                        <div class="text-danger mt-2">@UploadService.UploadErrorMessage</div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer mt-4">
                            <button @onclick="DeleteHistoryPhoto" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                            <button type="submit" class="btn btn-success">Simpan</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    @* Delete History Modal *@
    <div class="modal fade" id="deleteHistoryModal" tabindex="-1" aria-labelledby="deleteHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteHistoryModalLabel">Hapus Riwayat Maintenance?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Apakah Anda yakin ingin menghapus riwayat maintenance yang dipilih?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@(() => DeleteHistoryAsync())">Hapus</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameter dari URL
    [Parameter]
    public int TankId { get; set; }

    // Properti Halaman
    private User? user;
    private InventoryMaintenanceHistory newMaintenanceHistory = new();
    private List<InventoryMaintenanceHistory>? tankHistoryList;
    private InventoryMaintenanceHistory? selectedHistory;

    // Properti State
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private Tank? tank;
    private bool isLoading = true;
    private bool canEditData;
    private int? previousId;
    private PaginationState pagination = new() { ItemsPerPage = 10 };

    // Konstanta
    private string _webStorageRoot = string.Empty;
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string IMAGE_FILE_CATEGORY = "img";
    private const string IMAGE_FOLDER_NAME = "Tank";
    private const string TANK_LIST_PATH = "./TankList";
    private static readonly List<string> JOB_CATEGORIES = new() { "Perbaikan", "Modifikasi", "Pemasangan Baru", "Verifikasi/Testing" };

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (TankId != previousId)
        {
            isLoading = true;
            previousId = TankId;
            newMaintenanceHistory = new() { MaintenanceDate = DateTime.Today };
            await LoadTankAsync();
            await LoadTankMaintenanceHistoryAsync();
            await LoadUserAsync();
            isLoading = false;
        }
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadConfigurationAsync()
    {
        try { _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; }
        catch (Exception ex) { NotificationService.LogMessage($"Gagal memuat konfigurasi: {ex.Message}"); }
    }

    private async Task LoadUserAsync()
    {
        if (authenticationStateTask == null) return;
        var userPrincipal = (await authenticationStateTask).User;
        var userId = userPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        canEditData = userPrincipal.IsInRole("Admin") || userPrincipal.IsInRole("Maintenance");

        if (userPrincipal.Identity?.IsAuthenticated == true && !string.IsNullOrEmpty(userId))
        {
            try { user = await CRUDService.ReadSingleAsync<User, string>(userId); }
            catch (Exception ex) { NotificationService.LogMessage($"Gagal memuat info pengguna: {ex.Message}"); }
        }
    }

    private async Task LoadTankAsync()
    {
        try { tank = await CRUDService.ReadSingleAsync<Tank, int>(TankId); }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat data Tangki.");
            NotificationService.LogMessage($"Gagal memuat data Tangki dengan ID {TankId}: {ex.Message}");
            tank = null;
        }
    }

    private async Task LoadTankMaintenanceHistoryAsync()
    {
        if (tank is null) return;
        try
        {
            var histories = await CRUDService.ReadAllAsync<InventoryMaintenanceHistory>(
                filter: h => h.InventoryId == tank.TankID && h.InventoryName == "Tank",
                orderBy: q => q.OrderByDescending(h => h.MaintenanceDate)
            );
            tankHistoryList = histories.ToList();
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat riwayat maintenance Tangki.");
            NotificationService.LogMessage($"Gagal memuat riwayat Tangki dengan ID {TankId}: {ex.Message}");
            tankHistoryList = null;
        }
    }

    private string CreateFilePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath)) { return "/noimg.png"; }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }

    // Penanganan File
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await UploadAndSetPhoto(e);
    }

    private async Task HandleFileChangeAsync(string? filePath)
    {
        if (string.IsNullOrWhiteSpace(filePath)) return;
        try
        {
            await UploadService.FileChange(filePath, SUB_FOLDER_NAME);
            newMaintenanceHistory.Photo = null;
        }
        catch (Exception ex) { NotificationService.LogMessage($"Gagal mengganti file: {ex.Message}"); }
        StateHasChanged();
    }

    private async Task UploadAndSetPhoto(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, IMAGE_FOLDER_NAME, SUB_FOLDER_NAME, IMAGE_FILE_CATEGORY);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah: {UploadService.UploadErrorMessage}");
                return;
            }
            newMaintenanceHistory.Photo = UploadService.FilePath;
        }
        catch (Exception ex) { NotificationService.LogMessage($"Gagal mengunggah file: {ex.Message}"); }
    }

    // Penanganan Form Riwayat
    private async Task HandleValidSubmitHistoryAsync()
    {
        if (tank is null || user is null) return;

        newMaintenanceHistory.InventoryId = tank.TankID;
        newMaintenanceHistory.InventoryName = "Tank";
        newMaintenanceHistory.CreatedBy = user.FullName;
        newMaintenanceHistory.CreatedDate = DateTime.Now;

        await CRUDService.CreateAsync(newMaintenanceHistory);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan riwayat.");
            NotificationService.LogMessage($"Gagal menyimpan riwayat: {CRUDService.CRUDErrorMessage}");
            return;
        }

        await JSRuntime.InvokeVoidAsync("hideModal", "addHistoryModal");
        NavigationManager.Refresh();
    }

    // Penanganan Aksi Modal
    private void OpenDetailHistoryModal(InventoryMaintenanceHistory history) => selectedHistory = history;
    private void OpenDeleteHistoryModal(InventoryMaintenanceHistory history) => selectedHistory = history;

    private async Task DeleteHistoryAsync()
    {
        if (selectedHistory == null) return;
        try
        {
            //Hapus Foto
            if (!string.IsNullOrEmpty(selectedHistory.Photo))
            {
                await UploadService.FileChange(selectedHistory.Photo, SUB_FOLDER_NAME);
            }

            await CRUDService.DeleteAsync(selectedHistory);
            await NotificationService.AlertMessage("Riwayat berhasil dihapus.");
            NavigationManager.Refresh();
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal menghapus riwayat.");
            NotificationService.LogMessage($"Gagal menghapus riwayat ID {selectedHistory.Id}: {ex.Message}");
        }
    }

    private async Task DeleteHistoryPhoto()
    {
        if (string.IsNullOrEmpty(newMaintenanceHistory.Photo)) return;
        await UploadService.FileChange(newMaintenanceHistory.Photo, SUB_FOLDER_NAME);
        newMaintenanceHistory.Photo = null;
        StateHasChanged();
    }

    // Navigasi
    private void NavigateToTankList() => NavigationManager.NavigateTo(TANK_LIST_PATH);
}