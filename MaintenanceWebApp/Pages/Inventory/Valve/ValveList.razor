@page "/ValveList"
@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager

@* Services *@
@inject CRUDService CRUDService
@inject UrlStatusService UrlStatusService
@inject TableService TableService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Terminal Manager, Maintenance Supervisor, Maintenance")]

@* Komponen Daftar Valve *@
<div class="card p-3">
    @* Notifikasi Status *@
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="container px-0">
            <div style="padding: 10px;" class="alert alert-success alert-dismissible fade show" role="alert">
                @statusMessage
                <button style="background-color: transparent; border: transparent; float: right; z-index: 0; padding: 1rem;"
                type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Tutup"></button>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-sm-5 form-group">
            <h5 class="display-6">Valve</h5>
            @if (HasValves)
            {
                <div class="d-flex align-items-center mt-3">
                    Jumlah per Halaman:
                    <select class="form-select form-select-sm w-auto ms-2" @bind="pagination.ItemsPerPage">
                        <option value="5">5</option>
                        @if (ValveCount > 5)
                        {
                            <option value="10">10</option>
                        }
                        @if (ValveCount > 10)
                        {
                            <option value="20">20</option>
                        }
                        @if (ValveCount > 20)
                        {
                            <option value="50">50</option>
                        }
                    </select>
                </div>
            }
        </div>

        @if (canEditData)
        {
            <div class="col-sm-7 d-flex justify-content-end align-items-center">
                <button class="btn btn-primary" @onclick="NavigateToAddValve">
                    + Tambah
                </button>
            </div>
        }
    </div>

    <div>
        @* Tampilan Data Valve *@
        @if (isLoading)
        {
            @* Memuat Data *@
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Memuat...</span>
                </div>
                <p>Memuat Data Valve...</p>
            </div>
        }
        else if (!HasValves)
        {
            @* Tidak Ada Data *@
            <hr />
            <div class="text-center py-3">
                <p>Tidak ada data Valve ditemukan.</p>
                @if (!string.IsNullOrEmpty(searchFilter))
                {
                    <button class="btn btn-link" @onclick="ClearFilter">Hapus Filter</button>
                }
            </div>
        }
        else
        {
            @* Kotak Pencarian *@
            <div class="search-box mb-3 mt-3">
                <input class="form-control" type="search" autofocus @bind="searchFilter" @bind:event="oninput" placeholder="Cari ID, Track, atau Tipe..." />
            </div>

            @* Tabel Data Valve *@
            <QuickGrid Items="FilteredValves" Virtualize="false" Pagination="pagination" Class="table table-striped table-hover table-bordered">
                <TemplateColumn Title="ID Valve" Sortable="true">
                    <a style="cursor:pointer;
                       color: royalblue;" @onclick="@(() => NavigateToValveInfo(context))">
                        @if (!string.IsNullOrEmpty(context.ValveEntry) && !string.IsNullOrEmpty(context.ValveExit))
                        {
                            @context.ValveEntry<span>&nbsp;ke&nbsp;</span>@context.ValveExit
                        }
                        else
                        {
                            @context.CFSValveTrack
                        }
                    </a>
                </TemplateColumn>
                <PropertyColumn Property="@(valve => valve.Location)" Title="Lokasi" Sortable="true" />
                <PropertyColumn Property="@(valve => valve.Type)" Title="Tipe" Sortable="true" />

                @if (canEditData)
                {
                    <TemplateColumn Title="Aksi" Class="td-action">
                        <button @onclick="@(() => NavigateToEditValve(@context))" class="btn btn-warning btn-sm">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button @onclick="@(() => NavigateToDeleteValve(context))" class="btn btn-danger btn-sm">
                            <span class="oi oi-trash"></span>
                        </button>
                    </TemplateColumn>
                }
            </QuickGrid>

            <Paginator State="pagination" />
        }
    </div>
</div>

@code {
    // Cascading Parameter
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    // Properti State
    private bool canEditData;
    private IQueryable<Valve>? _allValves;
    private bool isLoading = true;
    private string statusMessage = string.Empty;

    // Konstanta
    private const string ADD_VALVE_PATH = "./ValveAdd";
    private const string VALVE_INFO_PATH = "./ValveInfo/{0}";
    private const string VALVE_EDIT_PATH = "./ValveEdit/{0}";
    private const string VALVE_DELETE_PATH = "./ValveDelete/{0}";

    // Pagination State
    private PaginationState pagination = new() { ItemsPerPage = 5 };

    // Properti Terkomputasi
    private bool HasValves => !isLoading && (_allValves?.Any() ?? false);
    private int ValveCount => _allValves?.Count() ?? 0;

    // Properti untuk Filtering
    private string searchFilter
    {
        get => TableService.NoFilter ?? string.Empty;
        set
        {
            if (TableService.NoFilter != value)
            {
                TableService.NoFilter = value;
            }
        }
    }

    private IQueryable<Valve> FilteredValves
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchFilter))
            {
                return _allValves ?? Enumerable.Empty<Valve>().AsQueryable();
            }

            return _allValves?.Where(valve =>
                (valve.ValveID.ToString().Contains(searchFilter, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(valve.ValveTrack) && valve.ValveTrack.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(valve.ValveEntry) && valve.ValveEntry.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(valve.ValveExit) && valve.ValveExit.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(valve.Type) && valve.Type.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)))
                ?? Enumerable.Empty<Valve>().AsQueryable();
        }
    }

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CheckUserAuthorizationAsync();
        await LoadAllValvesAsync();
        LoadUrlStatus();
    }

    // Metode Bantuan (Helper Methods)
    private async Task CheckUserAuthorizationAsync()
    {
        // Memeriksa peran pengguna untuk menentukan apakah mereka memiliki izin untuk mengedit data.
        if (authenticationStateTask is not null)
        {
            var authenticationState = await authenticationStateTask;
            var user = authenticationState.User;
            canEditData = user.IsInRole("Admin") || user.IsInRole("Maintenance") || user.IsInRole("Maintenance Supervisor");
        }
    }

    private async Task LoadAllValvesAsync()
    {
        // Mengambil semua data valve dari database secara asinkron.
        try
        {
            _allValves = (await CRUDService.ReadAllAsync<Valve>(orderBy: q => q.OrderBy(v => v.ValveID)))
                .ToList()
                .AsQueryable();
        }
        catch (Exception ex)
        {
            // Menangani kesalahan saat memuat data dengan notifikasi yang informatif.
            NotificationService.AlertMessage($"Terjadi kesalahan saat memuat data Valve. Silakan coba kembali nanti.");
            NotificationService.LogMessage($"Kesalahan saat memuat data Valve: {ex.Message}");
        }
        finally
        {
            // Mengubah status loading setelah data berhasil dimuat atau terjadi kesalahan.
            isLoading = false;
        }
    }

    private void LoadUrlStatus()
    {
        // Mengambil dan menghapus pesan status dari URL jika ada.
        statusMessage = UrlStatusService.GetAndClearUrlStatusMessage();

        // Jika ada pesan status, navigasi ulang untuk membersihkan URL agar tidak muncul lagi saat refresh.
        if (!string.IsNullOrEmpty(statusMessage))
        {
            NavigationManager.NavigateTo(NavigationManager.Uri.Split('?')[0], replace: true);
        }
    }

    // Event Handler dan Navigasi
    private void ClearFilter()
    {
        // Mengatur ulang filter pencarian menjadi string kosong.
        searchFilter = string.Empty;
    }

    private void NavigateToAddValve()
    {
        // Navigasi ke halaman untuk menambah data valve baru.
        NavigationManager.NavigateTo(ADD_VALVE_PATH);
    }

    private void NavigateToValveInfo(Valve valve)
    {
        // Navigasi ke halaman detail informasi valve berdasarkan ID.
        NavigationManager.NavigateTo(string.Format(VALVE_INFO_PATH, valve.ValveID));
    }

    private void NavigateToEditValve(Valve valve)
    {
        // Navigasi ke halaman untuk mengedit data valve berdasarkan ID.
        NavigationManager.NavigateTo(string.Format(VALVE_EDIT_PATH, valve.ValveID));
    }

    private void NavigateToDeleteValve(Valve valve)
    {
        // Navigasi ke halaman untuk menghapus data valve berdasarkan ID.
        NavigationManager.NavigateTo(string.Format(VALVE_DELETE_PATH, valve.ValveID));
    }
}