@page "/ValveEdit/{ValveID:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" class="nav-link" aria-label="Kembali ke Daftar Valve">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi Valve</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (valve != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="valve" OnValidSubmit="HandleUpdateValve" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <div class="col-sm-12 mb-3">
                        <label for="Jalur" class="col-form-label">Jalur<span class="required">*</span></label>
                        <InputSelect id="Jalur" @bind-Value="valve.ValveTrack" class="form-control">
                            <option value="">...</option>
                            @foreach (var track in valveTrack)
                            {
                                <option value="@track">@track</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => valve.ValveTrack)" />
                    </div>

                    <div class="col-sm-12 mb-3">
                        <label for="Lokasi" class="col-form-label">Lokasi<span class="required">*</span></label>
                        <InputSelect id="Lokasi" @bind-Value="valve.Location" class="form-control">
                            <option value="">...</option>
                            @if (valve.ValveTrack == "Tangki ke Hose Pit")
                            {
                                @foreach (var location in valveTankLocation)
                                {
                                    <option value="@location">@location</option>
                                }
                            }
                            else if (valve.ValveTrack == "Jetty ke Hose Pit")
                            {
                                @foreach (var location in valveJettyLocation)
                                {
                                    <option value="@location">@location</option>
                                }
                            }
                            else if (valve.ValveTrack == "CFS")
                            {
                                @foreach (var location in valveCfsLocation)
                                {
                                    <option value="@location">@location</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => valve.Location)" />
                    </div>

                    @if (!string.IsNullOrWhiteSpace(valve.Location) && !string.IsNullOrWhiteSpace(valve.ValveTrack))
                    {

                        @if (valve.ValveTrack == "Tangki ke Hose Pit" || valve.ValveTrack == "Jetty ke Hose Pit")
                        {
                            <div class="col-sm-6 mb-3">
                                <label for="Entry" class="col-form-label">Entry</label>
                                <InputSelect id="Entry" @bind-Value="valve.ValveEntry" class="form-control">
                                    <option value="">...</option>
                                    @if (valve.ValveTrack == "Tangki ke Hose Pit")
                                    {
                                        @foreach (var entry in tankEntryTrack)
                                        {
                                            <option value="@entry">@entry</option>
                                        }
                                    }
                                    else
                                    {
                                        @foreach (var entry in jettyEntryTrack)
                                        {
                                            <option value="@entry">@entry</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => valve.ValveEntry)" />
                            </div>
                            <div class="col-sm-6 mb-3">
                                <label for="Exit" class="col-form-label">Exit</label>
                                <InputSelect id="Exit" @bind-Value="valve.ValveExit" class="form-control">
                                    <option value="">...</option>
                                    @if (valve.ValveTrack == "Tangki ke Hose Pit")
                                    {
                                        @foreach (var exit in tankExitTrack)
                                        {
                                            <option value="@exit">@exit</option>
                                        }
                                    }
                                    else
                                    {
                                        @foreach (var exit in jettyExitTrack)
                                        {
                                            <option value="@exit">@exit</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => valve.ValveExit)" />
                            </div>

                        }
                        else
                        {
                            <div class="col-sm-12 mb-3">
                                <label for="JalurCFS" class="col-form-label">Jalur Pipa CFS</label>
                                <InputSelect id="JalurCFS" @bind-Value="valve.CFSValveTrack" class="form-control">
                                    <option value="">...</option>

                                    @if (valve.Location == "TOP LAYER")
                                    {
                                        @foreach (var track in cfsTopTrack)
                                        {
                                            <option value="@track">@track</option>
                                        }
                                    }
                                    else
                                    {
                                        @foreach (var track in cfsBottomTrack)
                                        {
                                            <option value="@track">@track</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => valve.CFSValveTrack)" />
                            </div>
                        }

                    }

                    <div class="col-sm-12 mb-3">
                        <label for="Tipe" class="col-form-label">Tipe<span class="required">*</span></label>
                        <InputSelect id="Tipe" @bind-Value="valve.Type" class="form-control">
                            <option value="">...</option>
                            @foreach (var type in valveType)
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => valve.Type)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <label for="Material" class="col-form-label">Material</label>
                        <InputSelect id="Material" @bind-Value="valve.Material" class="form-control">
                            <option value="">...</option>
                            @foreach (var material in valveMaterial)
                            {
                                <option value="@material">@material</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => valve.Material)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="Diameter" class="col-form-label">Diameter</label>
                                <InputNumber class="form-control" id="Diameter" @bind-Value="valve.DiameterValue" @oninput="OnDiameterInputChanged" />
                                <ValidationMessage For="@(() => valve.DiameterValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="SatuanDiameter" class="col-form-label">Unit</label>
                                <InputSelect id="SatuanDiameter" @bind-Value="valve.DiameterUnit" class="form-control" disabled="@IsDiameterUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in diameterUnits)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @if (valve.DiameterValue.HasValue && valve.DiameterValue.Value > 0 && string.IsNullOrWhiteSpace(valve.DiameterUnit))
                                {
                                    <div class="text-danger">Satuan Diameter harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-12 mb-3">
                        <label for="Jumlah" class="col-form-label">Jumlah</label>
                        <InputNumber id="Jumlah" @bind-Value="valve.Quantity" class="form-control" />
                        <ValidationMessage For="@(() => valve.Quantity)" />
                    </div>

                    <div class="col-sm-12 mb-3">
                        <label for="Foto" class="col-form-label">Foto</label>
                        @if (!fileStatus)
                        {
                            <InputFile id="Foto" class="form-control"
                                       accept=".jpg,.jpeg,.png"
                                       OnChange="HandleFileUploadAsync" />
                            <ValidationMessage For="@(() => filePath)" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center">
                                <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Valve Image">
                                <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                            </div>
                        }
                    </div>
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data Valve...</p>
        }
    </div>
</div>

@code {
    // Parameter Halaman
    [Parameter]
    public int ValveID { get; set; }

    // Properti Halaman
    private Valve? valve;
    private EditContext? editContext;
    private DotNetObjectReference<ValveEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State Formulir
    private bool IsDiameterUnitDisabled = true;

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "Valve";

    // Form Properties
    private List<string> valveTrack = new() { "Tangki ke Hose Pit", "Jetty ke Hose Pit", "CFS" };
    private List<string> valveTankLocation = new() { "Tank Pit 1", "Tank Pit 2", "Tank Pit 3", "Tank Pit 4", "Tank Pit 5", "Tank Pit 6", "Tank Pit 7" };
    private List<string> valveJettyLocation = new() { "Jetty 1", "Jetty 2" };
    private List<string> valveCfsLocation = new() { "TOP LAYER", "BOTTOM LAYER" };
    private List<string> valveType = new() { "Gate Valve", "Check Valve", "Ball Valve" };
    private List<string> valveMaterial = new() { "Stainless Steel", "Carbon Steel" };
    private List<string> diameterUnits = new() { "inch", "mm" };
    private List<string> tankEntryTrack = new() {
        "T-101", "T-102", "T-103", "T-104", "T-105", "T-106", "T-107", "T-108", "T-109", "T-110", "T-111", "T-112",
        "T-201", "T-202", "T-203", "T-204", "T-205", "T-206", "T-207", "T-208", "T-209", "T-210", "T-211",
        "T-301", "T-302", "T-303", "T-304", "T-305", "T-306", "T-307", "T-308", "T-309", "T-310", "T-311",
        "T-402", "T-403", "T-404", "T-501", "T-502", "T-503", "T-504", "T-505", "T-506", "T-507", "T-508",
        "T-601", "T-602", "T-603", "T-604", "T-605", "T-606", "T-607", "T-608", "T-609", "T-610", "T-611",
        "T-612", "T-613", "T-614", "T-615", "T-616", "T-701", "T-702", "T-703", "T-704", "T-705", "T-706",
        "T-707", "T-708", "T-709", "T-710", "T-711"
    };
    private List<string> tankExitTrack = new() { "Hose Pit 1", "Hose Pit 1 Header", "Hose Pit 2", "Hose Pit 3", "Hose Pit 4", "Hose Pit 5" };
    private List<string> jettyEntryTrack = new() { "Jetty 1", "Jetty 2" };
    private List<string> jettyExitTrack = new() { "Hose Pit 1 (Jalur pipa no.1)", "Hose Pit 1 (Jalur pipa no.2)", "Hose Pit 1 (Jalur pipa no.3)",
        "Hose Pit 1 (Jalur pipa no.4)", "Hose Pit 1 (Jalur pipa no.5)", "Hose Pit 1 (Jalur pipa no.6)", "Hose Pit 1 (Jalur pipa no.7)",
        "Hose Pit 4 (Jalur pipa no.4)", "Hose Pit 4 (Jalur pipa no.5)", "Hose Pit 4 (Jalur pipa no.6)", "Hose Pit 4 (Jalur pipa no.7)"
    };
    private List<string> cfsTopTrack = new() {
        "T-01", "T-02", "T-03", "T-04", "T-05", "T-06", "T-07", "T-08", "T-19", "T-20", "T-21", "T-22",
        "T-38", "T-39", "T-40"
    };
    private List<string> cfsBottomTrack = new()
    {
        "B-01", "B-02", "B-03", "B-04", "B-05", "B-06", "B-07", "B-08", "B-09", "B-10",
        "B-11", "B-12", "B-13", "B-14", "B-15", "B-16", "B-17", "B-18", "B-19", "B-20",
        "B-21", "B-22", "B-23", "B-24", "B-25", "B-26", "B-27", "B-28", "B-29", "B-30",
        "B-31", "B-32", "B-33", "B-34", "B-35", "B-36", "B-37", "B-38", "B-39", "B-40"
    };

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadValveDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadConfigurationAsync()
    {
        try
        {
            _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi `WebStorageRoot`. Detail: {ex.Message}");
        }
    }

    private async Task LoadValveDataAsync()
    {
        valve = await CRUDService.ReadSingleAsync<Valve, int>(ValveID);
        if (valve == null)
        {
            await NotificationService.AlertMessage("Data Valve tidak ditemukan.");
            NavigationManager.NavigateTo("./ValveList", forceLoad: true);
        }
        else
        {
            // Inisialisasi EditContext dan status file
            editContext = new EditContext(valve);
            editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
            editContext.OnFieldChanged += (sender, e) => StateHasChanged();

            InitializeFileStatus(valve.Image);

            // Inisialisasi status unit
            IsDiameterUnitDisabled = !valve.DiameterValue.HasValue || valve.DiameterValue.Value <= 0;
        }
    }

    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }

    // Metode Unggah File
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
                NotificationService.LogMessage($"Pengunggahan gambar gagal. Detail: {UploadService.UploadErrorMessage}");
                filePath = null;
                return;
            }

            filePath = UploadService.FilePath;
            fileStatus = true;
            editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => filePath));
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file. Detail: {ex.Message}");
        }
    }

    private async Task HandleFileChangeAsync()
    {
        if (fileStatus)
        {
            // Hapus file lama jika filePath berubah
            if (filePath != originalFilePath)
            {
                await DeleteOldFileAsync(filePath);
            }
            fileStatus = false;
        }
        else
        {
            fileStatus = true;
        }
    }

    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menghapus file lama. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menghapus file lama. Detail: {UploadService.UploadErrorMessage}");
            }
        }
    }

    private string CreateFilePath(string relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }

    // Metode Validasi Input
    private void OnDiameterInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentDiameterInputValue))
        {
            valve!.DiameterValue = currentDiameterInputValue;
        }
        else
        {
            valve!.DiameterValue = null;
        }

        IsDiameterUnitDisabled = !valve.DiameterValue.HasValue || valve.DiameterValue.Value <= 0;
        if (IsDiameterUnitDisabled)
        {
            valve.DiameterUnit = null;
        }

        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => valve!.DiameterValue));
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => valve!.DiameterUnit));
    }

    // Metode Penanganan Submit
    private async Task HandleUpdateValve()
    {
        if (valve == null) return;

        // Validasi kustom untuk Satuan Diameter
        if (valve.DiameterValue.HasValue && valve.DiameterValue.Value > 0 && string.IsNullOrWhiteSpace(valve.DiameterUnit))
        {
            await NotificationService.AlertMessage("Jika Diameter diisi, Satuan Diameter harus dipilih.");
            return;
        }

        // Sinkronisasi path file sebelum update
        valve.Image = fileStatus ? filePath : null;

        // Jika ada perubahan file, hapus file lama
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        try
        {
            await CRUDService.UpdateAsync(valve);
            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menyimpan data. Detail: {CRUDService.CRUDErrorMessage}");
                return;
            }

            NavigationManager.NavigateTo("./ValveList?status=EditSuccess");
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan tak terduga saat memperbarui data. Silakan coba lagi.");
            NotificationService.LogMessage($"Kesalahan saat memperbarui data Valve. Detail: {ex.Message}");
        }
    }

    private async Task HandleInvalidSubmitAsync()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
        NotificationService.LogMessage($"Pengiriman formulir ValveEdit tidak valid.");
    }

    // Metode Navigasi
    private async Task CancelAsync()
    {
        // Bersihkan file temporer jika ada
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }

        NavigationManager.NavigateTo("./ValveList");
    }

    // Metode untuk JavaScript Interop
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    // Implementasi IDisposable untuk membersihkan sumber daya
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }
}