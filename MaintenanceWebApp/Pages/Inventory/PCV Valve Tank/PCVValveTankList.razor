@page "/PCVValveTankList"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@implements IDisposable

@* Services *@
@inject CRUDService CRUDService
@inject UrlStatusService UrlStatusService
@inject TableService TableService

@* Roles Authorize *@
@attribute [Authorize(Roles = "Admin, Terminal Manager, Maintenance Supervisor, Maintenance")]

@* Status Notification *@
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="container px-0">
        <div style="padding: 10px;" class="alert alert-success alert-dismissible fade show" role="alert">
            @statusMessage
            <button style="background-color: transparent; border: transparent; float: right;" type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    </div>
}

<div class="card">

    <div class="row px-3">
        <div class="col-sm-5 form-group">
            <h5 class="display-6">PCV Valve Tank</h5>
            @if (HasPCVValveTanks)
            {
                @if (PCVValveTankCount > 5)
                {
                    <div class="page-size-chooser my-2">
                        Items per page:
                        <select @bind="@Pagination.ItemsPerPage">
                            <option>5</option>
                            @if (PCVValveTankCount > 10)
                            {
                                <option>10</option>
                            }
                            @if (PCVValveTankCount > 20)
                            {
                                <option>20</option>
                            }
                        </select>
                    </div>
                }
            }
        </div>

        @if (dataPermission)
        {
            <div class="col-sm-4"></div>

            <div class="col-sm-3 d-flex align-items-center justify-content-end">
                <button class="btn btn-primary" @onclick="NavigateToAddPCVValveTank">
                    Tambah
                </button>
            </div>
        }

    </div>

    <div class="px-3">
        @* Loading Data *@
        @if (_isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Memuat Data PCV Valve Tank...</p>
            </div>
        }

        else if (!HasPCVValveTanks)
        {
            @* No PCV Valve Tank Data *@
            <hr />
            <div class="text-center py-3">
                <p>Tidak ada PCV Valve Tank.</p>
                @if (!string.IsNullOrEmpty(NoFilter))
                {
                    <button class="btn btn-link" @onclick="ClearFilter">Clear filter</button>
                }
            </div>
        }
        else
        {
            @* Search Box *@
            <div class="search-box mb-3">
                <input class="form-control" type="search" autofocus @bind="NoFilter" @bind:event="oninput" placeholder="Search..." />
            </div>

            @* PCV Valve Tank Data Table *@
            <QuickGrid Items="FilteredPCVValveTanks" Virtualize="false" Pagination="@Pagination" Class="table table-striped table-hover table-bordered">

                <TemplateColumn Title="No Pompa" Sortable="true">
                    <a style="cursor:pointer; color: royalblue;" @onclick="@(() => NavigateToPCVValveTankInfo(context))">
                        @context.PumpNumber
                    </a>
                </TemplateColumn>

                <PropertyColumn Property="@(pcvValveTank => pcvValveTank.Brand)" Title="Merk" Sortable="true" />
                <PropertyColumn Property="@(pcvValveTank => pcvValveTank.Type)" Title="Tahun" Sortable="true" />

                @if (dataPermission)
                {
                    <TemplateColumn Title="Actions" Class="td-action">
                        <button @onclick="@(() => NavigateToEditPCVValveTank(@context))" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button @onclick="@(() => NavigateToDeletePCVValveTank(context))" class="btn btn-danger">
                            <span class="oi oi-trash"></span>
                        </button>
                    </TemplateColumn>
                }

            </QuickGrid>

            <Paginator State="@Pagination" />
        }
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private bool dataPermission;

    private IQueryable<PCVValveTank>? _allPCVValveTank;
    private bool _isLoading = true;

    private readonly int[] PageSizeOptions = new[] { 1, 5, 10, 20 };
    public PaginationState Pagination { get; } = new() { ItemsPerPage = 5 };

    public bool HasPCVValveTanks => !_isLoading && (_allPCVValveTank?.Any() ?? false);
    public int PCVValveTankCount => _allPCVValveTank?.Count() ?? 0;

    private string statusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        //Authorization Admin & Maintenance Supervisor
        await Authorization();

        //Filter Applied using Table Service
        TableService.OnFilterApplied += TableService_OnFilterApplied;
        NoFilter = string.Empty;

        //Load PCV Valve Tank prvValve
        await LoadPCVValveTank();
        _isLoading = false;

        //Get Url Status
        LoadUrlStatus();
    }

    private async Task Authorization()
    {
        if (authenticationStateTask != null)
        {
            var authenticationState = await authenticationStateTask;
            var user = authenticationState.User;
            if (user.IsInRole("Admin") || user.IsInRole("Maintenance Supervisor"))
            {
                dataPermission = true;
            }
            else
            {
                dataPermission = false;
            }
        }
    }

    private async Task LoadPCVValveTank()
    {
        try
        {
            // Get All Data using CRUD Service
            var pcvValveTanksList = await CRUDService.ReadAllAsync<PCVValveTank>(orderBy: q => q.OrderBy(p => p.PCVValveTankID));
            _allPCVValveTank = pcvValveTanksList.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading PCV Valve Tank: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadUrlStatus()
    {
        statusMessage = UrlStatusService.GetAndClearUrlStatusMessage();

        var uri = new Uri(NavigationManager.Uri);
        var currentPath = uri.AbsolutePath;
        NavigationManager.NavigateTo(currentPath, replace: true);
    }

    //No Filter
    public string NoFilter
    {
        get => TableService.NoFilter ?? string.Empty; // Read from Table Service
        set
        {
            if (TableService.NoFilter != value)
            {
                TableService.NoFilter = value;
            }
        }
    }

    //Items per Page
    public int ItemsPerPage
    {
        get => Pagination.ItemsPerPage;
        set
        {
            if (Pagination.ItemsPerPage != value)
            {
                Pagination.ItemsPerPage = value;
            }
        }
    }

    //Filtered
    public IQueryable<PCVValveTank> FilteredPCVValveTanks =>
        string.IsNullOrWhiteSpace(TableService.NoFilter) // Using Table Service
            ? _allPCVValveTank ?? Enumerable.Empty<PCVValveTank>().AsQueryable()
            : (_allPCVValveTank?.Where(p =>
                p.PumpNumber.ToString().Contains(TableService.NoFilter!, StringComparison.OrdinalIgnoreCase) ||
                p.Brand.Contains(TableService.NoFilter!, StringComparison.OrdinalIgnoreCase) ||
                p.Type.Contains(TableService.NoFilter!, StringComparison.OrdinalIgnoreCase))
             ?? Enumerable.Empty<PCVValveTank>().AsQueryable());

    private async void TableService_OnFilterApplied(object? sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        TableService.OnFilterApplied -= TableService_OnFilterApplied;
        GC.SuppressFinalize(this);
    }

    private void ClearFilter()
    {
        NoFilter = string.Empty;
    }

    private void NavigateToAddPCVValveTank()
    {
        NavigationManager.NavigateTo("/PCVValveTankAdd");
    }

    private void NavigateToPCVValveTankInfo(PCVValveTank pcvvalvetank)
    {
        NavigationManager.NavigateTo($"/PCVValveTankInfo/{pcvvalvetank.PCVValveTankID}");
    }

    private void NavigateToEditPCVValveTank(PCVValveTank pcvvalvetank)
    {
        NavigationManager.NavigateTo($"/PCVValveTankEdit/{pcvvalvetank.PCVValveTankID}");
    }

    private void NavigateToDeletePCVValveTank(PCVValveTank pcvvalvetank)
    {
        NavigationManager.NavigateTo($"/PCVValveTankDelete/{pcvvalvetank.PCVValveTankID}");
    }
}