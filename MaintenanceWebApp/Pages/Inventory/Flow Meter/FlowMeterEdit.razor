@page "/FlowMeterEdit/{FlowMeterID:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using System.Globalization

@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]
@implements IDisposable

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" class="nav-link" style="cursor:pointer;" aria-label="Kembali ke Daftar Flow Meter">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi Flow Meter</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (flowMeter != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="flowMeter" OnValidSubmit="HandleUpdateFlowMeter" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />

                <div class="col-sm-12 mb-3">
                    <label for="TagNo" class="col-form-label">Tag No <span class="required">*</span></label>
                    <InputText id="TagNo" @bind-Value="_tagNoInput" @oninput="HandleTagNoInput" class="form-control" />
                    @if (!string.IsNullOrEmpty(_tagNoError))
                    {
                        <div class="text-danger small mt-1">@_tagNoError</div>
                    }
                    <ValidationMessage For="@(() => flowMeter.Tag)" />
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label for="Merk" class="col-form-label">Merk</label>
                        <InputText id="Merk" @bind-Value="flowMeter.Brand" class="form-control" />
                        <ValidationMessage For="@(() => flowMeter.Brand)" />
                    </div>
                    <div class="col-sm-6 mb-3">
                        <label for="Tipe" class="col-form-label">Tipe</label>
                        <InputText id="Tipe" @bind-Value="flowMeter.Type" class="form-control" />
                        <ValidationMessage For="@(() => flowMeter.Type)" />
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Lokasi" class="col-form-label">Lokasi <span class="required">*</span></label>
                    <InputSelect id="Lokasi" @bind-Value="flowMeter.Location" class="form-control">
                        <option value="">Pilih Lokasi...</option>
                        @foreach (var location in locationOptions)
                        {
                            <option value="@location">@location</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => flowMeter.Location)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Deskripsi" class="col-form-label">Deskripsi</label>
                    <InputTextArea id="Deskripsi" @bind-Value="flowMeter.Description" class="form-control" />
                    <ValidationMessage For="@(() => flowMeter.Description)" />
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="Tekanan Desain" class="col-form-label">Tekanan Desain</label>
                                <InputText class="form-control" id="Tekanan Desain" @bind-Value="_designPressureInput" @oninput="HandleDesignPressureInput" />
                                @if (!string.IsNullOrEmpty(_designPressureError))
                                {
                                    <div class="text-danger small mt-1">@_designPressureError</div>
                                }
                                <ValidationMessage For="@(() => flowMeter.DesignPressureValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="DesignPressureUnit" class="col-form-label">Unit</label>
                                <InputSelect id="DesignPressureUnit" @bind-Value="flowMeter.DesignPressureUnit" class="form-control" disabled="@IsDesignPressureUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in designPressureUnits)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @if (flowMeter.DesignPressureValue.HasValue && flowMeter.DesignPressureValue.Value > 0 && string.IsNullOrWhiteSpace(flowMeter.DesignPressureUnit))
                                {
                                    <div class="text-danger small mt-1">Unit harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 mb-3">
                        <label for="TempDesain" class="col-form-label">Temperatur Desain</label>
                        <InputText id="TempDesain" @bind-Value="flowMeter.TempDesign" class="form-control" />
                        <ValidationMessage For="@(() => flowMeter.TempDesign)" />
                    </div>
                </div>

                @* --- PERUBAHAN DESAIN LAJU ALIR --- *@
                <div class="row">
                    <div class="col-sm-8 mb-3">
                        <label for="DesainLajuAlir" class="col-form-label">Desain Laju Alir</label>
                        <InputText class="form-control" id="DesainLajuAlir" @bind-Value="flowMeter.FlowRateValue" @oninput="OnFlowRateInputChanged" />
                        <ValidationMessage For="@(() => flowMeter.FlowRateValue)" />
                    </div>
                    <div class="col-sm-4 mb-3">
                        <label for="SatuanDesainLajuAlir" class="col-form-label">Unit</label>
                        <InputSelect id="SatuanDesainLajuAlir" @bind-Value="flowMeter.FlowRateUnit" class="form-control" disabled="@IsFlowRateUnitDisabled">
                            <option value="">Pilih Unit...</option>
                            @foreach (var unit in flowRateUnits)
                            {
                                <option value="@unit">@unit</option>
                            }
                        </InputSelect>
                        @if (!string.IsNullOrWhiteSpace(flowMeter.FlowRateValue) && string.IsNullOrWhiteSpace(flowMeter.FlowRateUnit))
                        {
                            <div class="text-danger small mt-1">Unit harus dipilih.</div>
                        }
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Foto" class="col-form-label">Foto</label>
                    @if (!fileStatus)
                    {
                        <InputFile id="Foto" class="form-control"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="HandleFileUploadAsync" />
                        <ValidationMessage For="@(() => filePath)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Flow Meter Image">
                            <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Batal</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data Flow Meter...</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public int FlowMeterID { get; set; }

    private FlowMeter? flowMeter;
    private DotNetObjectReference<FlowMeterEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State Formulir
    private bool IsDesignPressureUnitDisabled = true;
    private bool IsFlowRateUnitDisabled = true;

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Properti untuk input teks dengan validasi real-time
    private string _tagNoInput = string.Empty;
    private string _designPressureInput = string.Empty;
    private string? _tagNoError;
    private string? _designPressureError;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "Flow Meter";
    private readonly List<string> designPressureUnits = new() { "bar" };
    private readonly List<string> flowRateUnits = new() { "Liter/menit", "M3/Jam", "L/Jam" };
    private readonly List<string> locationOptions = new() { "Tersimpan di Gudang", "Terpasang di jalur pipa delivery di bay 9 CFS" };

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadFlowMeterDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    private async Task LoadFlowMeterDataAsync()
    {
        flowMeter = await CRUDService.ReadSingleAsync<FlowMeter, int>(FlowMeterID);
        if (flowMeter == null)
        {
            await NotificationService.AlertMessage("Data Flow Meter tidak ditemukan.");
            NavigationManager.NavigateTo("./FlowMeterList", forceLoad: true);
        }
        else
        {
            _tagNoInput = flowMeter.Tag.ToString();
            _designPressureInput = flowMeter.DesignPressureValue?.ToString(CultureInfo.InvariantCulture) ?? string.Empty;

            InitializeFileStatus(flowMeter.Image);
            InitializeFlowRateUnitStatus(flowMeter.FlowRateValue);
            InitializeDesignPressureUnitStatus(flowMeter.DesignPressureValue);
        }
    }

    private void OnFlowRateInputChanged(ChangeEventArgs args)
    {
        var inputValue = args.Value?.ToString();
        IsFlowRateUnitDisabled = string.IsNullOrWhiteSpace(inputValue);

        if (IsFlowRateUnitDisabled && flowMeter != null)
        {
            flowMeter.FlowRateUnit = null;
        }
    }

    private async Task HandleUpdateFlowMeter()
    {
        if (flowMeter == null) return;

        if (!string.IsNullOrWhiteSpace(flowMeter.FlowRateValue) && string.IsNullOrWhiteSpace(flowMeter.FlowRateUnit))
        {
            await NotificationService.AlertMessage("Jika Laju Alir diisi, Unit harus dipilih.");
            return;
        }

        if (flowMeter.DesignPressureValue.HasValue && flowMeter.DesignPressureValue.Value > 0 && string.IsNullOrWhiteSpace(flowMeter.DesignPressureUnit))
        {
            await NotificationService.AlertMessage("Jika Tekanan Desain diisi, Unit harus dipilih.");
            return;
        }

        flowMeter.Image = fileStatus ? filePath : null;

        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        await CRUDService.UpdateAsync(flowMeter);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
            return;
        }

        NavigationManager.NavigateTo("./FlowMeterList?status=EditSuccess");
    }

    #region Kode Lainnya
    private async Task LoadConfigurationAsync()
    {
        try { _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; }
        catch (Exception ex) { await NotificationService.AlertMessage($"Gagal memuat konfigurasi: {ex.Message}"); }
    }
    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }
    private void InitializeFlowRateUnitStatus(string? flowRateValue)
    {
        IsFlowRateUnitDisabled = string.IsNullOrWhiteSpace(flowRateValue);
    }
    private void InitializeDesignPressureUnitStatus(double? designPressureValue)
    {
        IsDesignPressureUnitDisabled = !designPressureValue.HasValue || designPressureValue.Value <= 0;
    }
    private void HandleTagNoInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        _tagNoInput = inputValue;
        _tagNoError = null;
        if (flowMeter is null) return;
        if (string.IsNullOrWhiteSpace(inputValue)) { flowMeter.Tag = 0; return; }
        if (int.TryParse(inputValue, out int parsedValue)) { flowMeter.Tag = parsedValue; }
        else { _tagNoError = "Input untuk Tag No harus berupa angka."; _tagNoInput = string.Empty; flowMeter.Tag = 0; }
    }
    private void HandleDesignPressureInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        var sanitizedInput = inputValue.Replace(',', '.');
        _designPressureInput = sanitizedInput;
        _designPressureError = null;
        if (flowMeter is null) return;
        if (string.IsNullOrWhiteSpace(sanitizedInput)) { flowMeter.DesignPressureValue = null; IsDesignPressureUnitDisabled = true; flowMeter.DesignPressureUnit = null; return; }
        if (double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue)) { flowMeter.DesignPressureValue = parsedValue; }
        else { _designPressureError = "Input untuk Tekanan Desain harus berupa angka (desimal dipersilakan)."; _designPressureInput = string.Empty; flowMeter.DesignPressureValue = null; }
        IsDesignPressureUnitDisabled = !flowMeter.DesignPressureValue.HasValue || flowMeter.DesignPressureValue.Value <= 0;
        if (IsDesignPressureUnitDisabled) { flowMeter.DesignPressureUnit = null; }
    }
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage)) { await NotificationService.AlertMessage($"Gagal mengunggah gambar: {UploadService.UploadErrorMessage}"); filePath = null; return; }
            filePath = UploadService.FilePath;
            fileStatus = true;
        }
        catch (Exception ex) { await NotificationService.AlertMessage($"Terjadi kesalahan saat mengunggah file: {ex.Message}"); }
    }
    private async Task HandleFileChangeAsync()
    {
        if (fileStatus && filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }
        fileStatus = !fileStatus;
    }
    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
        }
    }
    private string CreateFilePath(string relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath)) { return "/noimg.png"; }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }
    private async Task HandleInvalidSubmitAsync()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
    }
    private async Task CancelAsync()
    {
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }
        NavigationManager.NavigateTo("./FlowMeterList");
    }
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }
    #endregion
}