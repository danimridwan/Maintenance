@page "/FlowMeterDelete/{Id:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]

<div class="card p-4 shadow-sm border-0">
    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Memuat...</span>
                </div>
                <p class="mt-2 text-muted">Memuat data flow meter...</p>
            </div>
        }
        else if (flowMeter == null)
        {
            <div class="text-center py-5">
                <p class="text-danger lead">Data flow meter tidak ditemukan atau terjadi kesalahan saat memuat.</p>
                <button type="button" class="btn btn-secondary mt-3" @onclick="GoBack">Kembali</button>
            </div>
        }
        else
        {
            <h3 class="card-title text-danger mb-3">Hapus Flow Meter</h3>
            <hr />
            <p class="text-muted">Anda yakin ingin menghapus Flow Meter dengan Tag: <b>@flowMeter.Tag</b> ?</p>

            <div class="mt-4">
                <button type="button" class="btn btn-danger me-2" @onclick="HandleDeleteAsync">Hapus</button>
                <button type="button" class="btn btn-secondary" @onclick="GoBack">Batal</button>
            </div>
        }
    </div>
</div>

@code {
    // Parameter Rute
    [Parameter]
    public int Id { get; set; }

    // State
    private FlowMeter? flowMeter;
    private bool isLoading = true;

    // Konstanta
    private const string SUBFOLDER_NAME = "Inventories";
    private const string FOLDER_NAME = "Flow Meter";

    // Metode Siklus Hidup
    protected override async Task OnInitializedAsync()
    {
        await LoadFlowMeterAsync();
        isLoading = false;
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadFlowMeterAsync()
    {
        try
        {
            // Memuat data Flow Meter berdasarkan ID
            flowMeter = await CRUDService.ReadSingleAsync<FlowMeter, int>(Id);
            if (flowMeter == null)
            {
                await NotificationService.AlertMessage("Data flow meter tidak ditemukan. Silakan periksa kembali tautan yang Anda gunakan.");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat data Flow Meter. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Kesalahan saat memuat data flow meter dengan ID {Id}. Detail: {ex.Message}");
            flowMeter = null;
        }
    }

    private async Task HandleDeleteAsync()
    {
        if (flowMeter == null)
        {
            await NotificationService.AlertMessage("Data flow meter tidak valid. Operasi penghapusan dibatalkan.");
            return;
        }

        try
        {
            // Hapus file terkait sebelum menghapus data dari database
            await DeleteAssociatedFileAsync();

            // Lakukan penghapusan record dari database
            await CRUDService.DeleteAsync(flowMeter);
            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menghapus data flow meter dari database. Silakan hubungi administrator.");
                NotificationService.LogMessage($"Gagal menghapus data flow meter dari database. Detail: {CRUDService.CRUDErrorMessage}");
                return;
            }

            await DeleteMaintenanceHistoryPhotosAsync();

            await CRUDService.DeleteByConditionAsync<InventoryMaintenanceHistory>(history => history.InventoryId == flowMeter.FlowMeterID);

            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                NotificationService.AlertMessage($"Gagal menghapus data Inventory Maintenance History. Detail: {CRUDService.CRUDErrorMessage}");
            }

            // Navigasi kembali ke halaman daftar dengan status sukses
            NavigationManager.NavigateTo("./FlowMeterList?status=DeleteSuccess");
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan sistem saat menghapus flow meter. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Kesalahan saat menghapus flow meter dengan ID {Id}. Detail: {ex.Message}");
        }
    }

    private async Task DeleteMaintenanceHistoryPhotosAsync()
    {
        var historyQuery = await CRUDService.ReadAllAsync<InventoryMaintenanceHistory>(filter: h => h.InventoryId == flowMeter.FlowMeterID);

        var historyList = historyQuery.ToList();

        if (historyList.Any())
        {
            foreach (var history in historyList)
            {
                if (!string.IsNullOrWhiteSpace(history.Photo))
                {
                    await UploadService.FileChange(history.Photo, SUBFOLDER_NAME);
                    if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
                    {
                        NotificationService.AlertMessage($"Gagal menghapus foto riwayat pemeliharaan '{history.Photo}'. Detail: {UploadService.UploadErrorMessage}");
                    }
                }
            }
        }
        else
        {
            NotificationService.AlertMessage("Tidak ada riwayat pemeliharaan atau terjadi kesalahan saat memuat data.");
            return;
        }
    }

    private async Task DeleteAssociatedFileAsync()
    {
        if (!string.IsNullOrWhiteSpace(flowMeter?.Image))
        {
            await UploadService.FileChange(flowMeter.Image, SUBFOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                // Log kesalahan tetapi lanjutkan proses. Kegagalan menghapus file tidak boleh menghentikan penghapusan data.
                NotificationService.LogMessage($"Gagal menghapus file '{flowMeter.Image}'. Detail: {UploadService.UploadErrorMessage}");
            }
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("./FlowMeterList");
    }
}