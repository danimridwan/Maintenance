@page "/PumpEdit/{PumpId:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" class="nav-link" aria-label="Kembali ke Daftar Pompa">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi Pompa</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (pump != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="pump" OnValidSubmit="HandleUpdatePump" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label for="Merk" class="col-form-label">Merk</label>
                        <InputText id="Merk" @bind-Value="pump.Brand" class="form-control" />
                        <ValidationMessage For="@(() => pump.Brand)" />
                    </div>
                    <div class="col-sm-6 mb-3">
                        <label for="Tipe" class="col-form-label">Tipe</label>
                        <InputText id="Tipe" @bind-Value="pump.Type" class="form-control" />
                        <ValidationMessage For="@(() => pump.Type)" />
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Kapasitas" class="col-form-label">Kapasitas</label>
                            <InputNumber class="form-control" id="Kapasitas" @bind-Value="pump.CapacityValue" @oninput="OnCapacityInputChanged" />
                            <ValidationMessage For="@(() => pump.CapacityValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanKapasitas" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanKapasitas" @bind-Value="pump.CapacityUnit" class="form-control" disabled="@IsCapacityUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in capacityUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @if (pump.CapacityValue.HasValue && pump.CapacityValue.Value > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
                            {
                                <div class="text-danger">Satuan Kapasitas harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Daya" class="col-form-label">Daya</label>
                            <InputNumber class="form-control" id="Daya" @bind-Value="pump.PowerValue" @oninput="OnPowerInputChanged" />
                            <ValidationMessage For="@(() => pump.PowerValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanDaya" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanDaya" @bind-Value="pump.PowerUnit" class="form-control" disabled="@IsPowerUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in powerUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @if (pump.PowerValue.HasValue && pump.PowerValue.Value > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
                            {
                                <div class="text-danger">Satuan Daya harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Foto" class="col-form-label">Foto</label>
                    @if (!fileStatus)
                    {
                        <InputFile id="Foto" class="form-control"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="HandleFileUploadAsync" />
                        <ValidationMessage For="@(() => filePath)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Pump Image">
                            <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data Pompa...</p>
        }
    </div>
</div>

@code {
    // Parameter Halaman
    [Parameter]
    public int PumpId { get; set; }

    // Properti Halaman
    private Pump? pump;
    private EditContext? editContext;
    private DotNetObjectReference<PumpEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State Formulir
    private bool IsPowerUnitDisabled = true;
    private bool IsCapacityUnitDisabled = true;

    private List<string> capacityUnits = new() { "M3/h", "m3/day", "GPM" };
    private List<string> powerUnits = new() { "kW", "HP", "MW" };

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "Pump";

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadPumpDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    // Metode Bantuan (Helper Methods)
    private async Task LoadConfigurationAsync()
    {
        try
        {
            _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi. Silakan hubungi administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi `WebStorageRoot`. Detail: {ex.Message}");
        }
    }

    private async Task LoadPumpDataAsync()
    {
        pump = await CRUDService.ReadSingleAsync<Pump, int>(PumpId);
        if (pump == null)
        {
            await NotificationService.AlertMessage("Data Pompa tidak ditemukan.");
            NavigationManager.NavigateTo("./PumpList", forceLoad: true);
        }
        else
        {
            // Inisialisasi EditContext dan status file
            editContext = new EditContext(pump);
            editContext.OnValidationStateChanged += (sender, e) => StateHasChanged();
            editContext.OnFieldChanged += (sender, e) => StateHasChanged();

            InitializeFileStatus(pump.Image);

            // Inisialisasi status unit
            IsPowerUnitDisabled = !pump.PowerValue.HasValue || pump.PowerValue.Value <= 0;
            IsCapacityUnitDisabled = !pump.CapacityValue.HasValue || pump.CapacityValue.Value <= 0;
        }
    }

    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }

    // Metode Unggah File
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
                NotificationService.LogMessage($"Pengunggahan gambar gagal. Detail: {UploadService.UploadErrorMessage}");
                filePath = null;
                return;
            }

            filePath = UploadService.FilePath;
            fileStatus = true;
            editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => filePath));
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file. Detail: {ex.Message}");
        }
    }

    private async Task HandleFileChangeAsync()
    {
        if (fileStatus)
        {
            // Hapus file lama jika filePath berubah
            if (filePath != originalFilePath)
            {
                await DeleteOldFileAsync(filePath);
            }
            fileStatus = false;
        }
        else
        {
            fileStatus = true;
        }
    }

    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menghapus file lama. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menghapus file lama. Detail: {UploadService.UploadErrorMessage}");
            }
        }
    }

    private string CreateFilePath(string relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }

    // Metode Validasi Input
    private void OnPowerInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentPowerInputValue))
        {
            pump!.PowerValue = currentPowerInputValue;
        }
        else
        {
            pump!.PowerValue = null;
        }

        IsPowerUnitDisabled = !pump.PowerValue.HasValue || pump.PowerValue.Value <= 0;
        if (IsPowerUnitDisabled)
        {
            pump.PowerUnit = null;
        }

        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => pump!.PowerValue));
        editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => pump!.PowerUnit));
    }

    private void OnCapacityInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentCapacityInputValue))
        {
            pump!.CapacityValue = currentCapacityInputValue;
        }
        else
        {
            pump!.CapacityValue = null;
        }

        IsCapacityUnitDisabled = !pump.CapacityValue.HasValue || pump.CapacityValue.Value <= 0;
        if (IsCapacityUnitDisabled)
        {
            pump.CapacityUnit = null;
        }

        NavigationManager.NavigateTo("/PumpList?status=EditSuccess");
    }

    // Metode Penanganan Submit
    private async Task HandleUpdatePump()
    {
        if (pump == null) return;

        // Validasi kustom untuk Satuan Daya
        if (pump.PowerValue.HasValue && pump.PowerValue.Value > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
        {
            await NotificationService.AlertMessage("Jika Daya diisi, Satuan Daya harus dipilih.");
            return;
        }

        // Validasi kustom untuk Satuan Kapasitas
        if (pump.CapacityValue.HasValue && pump.CapacityValue.Value > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
        {
            await NotificationService.AlertMessage("Jika Kapasitas diisi, Satuan Kapasitas harus dipilih.");
            return;
        }

        // Sinkronisasi path file sebelum update
        pump.Image = fileStatus ? filePath : null;

        // Jika ada perubahan file, hapus file lama
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        try
        {
            await CRUDService.UpdateAsync(pump);
            if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
            {
                await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
                NotificationService.LogMessage($"Gagal menyimpan data. Detail: {CRUDService.CRUDErrorMessage}");
                return;
            }

            NavigationManager.NavigateTo("./PumpList?status=EditSuccess");
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan tak terduga saat memperbarui data. Silakan coba lagi.");
            NotificationService.LogMessage($"Kesalahan saat memperbarui data Pompa. Detail: {ex.Message}");
        }
    }

    private async Task HandleInvalidSubmitAsync()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
        NotificationService.LogMessage($"Pengiriman formulir PumpEdit tidak valid.");
    }

    // Metode Navigasi
    private async Task CancelAsync()
    {
        // Bersihkan file temporer jika ada
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }

        NavigationManager.NavigateTo("./PumpList");
    }

    // Metode untuk JavaScript Interop
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

        NavigationManager.NavigateTo("/PumpList");
    }
}