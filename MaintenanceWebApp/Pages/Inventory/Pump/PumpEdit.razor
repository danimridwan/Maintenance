@page "/PumpEdit/{PumpId:int}"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@* Services *@
@inject UploadFilesService UploadService
@inject CRUDService CRUDService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance, Maintenance Supervisor")]
@implements IDisposable

<div class="card">
    <div class="card-header bg-light border-primary">
        @* Header Halaman *@
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a @onclick="CancelAsync" class="nav-link" style="cursor:pointer;" aria-label="Kembali ke Daftar Pompa">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Informasi Pompa</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        @if (pump != null)
        {
            @* Formulir Edit Data *@
            <EditForm Model="pump" OnValidSubmit="HandleUpdatePump" OnInvalidSubmit="HandleInvalidSubmitAsync">
                <DataAnnotationsValidator />

                <div class="form-group row">
                    <div class="col-sm-12 mb-3">
                        <label for="NamaPompa" class="col-form-label">Nama Pompa <span class="required">*</span></label>
                        <InputSelect id="NamaPompa" @bind-Value="pump.Name" class="form-control">
                            <option value="">Pilih Nama Pompa...</option>
                            @foreach (var name in pumpName)
                            {
                                <option value="@name">@name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => pump.Name)" />
                    </div>

                    <div class="col-sm-12 mb-3">
                        <label for="TagPompa" class="col-form-label">Tag No Pompa <span class="required">*</span></label>
                        <InputText id="TagPompa" @bind-Value="pump.Tag" class="form-control" />
                        <ValidationMessage For="@(() => pump.Tag)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <label for="Merk" class="col-form-label">Merk</label>
                        <InputSelect id="Merk" @bind-Value="pump.Brand" class="form-control">
                            <option value="">Pilih Merk...</option>
                            @foreach (var brand in brandOptions)
                            {
                                <option value="@brand">@brand</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => pump.Brand)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <label for="Material" class="col-form-label">Material</label>
                        <InputSelect id="Material" @bind-Value="pump.Material" class="form-control">
                            <option value="">Pilih Material...</option>
                            @foreach (var material in materialOptions)
                            {
                                <option value="@material">@material</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => pump.Material)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <label for="Jenis" class="col-form-label">Jenis</label>
                        <InputSelect id="Jenis" @bind-Value="pump.Category" class="form-control">
                            <option value="">Pilih Jenis...</option>
                            @foreach (var category in categoryOptions)
                            {
                                <option value="@category">@category</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => pump.Category)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <label for="Lokasi" class="col-form-label">Lokasi <span class="required">*</span></label>
                        <InputSelect id="Lokasi" @bind-Value="pump.Location" class="form-control">
                            <option value="">Pilih Lokasi...</option>
                            @foreach (var location in locationOptions)
                            {
                                <option value="@location">@location</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => pump.Location)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <label for="Tahun" class="col-form-label">Tahun</label>
                        <InputNumber id="Tahun" @bind-Value="pump.Year" class="form-control" />
                        <ValidationMessage For="@(() => pump.Year)" />
                    </div>

                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="Kapasitas" class="col-form-label">Kapasitas</label>
                                <InputText class="form-control" id="Kapasitas" @bind-Value="_capacityInput" @oninput="HandleCapacityInput" />
                                @if (!string.IsNullOrEmpty(_capacityError))
                                {
                                    <div class="text-danger small mt-1">@_capacityError</div>
                                }
                                <ValidationMessage For="@(() => pump.CapacityValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="SatuanKapasitas" class="col-form-label">Unit</label>
                                <InputSelect id="SatuanKapasitas" @bind-Value="pump.CapacityUnit" class="form-control" disabled="@IsCapacityUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in capacityUnits)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @if (pump.CapacityValue.HasValue && pump.CapacityValue.Value > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
                                {
                                    <div class="text-danger">Unit harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6 mb-3">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="Tenaga" class="col-form-label">Tenaga</label>
                                <InputText class="form-control" id="Tenaga" @bind-Value="_powerInput" @oninput="HandlePowerInput" />
                                @if (!string.IsNullOrEmpty(_powerError))
                                {
                                    <div class="text-danger small mt-1">@_powerError</div>
                                }
                                <ValidationMessage For="@(() => pump.PowerValue)" />
                            </div>
                            <div class="col-sm-4">
                                <label for="SatuanTenaga" class="col-form-label">Unit</label>
                                <InputSelect id="SatuanTenaga" @bind-Value="pump.PowerUnit" class="form-control" disabled="@IsPowerUnitDisabled">
                                    <option value="">...</option>
                                    @foreach (var unit in powerUnits)
                                    {
                                        <option value="@unit">@unit</option>
                                    }
                                </InputSelect>
                                @if (pump.PowerValue.HasValue && pump.PowerValue.Value > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
                                {
                                    <div class="text-danger">Unit harus dipilih.</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="Foto" class="col-form-label">Foto</label>
                    @if (!fileStatus)
                    {
                        <InputFile id="Foto" class="form-control"
                                   accept=".jpg,.jpeg,.png"
                                   OnChange="HandleFileUploadAsync" />
                        <ValidationMessage For="@(() => filePath)" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(filePath!)" alt="Pump Image">
                            <button @onclick="HandleFileChangeAsync" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                        </div>
                    }
                </div>

                @* Tombol Aksi *@
                <div class="float-end mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Batal</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Memuat Data Pompa...</p>
        }
    </div>
</div>

@code {
    // Parameter Halaman
    [Parameter]
    public int PumpId { get; set; }

    // Properti Halaman
    private Pump? pump;
    private DotNetObjectReference<PumpEdit>? dotNetHelper;
    private string _webStorageRoot = string.Empty;

    // State Formulir
    private bool IsPowerUnitDisabled = true;
    private bool IsCapacityUnitDisabled = true;

    // Properti untuk validasi real-time
    private string _capacityInput = string.Empty;
    private string _powerInput = string.Empty;
    private string? _capacityError;
    private string? _powerError;

    // State File
    private string? originalFilePath;
    private string? filePath;
    private bool fileStatus;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string FILE_CATEGORY = "img";
    private const string FOLDER_NAME = "Pump";

    // Form Properties (Dropdown Options)
    private List<string> pumpName = new() { "Fire Pump", "Transfer Pump", "Submersible Pump" };
    private List<string> capacityUnits = new() { "m3/hour", "GPM" };
    private List<string> powerUnits = new() { "HP", "kW" };
    private List<string> materialOptions = new() { "Alumunium", "Braze - Kuningan", "Carbon Steel", "Stainless Steel" };
    private List<string> categoryOptions = new() { "Booster Pump", "Centrifugal", "Centrifugal self priming", "Diaphragma 1 Inch", "Diaphragma 2 Inch", "Diaphragma 3 Inch", "Gear", "LUBE", "Multi stage", "Plunger Pump", "Screw", "Submersible", "Submersible/Satelit", "Vertical Pump" };
    private List<string> locationOptions = new() { "Blader Tank", "Box Culvert", "Dump Filing", "Fire Pump Room", "Guesthouse", "Hose Pit 1", "New Pumpit", "Pump Pit 1", "Pump Pit 2", "Pump Pit 2/5", "Pump Pit 4", "Pump Pit 6", "Pump Pit 7", "Sea Water Intake", "Separator", "Tank Pit 1", "Tank Pit 2", "Tank Pit 5", "Tank Pit 6", "Tangki T307", "Tangki T308", "Tangki T502", "Tangki T608", "Utility Building" };
    private List<string> brandOptions = new() { "ARO", "BSK", "CROWN", "DAB PUMP", "DABITALI", "DENSIN", "EBARRA", "GPA PUMP", "GRUNDFOS", "INGERSOLL RAND", "KSA", "MTX", "NIKUNI", "PATTERSON", "ROTOR", "SANYO", "SEEPEX", "SP Pump", "STERLING SSP", "SUNNY KING", "TORISHIMA", "VIKING PUMP", "WORTHINGTON", "XA PUMP", "YONJOU", "YORK" };

    // Metode Lifecycle
    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurationAsync();
        await LoadPumpDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    private async Task LoadPumpDataAsync()
    {
        pump = await CRUDService.ReadSingleAsync<Pump, int>(PumpId);
        if (pump == null)
        {
            await NotificationService.AlertMessage("Data Pompa tidak ditemukan.");
            NavigationManager.NavigateTo("./PumpList", forceLoad: true);
        }
        else
        {
            // Inisialisasi input teks dengan data yang sudah ada
            _capacityInput = pump.CapacityValue?.ToString(CultureInfo.InvariantCulture) ?? string.Empty;
            _powerInput = pump.PowerValue?.ToString(CultureInfo.InvariantCulture) ?? string.Empty;

            // Inisialisasi status form lainnya
            InitializeFileStatus(pump.Image);
            IsPowerUnitDisabled = !pump.PowerValue.HasValue || pump.PowerValue.Value <= 0;
            IsCapacityUnitDisabled = !pump.CapacityValue.HasValue || pump.CapacityValue.Value <= 0;
        }
    }

    // Metode Handler untuk validasi real-time
    private void HandleCapacityInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        var sanitizedInput = inputValue.Replace(',', '.');
        _capacityInput = sanitizedInput;
        _capacityError = null;

        if (string.IsNullOrWhiteSpace(sanitizedInput))
        {
            pump!.CapacityValue = null;
            IsCapacityUnitDisabled = true;
            pump.CapacityUnit = null;
            return;
        }

        if (double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue))
        {
            pump!.CapacityValue = parsedValue;
        }
        else
        {
            _capacityError = "Input Kapasitas harus berupa angka (desimal dipersilakan).";
            _capacityInput = string.Empty;
            pump!.CapacityValue = null;
        }

        IsCapacityUnitDisabled = !pump.CapacityValue.HasValue || pump.CapacityValue.Value <= 0;
        if (IsCapacityUnitDisabled)
        {
            pump.CapacityUnit = null;
        }
    }

    private void HandlePowerInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        var sanitizedInput = inputValue.Replace(',', '.');
        _powerInput = sanitizedInput;
        _powerError = null;

        if (string.IsNullOrWhiteSpace(sanitizedInput))
        {
            pump!.PowerValue = null;
            IsPowerUnitDisabled = true;
            pump.PowerUnit = null;
            return;
        }

        if (double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue))
        {
            pump!.PowerValue = parsedValue;
        }
        else
        {
            _powerError = "Input Tenaga harus berupa angka (desimal dipersilakan).";
            _powerInput = string.Empty;
            pump!.PowerValue = null;
        }

        IsPowerUnitDisabled = !pump.PowerValue.HasValue || pump.PowerValue.Value <= 0;
        if (IsPowerUnitDisabled)
        {
            pump.PowerUnit = null;
        }
    }

    // Metode Penanganan Submit
    private async Task HandleUpdatePump()
    {
        if (pump == null) return;

        if (pump.PowerValue.HasValue && pump.PowerValue.Value > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
        {
            await NotificationService.AlertMessage("Jika Tenaga diisi, Satuan Tenaga harus dipilih.");
            return;
        }

        if (pump.CapacityValue.HasValue && pump.CapacityValue.Value > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
        {
            await NotificationService.AlertMessage("Jika Kapasitas diisi, Satuan Kapasitas harus dipilih.");
            return;
        }

        pump.Image = fileStatus ? filePath : null;

        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(originalFilePath);
        }

        await CRUDService.UpdateAsync(pump);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan data. Silakan coba lagi.");
            return;
        }

        NavigationManager.NavigateTo("./PumpList?status=EditSuccess");
    }

    private async Task HandleInvalidSubmitAsync()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali formulir. Beberapa isian tidak valid.");
    }

    #region Kode Lainnya (Tidak Berubah)
    private async Task LoadConfigurationAsync()
    {
        try { _webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/"; }
        catch (Exception ex) { await NotificationService.AlertMessage($"Gagal memuat konfigurasi. Detail: {ex.Message}"); }
    }
    private void InitializeFileStatus(string? imagePath)
    {
        fileStatus = !string.IsNullOrWhiteSpace(imagePath);
        originalFilePath = imagePath;
        filePath = imagePath;
    }
    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadService.FilesUpload(e.File, FOLDER_NAME, SUB_FOLDER_NAME, FILE_CATEGORY);
            if (!string.IsNullOrEmpty(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah gambar. Detail: {UploadService.UploadErrorMessage}");
                filePath = null;
                return;
            }
            filePath = UploadService.FilePath;
            fileStatus = true;
        }
        catch (Exception ex) { await NotificationService.AlertMessage($"Terjadi kesalahan saat mengunggah file. Detail: {ex.Message}"); }
    }
    private async Task HandleFileChangeAsync()
    {
        if (fileStatus && filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }
        fileStatus = !fileStatus;
    }
    private async Task DeleteOldFileAsync(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
        {
            await UploadService.FileChange(path, SUB_FOLDER_NAME);
        }
    }
    private string CreateFilePath(string relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath)) { return "/noimg.png"; }
        return Path.Combine(_webStorageRoot, relativePath).Replace("\\", "/");
    }
    private async Task CancelAsync()
    {
        if (filePath != originalFilePath)
        {
            await DeleteOldFileAsync(filePath);
        }
        NavigationManager.NavigateTo("./PumpList");
    }
    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }
    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }
    #endregion
}