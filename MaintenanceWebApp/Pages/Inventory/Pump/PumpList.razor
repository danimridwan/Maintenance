@page "/PumpList"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities
@inject DataContext DataContext
@inject NavigationManager NavigationManager
@inject CRUDService CRUDService
@inject UrlStatusService UrlStatusService
@implements IDisposable

@attribute [Authorize(Roles = "Admin")]

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="container px-0">
        <div style="padding: 10px;" class="alert alert-success alert-dismissible fade show" role="alert">
            @statusMessage
            <button style="background-color: transparent; border: transparent; float: right;" type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    </div>
}

<div class="card">
    <div class="row px-3">
        <div class="col-sm-5 form-group">
            <h5 class="display-6">Pompa</h5>
            @if (HasPumps)
            {
                @if (PumpCount > 5)
                {
                    <div class="page-size-chooser my-2">
                        Items per page:
                        <select @bind="@Pagination.ItemsPerPage">
                            <option>5</option>
                            @if (PumpCount > 10)
                            {
                                <option>10</option>
                            }
                            @if (PumpCount > 20)
                            {
                                <option>20</option>
                            }
                        </select>
                    </div>
                }
            }
        </div>
        <div class="col-sm-4"></div>
        <div class="col-sm-3 d-flex align-items-center justify-content-end">
            <button class="btn btn-primary" @onclick="NavigateToAddPump">
                Tambah
            </button>
        </div>
    </div>

    <div class="px-3">
        @if (_isLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Memuat Data Pompa...</p>
            </div>
        }
        else if (!HasPumps)
        {
            <hr />
            <div class="text-center py-3">
                <p>Tidak ada Pompa.</p>
                @if (!string.IsNullOrEmpty(pumpNoFilter))
                {
                    <button class="btn btn-link" @onclick="ClearFilter">Clear filter</button>
                }
            </div>
        }
        else
        {
            <QuickGrid Items="FilteredPumps" Virtualize="false" Pagination="@Pagination" Class="table table-striped table-hover table-bordered">

                <PropertyColumn Property="@(pump => pump.Tag)" Title="Tag" Sortable="true">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="_pumpNoFilter" @bind:event="oninput" placeholder="Tag..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>

                <PropertyColumn Property="@(pump => pump.Name)" Title="Category" Sortable="true" />
                <PropertyColumn Property="@(pump => pump.Brand)" Title="Merk" Sortable="true" />
                <PropertyColumn Property="@(pump => pump.Year)" Title="Tahun" Sortable="true" />
                <PropertyColumn Property="@(pump => pump.Location)" Title="Lokasi" Sortable="true" />
                <TemplateColumn Title="Actions" Class="td-action">
                    <button @onclick="@(() => NavigateToEditPump(context))" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button @onclick="@(() => NavigateToDeletePump(context))" class="btn btn-danger">
                        <span class="oi oi-trash"></span>
                    </button>
                </TemplateColumn>
            </QuickGrid>

            <Paginator State="@Pagination" />
        }
    </div>
</div>

@code {
    #region Fields and Properties

    private IQueryable<Pump>? _allPumps;
    private string _pumpNoFilter = string.Empty;
    private Timer? _filterDebounceTimer;
    private const int DebounceInterval = 300; // milliseconds
    private bool _isLoading = true;

    private readonly int[] PageSizeOptions = new[] { 1, 5, 10, 20 };

    public PaginationState Pagination { get; } = new() { ItemsPerPage = 5 };

    public bool HasPumps => !_isLoading && (_allPumps?.Any() ?? false);
    public int PumpCount => _allPumps?.Count() ?? 0;

    private string statusMessage = string.Empty;

    public string pumpNoFilter
    {
        get => _pumpNoFilter;
        set
        {
            if (_pumpNoFilter != value)
            {
                _pumpNoFilter = value;
                _filterDebounceTimer?.Dispose();
                _filterDebounceTimer = new Timer(OnFilterDebounced, null, DebounceInterval, Timeout.Infinite);
            }
        }
    }

    public int ItemsPerPage
    {
        get => Pagination.ItemsPerPage;
        set
        {
            if (Pagination.ItemsPerPage != value)
            {
                Pagination.ItemsPerPage = value;
                StateHasChanged();
            }
        }
    }

    public IQueryable<Pump> FilteredPumps =>
        string.IsNullOrWhiteSpace(_pumpNoFilter)
            ? _allPumps ?? Enumerable.Empty<Pump>().AsQueryable()
            : (_allPumps?.Where(p => p.Tag.Contains(_pumpNoFilter, StringComparison.OrdinalIgnoreCase))
              ?? Enumerable.Empty<Pump>().AsQueryable());

    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        _isLoading = false;

        await LoadPumps();
        LoadUrlStatus();
    }

    private async Task LoadUrlStatus()
    {
        statusMessage = UrlStatusService.GetAndClearUrlStatusMessage();

        var uri = new Uri(NavigationManager.Uri);
        var currentPath = uri.AbsolutePath;
        NavigationManager.NavigateTo(currentPath, replace: true);
    }

    public void Dispose()
    {
        _filterDebounceTimer?.Dispose();
        GC.SuppressFinalize(this);
    }

    #endregion

    #region Data Methods

    private async Task LoadPumps()
    {
        try
        {
            // Get List
            var pumpsList = await CRUDService.ReadAllAsync<Pump>(orderBy: q => q.OrderBy(p => p.PumpID));

            // Then convert to IQueryable
            _allPumps = pumpsList.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pumps: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnFilterDebounced(object? state)
    {
        InvokeAsync(StateHasChanged);
    }

    private void ClearFilter()
    {
        pumpNoFilter = string.Empty;
    }

    #endregion

    #region Navigation Methods

    private void NavigateToAddPump()
    {
        NavigationManager.NavigateTo("/PumpAdd");
    }

    private void NavigateToPumpInfo(Pump pump)
    {
        NavigationManager.NavigateTo($"/PumpInfo/{pump.PumpID}");
    }

    private void NavigateToEditPump(Pump pump)
    {
        NavigationManager.NavigateTo($"/PumpEdit/{pump.PumpID}");
    }

    private void NavigateToDeletePump(Pump pump)
    {
        NavigationManager.NavigateTo($"/PumpDelete/{pump.PumpID}");
    }

    #endregion
}