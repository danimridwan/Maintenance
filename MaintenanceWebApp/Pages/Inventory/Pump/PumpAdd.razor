@page "/PumpAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.IO
@using System.Globalization

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor, Maintenance")]
@implements IDisposable

<div class="card">
    @* Header Formulir *@
    <div class="card-header bg-light border-primary">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a style="cursor: pointer;" @onclick="CancelAsync" class="nav-link" aria-label="Kembali ke Daftar Pompa">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Tambah Pompa</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <EditForm Model="pump" OnValidSubmit="HandleCreatePump" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group row">
                <div class="col-sm-12 mb-3">
                    <label for="NamaPompa" class="col-form-label">Nama Pompa <span class="required">*</span></label>
                    <InputSelect id="NamaPompa" @bind-Value="pump.Name" class="form-control">
                        <option value="">Pilih Nama Pompa...</option>
                        @foreach (var name in pumpName)
                        {
                            <option value="@name">@name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Name)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="TagPompa" class="col-form-label">Tag No Pompa <span class="required">*</span></label>
                    <InputText id="TagPompa" @bind-Value="pump.Tag" class="form-control" />
                    <ValidationMessage For="@(() => pump.Tag)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Merk" class="col-form-label">Merk</label>
                    <InputSelect id="Merk" @bind-Value="pump.Brand" class="form-control">
                        <option value="">Pilih Merk...</option>
                        @foreach (var brand in brandOptions)
                        {
                            <option value="@brand">@brand</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Brand)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Tipe" class="col-form-label">Tipe</label>
                    <InputSelect id="Tipe" @bind-Value="pump.Type" class="form-control">
                        <option value="">Pilih Tipe...</option>
                        @foreach (var type in typeOptions)
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Type)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Material" class="col-form-label">Material</label>
                    <InputSelect id="Material" @bind-Value="pump.Material" class="form-control">
                        <option value="">Pilih Material...</option>
                        @foreach (var material in materialOptions)
                        {
                            <option value="@material">@material</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Material)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Jenis" class="col-form-label">Jenis</label>
                    <InputSelect id="Jenis" @bind-Value="pump.Category" class="form-control">
                        <option value="">Pilih Jenis...</option>
                        @foreach (var category in categoryOptions)
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Category)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Lokasi" class="col-form-label">Lokasi <span class="required">*</span></label>
                    <InputSelect id="Lokasi" @bind-Value="pump.Location" class="form-control">
                        <option value="">Pilih Lokasi...</option>
                        @foreach (var location in locationOptions)
                        {
                            <option value="@location">@location</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Location)" />
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <label for="Tahun" class="col-form-label">Tahun</label>
                    <InputNumber id="Tahun" @bind-Value="pump.Year" class="form-control" />
                    <ValidationMessage For="@(() => pump.Year)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Kapasitas" class="col-form-label">Kapasitas</label>
                            <InputText class="form-control" id="Kapasitas" @bind-Value="_capacityInput" @oninput="HandleCapacityInput" />
                            @if (!string.IsNullOrEmpty(_capacityError))
                            {
                                <div class="text-danger small mt-1">@_capacityError</div>
                            }
                            <ValidationMessage For="@(() => pump.CapacityValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanKapasitas" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanKapasitas" @bind-Value="pump.CapacityUnit" class="form-control" disabled="@IsCapacityUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in capacityUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @if (pump.CapacityValue.HasValue && pump.CapacityValue.Value > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
                            {
                                <div class="text-danger">Unit harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <div class="mb-3">
                        <label for="DeskripsiDaya" class="col-form-label">Deskripsi Daya (Opsional)</label>
                        <InputText id="DeskripsiDaya" @bind-Value="pump.PowerDescription" class="form-control" placeholder="Contoh: Diesel Engine Cummins" />
                    </div>

                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Daya" class="col-form-label">Daya</label>
                            <InputText class="form-control" id="Daya" @bind-Value="_powerInput" @oninput="HandlePowerInput" />
                            @if (!string.IsNullOrEmpty(_powerError))
                            {
                                <div class="text-danger small mt-1">@_powerError</div>
                            }
                            <ValidationMessage For="@(() => pump.PowerValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanDaya" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanDaya" @bind-Value="pump.PowerUnit" class="form-control" disabled="@IsPowerUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in powerUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @if (pump.PowerValue.HasValue && pump.PowerValue.Value > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
                            {
                                <div class="text-danger">Unit harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-12 mb-3">
                <label for="ExplotionProof" class="col-form-label">Kode Explotion Proof</label>
                <InputText id="ExplotionProof" @bind-Value="pump.ExplotionProofCode" class="form-control" />
                <ValidationMessage For="@(() => pump.ExplotionProofCode)" />
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Foto" class="col-form-label">Foto</label>
                @if (string.IsNullOrWhiteSpace(pump.Image))
                {
                    <InputFile id="Foto" class="form-control"
                               accept=".jpg,.jpeg,.png"
                               OnChange="HandleFileUpload" />
                    <small class="form-text text-muted">Opsional: Unggah foto Pompa (JPG, JPEG, PNG).</small>
                    <ValidationMessage For="@(() => pump.Image)" />
                }
                else
                {
                    <div class="d-flex align-items-center">
                        <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(pump.Image)" alt="Pompa Image">
                        <button @onclick="() => HandleFileChangeAsync(pump.Image, IMAGE_FILE_CATEGORY)" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                    </div>
                }
            </div>

            @* Tombol Aksi Formulir *@
            <div class="float-end mt-3">
                <button type="button" class="btn btn-secondary me-2" @onclick="CancelAsync">Batal</button>
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // State Halaman
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private Pump pump = new();
    private User? currentUserInfo;
    private DotNetObjectReference<PumpAdd> dotNetHelper = default!;
    private bool uploadErrorStatus;
    private bool IsCapacityUnitDisabled = true;
    private bool IsPowerUnitDisabled = true;

    // Properti untuk validasi real-time
    private string _capacityInput = string.Empty;
    private string _powerInput = string.Empty;
    private string? _capacityError;
    private string? _powerError;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string IMAGE_FILE_CATEGORY = "img";
    private const string IMAGE_FOLDER_NAME = "Pompa";
    private string webStorageRoot = string.Empty;

    // Form Properties
    private List<string> pumpName = new() { "Pompa Delivery", "Pompa Pendukung Operasional", "Pompa Air Bersih", "Pompa Kondisi Darurat Kebakaran" };
    private List<string> capacityUnits = new() { "GPM", "LPM", "M3/h", "M3/min" };
    private List<string> powerUnits = new() { "HP", "kW", "Watt" };
    private List<string> materialOptions = new() { "Alumunium", "Braze - Kuningan", "Carbon Steel", "Stainless Steel" };
    private List<string> categoryOptions = new() { "Booster Pump", "Centrifugal", "Centrifugal self priming", "Diaphragma 1 Inch", "Diaphragma 2 Inch", "Diaphragma 3 Inch", "Gear", "LUBE", "Multi stage", "Plunger Pump", "Screw", "Submersible", "Submersible/Satelit", "Vertical Pump" };
    private List<string> locationOptions = new() { "Blader Tank", "Box Culvert", "Dump Filing", "Fire Pump Room", "Guesthouse", "Hose Pit 1", "New Pumpit", "Pump Pit 1", "Pump Pit 2", "Pump Pit 2/5", "Pump Pit 4", "Pump Pit 6", "Pump Pit 7", "Sea Water Intake", "Separator", "Tank Pit 1", "Tank Pit 2", "Tank Pit 5", "Tank Pit 6", "Tangki T307", "Tangki T308", "Tangki T502", "Tangki T608", "Utility Building" };
    private List<string> brandOptions = new() { "ARO", "BSK", "CROWN", "DAB PUMP", "DABITALI", "DENSIN", "EBARRA", "GPA PUMP", "GRUNDFOS", "INGERSOLL RAND", "KSA", "MTX", "NIKUNI", "PATTERSON", "ROTOR", "SANYO", "SEEPEX", "SP Pump", "STERLING SSP", "SUNNY KING", "TORISHIMA", "VIKING PUMP", "WORTHINGTON", "XA PUMP", "YONJOU", "YORK" };
    private List<string> typeOptions = new()
    {
        "200 x 150 CN 6", "RG31 7SP-100-38", "8 x 6 MABSH", "K1A2340/A70", "CR 10-18",
        "P-H137AC-S", "JET 82 M", "66M3 SUS", "PD20A-APP-FTT", "PD10A-APP-FTT",
        "BA80AL09T3A", "SP-30", "S 200 E", "50DS 52", "80 DL", "3D1DM3", "4SYK 16-10P",
        "CDWP 30", "CER 80-200", "ETA 65-20", "EC 65-20", "N 4 337", "CPEN 65-200",
        "SKH 100-28", "EC 80-25", "ETA 150-40", "65-CP-200", "100 CFC", "EC 65-20",
        "CPEN 50-200", "SPL-.750", "BM-52", "ETA-N200x150", "ETA-N 80x65x160",
        "RA-50-25 G3", "GU-50-200", "50/20", "32/10", "IH100-65-200A/2-304/CEX", "80/20"
    };


    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfoAsync();
        await LoadConfigurationAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }

    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    private async Task LoadConfigurationAsync()
    {
        try
        {
            webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi. Silakan hubungi Administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi: {ex.Message}");
            NavigationManager.NavigateTo("./");
        }
    }

    private async Task LoadUserInfoAsync()
    {
        if (authenticationStateTask == null) return;
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("Id")?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                await NotificationService.AlertMessage("ID pengguna tidak ditemukan. Harap login kembali.");
                NavigationManager.NavigateTo("./");
                return;
            }

            try
            {
                currentUserInfo = await CRUDService.ReadSingleAsync<User, string>(userId);
                if (currentUserInfo == null)
                {
                    await NotificationService.AlertMessage("Data pengguna tidak ditemukan. Harap login kembali.");
                    NavigationManager.NavigateTo("./");
                }
            }
            catch (Exception ex)
            {
                await NotificationService.AlertMessage("Gagal memuat data pengguna. Silakan hubungi Administrator.");
                NotificationService.LogMessage($"Pengecualian saat memuat data pengguna: {ex.Message}");
                NavigationManager.NavigateTo("./");
            }
        }
        else
        {
            NavigationManager.NavigateTo("./");
        }
    }

    private bool ValidatePowerAndCapacityInputs()
    {
        // Cek input Kapasitas
        if (!string.IsNullOrWhiteSpace(_capacityInput))
        {
            var sanitizedInput = _capacityInput.Replace(',', '.');
            if (!double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue))
            {
                return false;
            }
            if (parsedValue > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
            {
                return false;
            }
        }

        // Cek input Daya
        if (!string.IsNullOrWhiteSpace(_powerInput))
        {
            var sanitizedInput = _powerInput.Replace(',', '.');
            if (!double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue))
            {
                return false;
            }
            if (parsedValue > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
            {
                return false;
            }
        }

        return true;
    }

    private async Task HandleCreatePump()
    {
        if (!ValidatePowerAndCapacityInputs())
        {
            await NotificationService.AlertMessage("Input tidak valid. Mohon periksa kembali input Kapasitas dan Daya, pastikan format angka benar dan unit telah dipilih.");
            return;
        }

        if (uploadErrorStatus)
        {
            await NotificationService.AlertMessage($"Gagal upload gambar.\n{UploadService.UploadErrorMessage}");
            uploadErrorStatus = false;
            return;
        }

        await CRUDService.CreateAsync<Pump>(pump);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan data. Hubungi Administrator.");
            NotificationService.LogMessage($"Gagal menyimpan data\nDetail :\n{CRUDService.CRUDErrorMessage}");
            return;
        }

        NavigationManager.NavigateTo("./PumpList?status=CreateSuccess");
    }

    private async Task HandleInvalidSubmit()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali input Anda. Ada beberapa kesalahan yang perlu diperbaiki.");
        NotificationService.LogMessage($"Formulir PumpAdd disubmit dengan input tidak valid.");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUploadAsync(e, IMAGE_FOLDER_NAME, IMAGE_FILE_CATEGORY);
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e, string folderName, string fileType)
    {
        try
        {
            await UploadService.FilesUpload(e.File, folderName, SUB_FOLDER_NAME, fileType);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah berkas. Detail: {UploadService.UploadErrorMessage}");
                uploadErrorStatus = true;
                return;
            }

            if (fileType == IMAGE_FILE_CATEGORY)
            {
                pump.Image = UploadService.FilePath;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file: {ex.Message}");
            uploadErrorStatus = true;
        }
        StateHasChanged();
    }

    private async Task HandleFileChangeAsync(string? filePath, string fileType)
    {
        if (string.IsNullOrWhiteSpace(filePath)) return;
        try
        {
            await UploadService.FileChange(filePath, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengganti berkas. Silakan coba lagi.");
                return;
            }

            if (fileType == IMAGE_FILE_CATEGORY)
            {
                pump.Image = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengganti file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengganti file: {ex.Message}");
        }
        StateHasChanged();
    }

    private void HandleCapacityInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        var sanitizedInput = inputValue.Replace(',', '.');
        _capacityInput = sanitizedInput;
        _capacityError = null;
        if (string.IsNullOrWhiteSpace(sanitizedInput))
        {
            pump.CapacityValue = null;
            IsCapacityUnitDisabled = true;
            pump.CapacityUnit = null;
            return;
        }

        if (double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue))
        {
            pump.CapacityValue = parsedValue;
        }
        else
        {
            _capacityError = "Input Kapasitas harus berupa angka (desimal dipersilakan).";
            _capacityInput = string.Empty;
            pump.CapacityValue = null;
        }

        IsCapacityUnitDisabled = !pump.CapacityValue.HasValue || pump.CapacityValue.Value <= 0;
        if (IsCapacityUnitDisabled)
        {
            pump.CapacityUnit = null;
        }
    }

    private void HandlePowerInput(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString() ?? string.Empty;
        var sanitizedInput = inputValue.Replace(',', '.');
        _powerInput = sanitizedInput;
        _powerError = null;
        if (string.IsNullOrWhiteSpace(sanitizedInput))
        {
            pump.PowerValue = null;
            IsPowerUnitDisabled = true;
            pump.PowerUnit = null;
            return;
        }

        if (double.TryParse(sanitizedInput, NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedValue))
        {
            pump.PowerValue = parsedValue;
        }
        else
        {
            _powerError = "Input Daya harus berupa angka (desimal dipersilakan).";
            _powerInput = string.Empty;
            pump.PowerValue = null;
        }

        IsPowerUnitDisabled = !pump.PowerValue.HasValue || pump.PowerValue.Value <= 0;
        if (IsPowerUnitDisabled)
        {
            pump.PowerUnit = null;
        }
    }

    private string CreateFilePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(webStorageRoot, relativePath).Replace("\\", "/");
    }

    private async Task CancelAsync()
    {
        if (!string.IsNullOrWhiteSpace(pump.Image))
        {
            await HandleFileChangeAsync(pump.Image, IMAGE_FILE_CATEGORY);
        }
        await JSRuntime.InvokeVoidAsync("blazorInterop.replaceHistoryState");
        NavigationManager.NavigateTo("./PumpList");
    }
}