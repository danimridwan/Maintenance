@page "/PumpAdd"

@using MaintenanceWebApp.Data
@using Microsoft.EntityFrameworkCore
@using UploadFilesLibrary
@using Microsoft.Data.SqlClient
@inject IDbContextFactory<DataContext> DbContextFactory
@inject DataContext DataContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject ISqlDataAccess SqlDataAccess

<EditForm Model="pump" OnValidSubmit="CreatePump">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-light border-primary">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                    <a href="PumpList" class="nav-link"><span class="oi oi-chevron-left"></span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(CurrentStep == 1 ? "active" : "disabled")">General Information</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(CurrentStep == 2 ? "active" : "disabled")">Pump Information</a>
                </li>
            </ul>
        </div>
        <div class="card-body">
            @if (CurrentStep == 1)
            {
                <div class="form-group row">
                    <div class="col-sm-12">
                        <label for="PumpTag" class="col-form-label">Pump Tag <span class="required">*</span></label>
                        <InputText id="PumpTag" @bind-Value="pump.PumpTag" class="form-control" />
                        @if (errors.ContainsKey("PumpTag"))
                        {
                            <span class="text-danger">@errors["PumpTag"]</span>
                        }
                    </div>
                    <div class="col-sm-6">
                        <label for="Brand" class="col-form-label">Brand <span class="required">*</span></label>
                        <InputText id="Brand" @bind-Value="pump.Brand" class="form-control" />

                        @if (errors.ContainsKey("Brand"))
                        {
                            <span class="text-danger">@errors["Brand"]</span>
                        }

                    </div>
                    <div class="col-sm-6">
                        <label for="Material" class="col-form-label">Material <span class="required">*</span></label>
                        <InputText id="Material" @bind-Value="pump.Material" class="form-control" />

                        @if (errors.ContainsKey("Material"))
                        {
                            <span class="text-danger">@errors["Material"]</span>
                        }

                    </div>
                    <div class="col-sm-6">
                        <label for="Type" class="col-form-label">Type <span class="required">*</span></label>
                        <InputText id="Type" @bind-Value="pump.Type" class="form-control" />

                        @if (errors.ContainsKey("Type"))
                        {
                            <span class="text-danger">@errors["Type"]</span>
                        }

                    </div>
                    <div class="col-sm-6">
                        <label for="Location" class="col-form-label">Location <span class="required">*</span></label>
                        <InputText id="Location" @bind-Value="pump.Location" class="form-control" />

                        @if (errors.ContainsKey("Location"))
                        {
                            <span class="text-danger">@errors["Location"]</span>
                        }

                    </div>
                    <div class="col-sm-12">
                        <label for="Photo" class="col-form-label">Photo</label>
                        <InputFile id="Photo" class="form-control"
                        accept=".jpg,.jpeg,.png"
                        OnChange="HandleFileUpload" />
                    </div>
                </div>
            }
            else if (CurrentStep == 2)
            {
                <div class="form-group row">
                    <div class="col-sm-12">
                        <label for="PumpCategoryType" class="col-form-label">Pump Category Type <span class="required">*</span></label>
                        <InputText id="PumpCategoryType" @bind-Value="pump.CategoryType" class="form-control" />
                        @if (errors.ContainsKey("PumpCategoryType"))
                        {
                            <span class="text-danger">@errors["PumpCategoryType"]</span>
                        }
                    </div>
                    <div class="col-sm-6">
                        <label for="PumpYear" class="col-form-label">Year <span class="required">*</span></label>
                        <InputText id="PumpYear" @bind-Value="pump.Year" class="form-control" />
                        @if (errors.ContainsKey("PumpYear"))
                        {
                            <span class="text-danger">@errors["PumpYear"]</span>
                        }
                    </div>
                    <div class="col-sm-6">
                        <label for="PumpCapacity" class="col-form-label">Capacity (M3/h) <span class="required">*</span></label>
                        <InputText id="PumpCapacity" @bind-Value="pump.PumpCapacity" class="form-control" />
                        @if (errors.ContainsKey("PumpCapacity"))
                        {
                            <span class="text-danger">@errors["PumpCapacity"]</span>
                        }
                    </div>
                    <div class="col-sm-6">
                        <div class="row">
                            <div class="col-sm-8">
                                <label for="PumpPower" class="col-form-label">Power</label>

                                <InputText class="form-control" id="PumpPower" step="any" @bind-value:event="onchange" @oninput="InputPower" @bind-value="pump.Power" />

                                @if (errors.ContainsKey("PumpPower"))
                                {
                                    <span class="text-danger">@errors["PumpPower"]</span>
                                }
                            </div>
                            <div class="col-sm-4">
                                <label for="PowerType" class="col-form-label text-muted">HP/KW</label>
                                <InputSelect id="PowerType" @bind-Value="PowerType" class="form-control" disabled>
                                    <option value="">Select Power..</option>
                                    <option value="HP">HP</option>
                                    <option value="KW">KW</option>
                                </InputSelect>
                                @if (errors.ContainsKey("PowerType"))
                                {
                                    <span class="text-danger">@errors["PowerType"]</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <label for="ExplotionProofCode" class="col-form-label">Explotion Proof Code</label>
                        <InputText id="ExplotionProofCode" @bind-Value="pump.ExplotionProofCode"
                        class="form-control" />
                        @if (errors.ContainsKey("ExplotionProofCode"))
                        {
                            <span class="text-danger">@errors["ExplotionProofCode"]</span>
                        }
                    </div>
                </div>
            }

            <div class="float-end mt-3">
                @if (CurrentStep == 1)
                {
                    <button type="button" class="btn btn-primary" @onclick="NextStep">Next</button>
                }
                else
                {
                    <button type="button" class="btn btn-secondary mr-2" @onclick="PreviousStep">Previous</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                }
            </div>

        </div>
    </div>
</EditForm>

@code {
    private Pump pump = new();
    private List<Tank> Tanks = new();
    private int CurrentStep = 1;
    private Dictionary<string, string> errors = new();
    private const long MaxFileSize = 3 * 1024 * 1024; // 3MB in bytes
    private bool ValidationStatus = false;
    private string PowerType;

    protected override async Task OnInitializedAsync()
    {
        await LoadTanksAsync();
    }

    private async Task LoadTanksAsync()
    {
        try
        {
            await using var db = await DbContextFactory.CreateDbContextAsync();
            Tanks = await db.Tanks.OrderBy(t => t.TankNo).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tanks: {ex.Message}");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        errors.Clear();
        var file = e.File;

        if (file == null)
        {
            pump.Photo = null;
            return;
        }

        if (file.Size > MaxFileSize)
        {
            errors["File"] = $"File size exceeds maximum limit of {MaxFileSize / (1024 * 1024)}MB";
            await ShowAlert(string.Join("\n", errors));
            return;
        }

        try
        {
            var basePath = Configuration["FileStorageInventories"];
            var folder = "Pump";
            var directory = Path.Combine(basePath, folder);

            Directory.CreateDirectory(directory);

            var extension = Path.GetExtension(file.Name);
            var newFileName = $"{Guid.NewGuid()}{extension}";
            var fullPath = Path.Combine(directory, newFileName);

            await using var stream = file.OpenReadStream(MaxFileSize);
            await using var fileStream = new FileStream(fullPath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            pump.Photo = Path.Combine(folder, newFileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"File upload error: {ex.Message}");
            errors["File"] = "Failed to upload file. Please try again.";
            await ShowAlert(string.Join("\n", errors));
        }
    }

    private async Task ValidateForm()
    {
        if (CurrentStep == 1)
        {
            ValidateGeneralInformation();
        }
        else if (CurrentStep == 2)
        {
            ValidatePumpInformation();
        }
    }

    private void ValidateGeneralInformation()
    {
        if (string.IsNullOrWhiteSpace(pump.PumpTag))
            errors["PumpTag"] = "Pump Tag is required";
        if (string.IsNullOrWhiteSpace(pump.Brand))
            errors["Brand"] = "Brand is required";
        if (string.IsNullOrWhiteSpace(pump.Material))
            errors["Material"] = "Material is required";
        if (string.IsNullOrWhiteSpace(pump.Type))
            errors["Type"] = "Type is required";
        if (string.IsNullOrWhiteSpace(pump.Location))
            errors["Location"] = "Location is required";
    }

    private void ValidatePumpInformation()
    {
        if (string.IsNullOrWhiteSpace(pump.Year))
            errors["PumpCategoryType"] = "Pump Category Type is required";
        if (string.IsNullOrWhiteSpace(pump.Year))
            errors["PumpYear"] = "Pump Year is required";
        if (string.IsNullOrWhiteSpace(pump.PumpCapacity))
            errors["PumpCapacity"] = "Pump Capacity is required";
    }

    private async Task NextStep()
    {
        errors.Clear();
        await ValidateForm();

        if (!errors.Any())
        {
            CurrentStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        CurrentStep--;
        StateHasChanged();
    }

    private async Task CreatePump()
    {
        errors.Clear();
        await ValidateForm();

        if (!errors.Any())
        {
            try
            {
                pump.Power = pump.Power + "&nbsp" + PowerType;
                await using var db = await DbContextFactory.CreateDbContextAsync();
                db.Pumps.Add(pump);
                await db.SaveChangesAsync();

                NavigationManager.NavigateTo("/PumpList");
            }
            catch (DbUpdateException ex)
            {
                var errorMessage = ex.InnerException switch
                {
                    SqlException sqlEx => $"Database error: {sqlEx.Message}",
                    _ => ex.Message
                };

                errors["Database"] = errorMessage;
                Console.WriteLine($"Database error: {errorMessage}");
                await ShowAlert(string.Join("\n", errors));
            }
            catch (Exception ex)
            {
                errors["General"] = "An unexpected error occurred";
                Console.WriteLine($"Error creating pump: {ex.Message}");
                await ShowAlert(string.Join("\n", errors));
            }
        }
    }

    private void InputPower(ChangeEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(Convert.ToString(pump.Power)))
            Console.WriteLine("Halo");
    }

    private async Task ShowAlert(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}