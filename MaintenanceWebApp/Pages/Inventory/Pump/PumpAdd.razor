@page "/PumpAdd"

@using MaintenanceWebApp.Data
@using MaintenanceWebApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.IO
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

@* Services *@
@inject CRUDService CRUDService
@inject UploadFilesService UploadService
@inject NotificationService NotificationService

@* Otorisasi Berdasarkan Peran *@
@attribute [Authorize(Roles = "Admin, Maintenance Supervisor, Maintenance")]

<div class="card">
    @* Header Formulir *@
    <div class="card-header bg-light border-primary">
        <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
                <a style="cursor: pointer;" @onclick="CancelAsync" class="nav-link" aria-label="Kembali ke Daftar Pompa">
                    <span class="oi oi-chevron-left"></span>
                </a>
            </li>
            <li class="nav-item">
                <span class="nav-link active" aria-current="page">Tambah Pompa</span>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <EditForm Model="pump" OnValidSubmit="HandleCreatePump" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group row">
                <div class="col-sm-12 mb-3">
                    <label for="NamaPompa" class="col-form-label">Nama Pompa <span class="required">*</span></label>
                    <InputSelect id="NamaPompa" @bind-Value="pump.Name" class="form-control">
                        <option value="">...</option>
                        @foreach (var name in pumpName)
                        {
                            <option value="@name">@name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => pump.Name)" />
                </div>

                <div class="col-sm-12 mb-3">
                    <label for="TagPompa" class="col-form-label">Tag No Pompa <span class="required">*</span></label>
                    <InputText id="TagPompa" @bind-Value="pump.Tag" class="form-control" />
                    <ValidationMessage For="@(() => pump.Tag)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Merk" class="col-form-label">Merk</label>
                    <InputText id="Merk" @bind-Value="pump.Brand" class="form-control" />
                    <ValidationMessage For="@(() => pump.Brand)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Material" class="col-form-label">Material</label>
                    <InputText id="Material" @bind-Value="pump.Material" class="form-control" />
                    <ValidationMessage For="@(() => pump.Material)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Jenis" class="col-form-label">Jenis</label>
                    <InputText id="Jenis" @bind-Value="pump.Category" class="form-control" />
                    <ValidationMessage For="@(() => pump.Category)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <label for="Lokasi" class="col-form-label">Lokasi <span class="required">*</span></label>
                    <InputText id="Lokasi" @bind-Value="pump.Location" class="form-control" />
                    <ValidationMessage For="@(() => pump.Location)" />
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <label for="Tahun" class="col-form-label">Tahun</label>
                    <InputNumber id="Tahun" @bind-Value="pump.Year" class="form-control" />
                    <ValidationMessage For="@(() => pump.Year)" />
                </div>

                <div class="col-sm-6 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Kapasitas" class="col-form-label">Kapasitas</label>
                            <InputNumber class="form-control" id="Kapasitas" @bind-Value="pump.CapacityValue" @oninput="OnCapacityInputChanged" />
                            <ValidationMessage For="@(() => pump.CapacityValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanKapasitas" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanKapasitas" @bind-Value="pump.CapacityUnit" class="form-control" disabled="@IsCapacityUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in capacityUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @if (pump.CapacityValue.HasValue && pump.CapacityValue.Value > 0 && string.IsNullOrWhiteSpace(pump.CapacityUnit))
                            {
                                <div class="text-danger">Satuan Kapasitas harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6 mb-3">
                    <div class="row">
                        <div class="col-sm-8">
                            <label for="Tenaga" class="col-form-label">Tenaga</label>
                            <InputNumber class="form-control" id="Tenaga" @bind-Value="pump.PowerValue" @oninput="OnPowerInputChanged" />
                            <ValidationMessage For="@(() => pump.PowerValue)" />
                        </div>
                        <div class="col-sm-4">
                            <label for="SatuanTenaga" class="col-form-label">Unit</label>
                            <InputSelect id="SatuanTenaga" @bind-Value="pump.PowerUnit" class="form-control" disabled="@IsPowerUnitDisabled">
                                <option value="">...</option>
                                @foreach (var unit in powerUnits)
                                {
                                    <option value="@unit">@unit</option>
                                }
                            </InputSelect>
                            @if (pump.PowerValue.HasValue && pump.PowerValue.Value > 0 && string.IsNullOrWhiteSpace(pump.PowerUnit))
                            {
                                <div class="text-danger">Satuan Tenaga harus dipilih.</div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-12 mb-3">
                <label for="Foto" class="col-form-label">Foto</label>
                @if (string.IsNullOrWhiteSpace(pump.Image))
                {
                    <InputFile id="Foto" class="form-control"
                               accept=".jpg,.jpeg,.png"
                               OnChange="HandleFileUpload" />
                    <small class="form-text text-muted">Opsional: Unggah foto Pompa (JPG, JPEG, PNG).</small>
                    <ValidationMessage For="@(() => pump.Image)" />
                }
                else
                {
                    <div class="d-flex align-items-center">
                        <img style="border: #e9ecef solid; padding: 10px; border-radius: 5px; max-height: 150px;" src="@CreateFilePath(pump.Image)" alt="Pompa Image">
                        <button @onclick="() => HandleFileChangeAsync(pump.Image, IMAGE_FILE_CATEGORY)" type="button" class="btn btn-danger btn-sm ms-3">Ubah Foto</button>
                    </div>
                }
            </div>

            @* Tombol Aksi Formulir *@
            <div class="float-end mt-3">
                <button type="button" class="btn btn-secondary me-2" @onclick="CancelAsync">Batal</button>
                <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // State Halaman
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private Pump pump = new();
    private User? currentUserInfo;
    private DotNetObjectReference<PumpAdd> dotNetHelper = default!;
    private bool uploadErrorStatus;
    private bool IsCapacityUnitDisabled = true;
    private bool IsPowerUnitDisabled = true;

    // Konstanta
    private const string SUB_FOLDER_NAME = "Inventories";
    private const string IMAGE_FILE_CATEGORY = "img";
    private const string IMAGE_FOLDER_NAME = "Pompa";
    private string webStorageRoot = string.Empty;

    // Form Properties
    private List<string> pumpName = new() { "Fire Pump", "Transfer Pump", "Submersible Pump" };
    private List<string> capacityUnits = new() { "m3/hour", "GPM" };
    private List<string> powerUnits = new() { "HP", "kW" };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfoAsync();
        await LoadConfigurationAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorInterop.promptOnBack", dotNetHelper);
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
        JSRuntime.InvokeVoidAsync("blazorInterop.removeOnPopState");
    }

    [JSInvokable]
    public async Task HandleBackNavigation()
    {
        await CancelAsync();
    }

    private async Task LoadConfigurationAsync()
    {
        try
        {
            webStorageRoot = Configuration.GetValue<string>("WebStorageRoot") ?? "/";
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Gagal memuat konfigurasi. Silakan hubungi Administrator.");
            NotificationService.LogMessage($"Gagal memuat konfigurasi: {ex.Message}");
            NavigationManager.NavigateTo("./");
        }
    }

    private async Task LoadUserInfoAsync()
    {
        if (authenticationStateTask == null) return;
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("Id")?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                await NotificationService.AlertMessage("ID pengguna tidak ditemukan. Harap login kembali.");
                NavigationManager.NavigateTo("./");
                return;
            }

            try
            {
                currentUserInfo = await CRUDService.ReadSingleAsync<User, string>(userId);
                if (currentUserInfo == null)
                {
                    await NotificationService.AlertMessage("Data pengguna tidak ditemukan. Harap login kembali.");
                    NavigationManager.NavigateTo("./");
                }
            }
            catch (Exception ex)
            {
                await NotificationService.AlertMessage("Gagal memuat data pengguna. Silakan hubungi Administrator.");
                NotificationService.LogMessage($"Pengecualian saat memuat data pengguna: {ex.Message}");
                NavigationManager.NavigateTo("./");
            }
        }
        else
        {
            NavigationManager.NavigateTo("./");
        }
    }

    private async Task HandleCreatePump()
    {
        if (uploadErrorStatus)
        {
            await NotificationService.AlertMessage($"Gagal upload gambar.\n{UploadService.UploadErrorMessage}");
            NotificationService.LogMessage($"Gagal upload gambar\nDetail :\n{UploadService.UploadErrorMessage}");
            uploadErrorStatus = false;
            return;
        }

        await CRUDService.CreateAsync<Pump>(pump);
        if (!string.IsNullOrWhiteSpace(CRUDService.CRUDErrorMessage))
        {
            await NotificationService.AlertMessage("Gagal menyimpan data. Hubungi Administrator.");
            NotificationService.LogMessage($"Gagal menyimpan data\nDetail :\n{CRUDService.CRUDErrorMessage}");
            return;
        }

        NavigationManager.NavigateTo("/PumpList?status=CreateSuccess");
    }

    private async Task HandleInvalidSubmit()
    {
        await NotificationService.AlertMessage("Mohon periksa kembali input Anda. Ada beberapa kesalahan yang perlu diperbaiki.");
        NotificationService.LogMessage($"Formulir PumpAdd disubmit dengan input tidak valid.");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        await HandleFileUploadAsync(e, IMAGE_FOLDER_NAME, IMAGE_FILE_CATEGORY);
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e, string folderName, string fileType)
    {
        try
        {
            await UploadService.FilesUpload(e.File, folderName, SUB_FOLDER_NAME, fileType);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengunggah berkas. Detail: {UploadService.UploadErrorMessage}");
                NotificationService.LogMessage($"Pengunggahan berkas gagal: {UploadService.UploadErrorMessage}");
                uploadErrorStatus = true;
                return;
            }

            if (fileType == IMAGE_FILE_CATEGORY)
            {
                pump.Image = UploadService.FilePath;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengunggah file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengunggah file: {ex.Message}");
            uploadErrorStatus = true;
        }
        StateHasChanged();
    }

    private async Task HandleFileChangeAsync(string? filePath, string fileType)
    {
        if (string.IsNullOrWhiteSpace(filePath)) return;
        try
        {
            await UploadService.FileChange(filePath, SUB_FOLDER_NAME);
            if (!string.IsNullOrWhiteSpace(UploadService.UploadErrorMessage))
            {
                await NotificationService.AlertMessage($"Gagal mengganti berkas. Silakan coba lagi.");
                NotificationService.LogMessage($"Penggantian berkas gagal: {UploadService.UploadErrorMessage}");
                return;
            }

            if (fileType == IMAGE_FILE_CATEGORY)
            {
                pump.Image = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.AlertMessage("Terjadi kesalahan saat mengganti file. Silakan coba lagi.");
            NotificationService.LogMessage($"Pengecualian saat mengganti file: {ex.Message}");
        }
        StateHasChanged();
    }

    private string CreateFilePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return "/noimg.png";
        }
        return Path.Combine(webStorageRoot, relativePath).Replace("\\", "/");
    }

    private async Task CancelAsync()
    {
        if (!string.IsNullOrWhiteSpace(pump.Image))
        {
            await HandleFileChangeAsync(pump.Image, IMAGE_FILE_CATEGORY);
        }
        await JSRuntime.InvokeVoidAsync("blazorInterop.replaceHistoryState");
        NavigationManager.NavigateTo("./PumpList");
    }

    private void OnPowerInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentPowerInputValue))
        {
            pump.PowerValue = currentPowerInputValue;
        }
        else
        {
            pump.PowerValue = null;
        }

        IsPowerUnitDisabled = !pump.PowerValue.HasValue || pump.PowerValue.Value <= 0;

        if (IsPowerUnitDisabled)
        {
            pump.PowerUnit = null;
        }
        StateHasChanged();
    }

    private void OnCapacityInputChanged(ChangeEventArgs args)
    {
        if (double.TryParse(args.Value?.ToString(), out double currentCapacityInputValue))
        {
            pump.CapacityValue = currentCapacityInputValue;
        }
        else
        {
            pump.CapacityValue = null;
        }

        IsCapacityUnitDisabled = !pump.CapacityValue.HasValue || pump.CapacityValue.Value <= 0;

        if (IsCapacityUnitDisabled)
        {
            pump.CapacityUnit = null;
        }
        StateHasChanged();
    }
}